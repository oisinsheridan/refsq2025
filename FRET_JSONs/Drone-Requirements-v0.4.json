[
    {
        "reqid": "REQ007",
        "parent_reqid": "",
        "project": "Drone Requirements v0.4",
        "rationale": "\"Determination of the overall health of the system\"\n\nGroup: Monitoring\nFunctional\nFeasible\nNeeds Further Specification\n\"Possible duplicate of REQ005\"",
        "comments": "This feels like it could be argued to be a parent requirement of REQ005 - especially if there are other sub-systems to monitor besides the ones mentioned in REQ005\n\nv0.2: Unchanged for now",
        "fulltext": "System shall satisfy OverallSystemHealthMonitoring",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "null",
            "response": "satisfaction",
            "variables": [
                "OverallSystemHealthMonitoring"
            ],
            "component_name": "System",
            "componentTextRange": [
                0,
                5
            ],
            "post_condition": "(OverallSystemHealthMonitoring)",
            "responseTextRange": [
                13,
                49
            ],
            "diagramVariables": "Response = <b><i>(OverallSystemHealthMonitoring)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_null_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "post_condition_unexp_pt": "OverallSystemHealthMonitoring",
            "post_condition_unexp_ft": "OverallSystemHealthMonitoring",
            "post_condition_SMV_pt": "OverallSystemHealthMonitoring",
            "post_condition_SMV_ft": "OverallSystemHealthMonitoring",
            "ft_fetched": "((! LAST) U $post_condition_unexp_ft$)",
            "ft": "((! LAST) U OverallSystemHealthMonitoring)",
            "pt_fetched": "(O $post_condition_unexp_pt$)",
            "pt": "(O OverallSystemHealthMonitoring)",
            "ptExpanded_fetched": "(O $post_condition_SMV_pt$)",
            "ptExpanded": "(O OverallSystemHealthMonitoring)",
            "CoCoSpecCode": "O(OverallSystemHealthMonitoring)",
            "ftExpanded_fetched": "((! LAST) U $post_condition_SMV_ft$)",
            "ftExpandedUnoptimized": "((! LAST) U OverallSystemHealthMonitoring)",
            "ftExpanded": "((! LAST) U OverallSystemHealthMonitoring)",
            "ftInfAUExpanded_fetched": "(F $post_condition_SMV_ft$)",
            "ftInfAUExpanded": "(F OverallSystemHealthMonitoring)",
            "component": "System"
        },
        "status": "",
        "_id": "cca703f0-d8e6-11ef-941f-71fece653e2f"
    },
    {
        "reqid": "REQ014",
        "parent_reqid": "",
        "project": "Drone Requirements v0.4",
        "rationale": "\"Simulation of communications and package sending\"\n\nGroup: Simulation\nFunctional\nFeasible\nNeeds Further Specification\n",
        "comments": "v0.2: Added SimulationMode and changed the component to the Raspberry. Is that change correct?",
        "fulltext": "in SimulationMode Raspberry shall always satisfy SimulateCommunications & SimulatePackageSending",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": [
                "SimulationMode",
                "SimulateCommunications",
                "SimulatePackageSending"
            ],
            "scope_mode": "SimulationMode",
            "scopeTextRange": [
                0,
                16
            ],
            "component_name": "Raspberry",
            "componentTextRange": [
                18,
                26
            ],
            "timingTextRange": [
                34,
                39
            ],
            "post_condition": "(SimulateCommunications & SimulatePackageSending)",
            "responseTextRange": [
                41,
                95
            ],
            "diagramVariables": "M = <b><i>SimulationMode</i></b>, Response = <b><i>(SimulateCommunications & SimulatePackageSending)</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>SimulationMode</i></b> holds.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_null_always_satisfaction.svg",
            "scope_mode_pt": "SimulationMode",
            "scope_mode_ft": "SimulationMode",
            "post_condition_unexp_pt": "(SimulateCommunications & SimulatePackageSending)",
            "post_condition_unexp_ft": "(SimulateCommunications & SimulatePackageSending)",
            "post_condition_SMV_pt": "(SimulateCommunications & SimulatePackageSending)",
            "post_condition_SMV_ft": "(SimulateCommunications & SimulatePackageSending)",
            "ft_fetched": "(LAST V ($scope_mode_ft$ -> $post_condition_unexp_ft$))",
            "ft": "(LAST V (SimulationMode -> (SimulateCommunications & SimulatePackageSending)))",
            "pt_fetched": "(H ($scope_mode_pt$ -> $post_condition_unexp_pt$))",
            "pt": "(H (SimulationMode -> (SimulateCommunications & SimulatePackageSending)))",
            "ptExpanded_fetched": "(H ($scope_mode_pt$ -> $post_condition_SMV_pt$))",
            "ptExpanded": "(H (SimulationMode -> (SimulateCommunications & SimulatePackageSending)))",
            "CoCoSpecCode": "H((SimulationMode => (SimulateCommunications and SimulatePackageSending)))",
            "ftExpanded_fetched": "(LAST V ($scope_mode_ft$ -> $post_condition_SMV_ft$))",
            "ftExpandedUnoptimized": "(LAST V (SimulationMode -> (SimulateCommunications & SimulatePackageSending)))",
            "ftExpanded": "(LAST V (SimulationMode -> (SimulateCommunications & SimulatePackageSending)))",
            "ftInfAUExpanded_fetched": "(G ($scope_mode_ft$ -> $post_condition_SMV_ft$))",
            "ftInfAUExpanded": "(G (SimulationMode -> (SimulateCommunications & SimulatePackageSending)))",
            "component": "Raspberry"
        },
        "status": "",
        "_id": "cca703f1-d8e6-11ef-941f-71fece653e2f"
    },
    {
        "reqid": "REQ062",
        "parent_reqid": "",
        "project": "Drone Requirements v0.4",
        "rationale": "\"Allow evaluation of UAV performance\"\n\nGroup: Data Monitoring\nFunctional\nFeasible\nNeeds Further Specification\n\"What does the user means as UAV performance?\"",
        "comments": "",
        "fulltext": "",
        "semantics": {},
        "status": "",
        "_id": "cca703f2-d8e6-11ef-941f-71fece653e2f"
    },
    {
        "reqid": "REQ051",
        "parent_reqid": "",
        "project": "Drone Requirements v0.4",
        "rationale": "\"Monitor RTK data\"\n\nGroup: Data Monitoring\nFunctional\nLikely Unfeasible\nNeeds Further Specification\n\"What RTK data?\"",
        "comments": "",
        "fulltext": "upon ControlLoopStart ActiveNucleo shall before ControlLoopFinish satisfy MonitorRTKData & SendRTKData",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "before",
            "response": "satisfaction",
            "variables": [
                "ControlLoopStart",
                "ControlLoopFinish",
                "MonitorRTKData",
                "SendRTKData"
            ],
            "qualifier_word": "upon",
            "pre_condition": "(ControlLoopStart)",
            "regular_condition": "(ControlLoopStart)",
            "conditionTextRange": [
                0,
                20
            ],
            "component_name": "ActiveNucleo",
            "componentTextRange": [
                22,
                33
            ],
            "stop_condition": "(ControlLoopFinish)",
            "timingTextRange": [
                41,
                64
            ],
            "post_condition": "(MonitorRTKData & SendRTKData)",
            "responseTextRange": [
                66,
                101
            ],
            "diagramVariables": "TC = <b><i>(ControlLoopStart)</i></b>, SC = <b><i>(ControlLoopFinish)</i></b>, Response = <b><i>(MonitorRTKData & SendRTKData)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(ControlLoopStart)</i></b> is true and any point in the interval where <b><i>(ControlLoopStart)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at least once strictly before the state where the stop condition holds. If the stop condition never occurs in the interval, RES does not need to hold. If the stop condition holds at the trigger, the requirement is not satisfied.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_before_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "regular_condition_unexp_pt": "ControlLoopStart",
            "regular_condition_unexp_ft": "ControlLoopStart",
            "regular_condition_SMV_pt": "ControlLoopStart",
            "regular_condition_SMV_ft": "ControlLoopStart",
            "post_condition_unexp_pt": "(MonitorRTKData & SendRTKData)",
            "post_condition_unexp_ft": "(MonitorRTKData & SendRTKData)",
            "post_condition_SMV_pt": "(MonitorRTKData & SendRTKData)",
            "post_condition_SMV_ft": "(MonitorRTKData & SendRTKData)",
            "stop_condition_unexp_pt": "ControlLoopFinish",
            "stop_condition_unexp_ft": "ControlLoopFinish",
            "stop_condition_SMV_pt": "ControlLoopFinish",
            "stop_condition_SMV_ft": "ControlLoopFinish",
            "ft_fetched": "((LAST V (((! $regular_condition_unexp_ft$) & ((! LAST) & (X $regular_condition_unexp_ft$))) -> (X (($post_condition_unexp_ft$ | LAST) V (! $stop_condition_unexp_ft$))))) & ($regular_condition_unexp_ft$ -> (($post_condition_unexp_ft$ | LAST) V (! $stop_condition_unexp_ft$))))",
            "ft": "((LAST V (((! ControlLoopStart) & ((! LAST) & (X ControlLoopStart))) -> (X (((MonitorRTKData & SendRTKData) | LAST) V (! ControlLoopFinish))))) & (ControlLoopStart -> (((MonitorRTKData & SendRTKData) | LAST) V (! ControlLoopFinish))))",
            "pt_fetched": "(H ($stop_condition_unexp_pt$ -> ((H (! $regular_condition_unexp_pt$)) | (((! FTP) & (! ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | FTP)))) & (Y (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | FTP))))))))))",
            "pt": "(H (ControlLoopFinish -> ((H (! ControlLoopStart)) | (((! FTP) & (! (ControlLoopStart & ((Y (! ControlLoopStart)) | FTP)))) & (Y (! ((! (MonitorRTKData & SendRTKData)) S ((! (MonitorRTKData & SendRTKData)) & (ControlLoopStart & ((Y (! ControlLoopStart)) | FTP))))))))))",
            "ptExpanded_fetched": "(H ($stop_condition_SMV_pt$ -> ((H (! $regular_condition_SMV_pt$)) | (((Y TRUE) & (! ($regular_condition_SMV_pt$ & (Z (! $regular_condition_SMV_pt$))))) & (Y (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & (Z (! $regular_condition_SMV_pt$)))))))))))",
            "ptExpanded": "(H (ControlLoopFinish -> ((H (! ControlLoopStart)) | (((Y TRUE) & (! (ControlLoopStart & (Z (! ControlLoopStart))))) & (Y (! ((! (MonitorRTKData & SendRTKData)) S ((! (MonitorRTKData & SendRTKData)) & (ControlLoopStart & (Z (! ControlLoopStart)))))))))))",
            "CoCoSpecCode": "H((ControlLoopFinish => (H(not (ControlLoopStart)) or ((YtoPre(true) and not ((ControlLoopStart and ZtoPre(not (ControlLoopStart))))) and YtoPre(not (SI((ControlLoopStart and ZtoPre(not (ControlLoopStart))),not ((MonitorRTKData and SendRTKData)))))))))",
            "ftExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X (($post_condition_SMV_ft$ | LAST) V (! $stop_condition_SMV_ft$))))) & ($regular_condition_SMV_ft$ -> (($post_condition_SMV_ft$ | LAST) V (! $stop_condition_SMV_ft$))))",
            "ftExpandedUnoptimized": "((LAST V (((! ControlLoopStart) & ((! LAST) & (X ControlLoopStart))) -> (X (((MonitorRTKData & SendRTKData) | LAST) V (! ControlLoopFinish))))) & (ControlLoopStart -> (((MonitorRTKData & SendRTKData) | LAST) V (! ControlLoopFinish))))",
            "ftExpanded": "((LAST V (((! ControlLoopStart) & ((! LAST) & (X ControlLoopStart))) -> (X (((MonitorRTKData & SendRTKData) | LAST) V (! ControlLoopFinish))))) & (ControlLoopStart -> (((MonitorRTKData & SendRTKData) | LAST) V (! ControlLoopFinish))))",
            "ftInfAUExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X ($post_condition_SMV_ft$ V (! $stop_condition_SMV_ft$))))) & ($regular_condition_SMV_ft$ -> ($post_condition_SMV_ft$ V (! $stop_condition_SMV_ft$))))",
            "ftInfAUExpanded": "((G (((! ControlLoopStart) & (X ControlLoopStart)) -> (X ((MonitorRTKData & SendRTKData) V (! ControlLoopFinish))))) & (ControlLoopStart -> ((MonitorRTKData & SendRTKData) V (! ControlLoopFinish))))",
            "component": "ActiveNucleo"
        },
        "status": "",
        "_id": "cca703f3-d8e6-11ef-941f-71fece653e2f"
    },
    {
        "reqid": "REQ010_2",
        "parent_reqid": "REQ010",
        "project": "Drone Requirements v0.4",
        "rationale": "",
        "comments": "",
        "fulltext": "when NucleoTwoControlTrigger System shall within 10 milliseconds satisfy NucleoTwoControl",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "within",
            "response": "satisfaction",
            "variables": [
                "NucleoTwoControlTrigger",
                "NucleoTwoControl"
            ],
            "qualifier_word": "when",
            "pre_condition": "(NucleoTwoControlTrigger)",
            "regular_condition": "(NucleoTwoControlTrigger)",
            "conditionTextRange": [
                0,
                27
            ],
            "component_name": "System",
            "componentTextRange": [
                29,
                34
            ],
            "duration": "10",
            "timingTextRange": [
                42,
                63
            ],
            "post_condition": "(NucleoTwoControl)",
            "responseTextRange": [
                65,
                88
            ],
            "diagramVariables": "TC = <b><i>(NucleoTwoControlTrigger)</i></b>,  n = <b><i>10</i></b>, Response = <b><i>(NucleoTwoControl)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(NucleoTwoControlTrigger)</i></b> is true and any point in the interval where <b><i>(NucleoTwoControlTrigger)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some point with distance <= <b><i>10</i></b> from the trigger (i.e., at trigger, trigger+1, ..., or trigger+<b><i>10</i></b>). If the interval ends sooner than trigger+<b><i>10</i></b>, then RES need not hold.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_within_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "regular_condition_unexp_pt": "NucleoTwoControlTrigger",
            "regular_condition_unexp_ft": "NucleoTwoControlTrigger",
            "regular_condition_SMV_pt": "NucleoTwoControlTrigger",
            "regular_condition_SMV_ft": "NucleoTwoControlTrigger",
            "post_condition_unexp_pt": "NucleoTwoControl",
            "post_condition_unexp_ft": "NucleoTwoControl",
            "post_condition_SMV_pt": "NucleoTwoControl",
            "post_condition_SMV_ft": "NucleoTwoControl",
            "ft_fetched": "((LAST V (((! $regular_condition_unexp_ft$) & ((! LAST) & (X $regular_condition_unexp_ft$))) -> (X ((F[<=$duration$] $post_condition_unexp_ft$) | (F[<$duration$] LAST))))) & ($regular_condition_unexp_ft$ -> ((F[<=$duration$] $post_condition_unexp_ft$) | (F[<$duration$] LAST))))",
            "ft": "((LAST V (((! NucleoTwoControlTrigger) & ((! LAST) & (X NucleoTwoControlTrigger))) -> (X ((F[<=10] NucleoTwoControl) | (F[<10] LAST))))) & (NucleoTwoControlTrigger -> ((F[<=10] NucleoTwoControl) | (F[<10] LAST))))",
            "pt_fetched": "(H ((O[=$duration$] (($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | FTP)) & (! $post_condition_unexp_pt$))) -> (O[<$duration$] (FTP | $post_condition_unexp_pt$))))",
            "pt": "(H ((O[=10] ((NucleoTwoControlTrigger & ((Y (! NucleoTwoControlTrigger)) | FTP)) & (! NucleoTwoControl))) -> (O[<10] (FTP | NucleoTwoControl))))",
            "ptExpanded_fetched": "(H ((O[=$duration$] (($regular_condition_SMV_pt$ & (Z (! $regular_condition_SMV_pt$))) & (! $post_condition_SMV_pt$))) -> (O[<$duration$] ((! (Y TRUE)) | $post_condition_SMV_pt$))))",
            "ptExpanded": "(H ((O[10,10] ((NucleoTwoControlTrigger & (Z (! NucleoTwoControlTrigger))) & (! NucleoTwoControl))) -> (O[0,9] ((! (Y TRUE)) | NucleoTwoControl))))",
            "CoCoSpecCode": "H((OT(10, 10, ((NucleoTwoControlTrigger and ZtoPre(not (NucleoTwoControlTrigger))) and not (NucleoTwoControl))) => OT(9, 0, (not (YtoPre(true)) or NucleoTwoControl))))",
            "ftExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X ((F[<=$duration$] $post_condition_SMV_ft$) | (F[<$duration$] LAST))))) & ($regular_condition_SMV_ft$ -> ((F[<=$duration$] $post_condition_SMV_ft$) | (F[<$duration$] LAST))))",
            "ftExpandedUnoptimized": "((LAST V (((! NucleoTwoControlTrigger) & ((! LAST) & (X NucleoTwoControlTrigger))) -> (X ((F[0,10] NucleoTwoControl) | (F[0,9] LAST))))) & (NucleoTwoControlTrigger -> ((F[0,10] NucleoTwoControl) | (F[0,9] LAST))))",
            "ftExpanded": "((LAST V (((! NucleoTwoControlTrigger) & ((! LAST) & (X NucleoTwoControlTrigger))) -> (X ((F[0,10] NucleoTwoControl) | (F[0,9] LAST))))) & (NucleoTwoControlTrigger -> ((F[0,10] NucleoTwoControl) | (F[0,9] LAST))))",
            "ftInfAUExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X (F[<=$duration$] $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> (F[<=$duration$] $post_condition_SMV_ft$)))",
            "ftInfAUExpanded": "((G (((! NucleoTwoControlTrigger) & (X NucleoTwoControlTrigger)) -> (X (F[0,10] NucleoTwoControl)))) & (NucleoTwoControlTrigger -> (F[0,10] NucleoTwoControl)))",
            "component": "System"
        },
        "status": "",
        "_id": "cca703f4-d8e6-11ef-941f-71fece653e2f"
    },
    {
        "reqid": "REQ013_3",
        "parent_reqid": "REQ013",
        "project": "Drone Requirements v0.4",
        "rationale": "",
        "comments": "",
        "fulltext": "when ReferencesCalculated Jetson shall within 10 milliseconds satisfy (AutonomousFlightMode => UseReferences) & (RemoteControlFlightMode => SendReferencesToNucleo) & SendReferencesToRaspberry",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "within",
            "response": "satisfaction",
            "variables": [
                "ReferencesCalculated",
                "AutonomousFlightMode",
                "UseReferences",
                "RemoteControlFlightMode",
                "SendReferencesToNucleo",
                "SendReferencesToRaspberry"
            ],
            "qualifier_word": "when",
            "pre_condition": "(ReferencesCalculated)",
            "regular_condition": "(ReferencesCalculated)",
            "conditionTextRange": [
                0,
                24
            ],
            "component_name": "Jetson",
            "componentTextRange": [
                26,
                31
            ],
            "duration": "10",
            "timingTextRange": [
                39,
                60
            ],
            "post_condition": "(( AutonomousFlightMode => UseReferences ) & ( RemoteControlFlightMode => SendReferencesToNucleo ) & SendReferencesToRaspberry)",
            "responseTextRange": [
                62,
                190
            ],
            "diagramVariables": "TC = <b><i>(ReferencesCalculated)</i></b>,  n = <b><i>10</i></b>, Response = <b><i>(( AutonomousFlightMode => UseReferences ) & ( RemoteControlFlightMode => SendReferencesToNucleo ) & SendReferencesToRaspberry)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(ReferencesCalculated)</i></b> is true and any point in the interval where <b><i>(ReferencesCalculated)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some point with distance <= <b><i>10</i></b> from the trigger (i.e., at trigger, trigger+1, ..., or trigger+<b><i>10</i></b>). If the interval ends sooner than trigger+<b><i>10</i></b>, then RES need not hold.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_within_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "regular_condition_unexp_pt": "ReferencesCalculated",
            "regular_condition_unexp_ft": "ReferencesCalculated",
            "regular_condition_SMV_pt": "ReferencesCalculated",
            "regular_condition_SMV_ft": "ReferencesCalculated",
            "post_condition_unexp_pt": "(((AutonomousFlightMode -> UseReferences) & (RemoteControlFlightMode -> SendReferencesToNucleo)) & SendReferencesToRaspberry)",
            "post_condition_unexp_ft": "(((AutonomousFlightMode -> UseReferences) & (RemoteControlFlightMode -> SendReferencesToNucleo)) & SendReferencesToRaspberry)",
            "post_condition_SMV_pt": "(((AutonomousFlightMode -> UseReferences) & (RemoteControlFlightMode -> SendReferencesToNucleo)) & SendReferencesToRaspberry)",
            "post_condition_SMV_ft": "(((AutonomousFlightMode -> UseReferences) & (RemoteControlFlightMode -> SendReferencesToNucleo)) & SendReferencesToRaspberry)",
            "ft_fetched": "((LAST V (((! $regular_condition_unexp_ft$) & ((! LAST) & (X $regular_condition_unexp_ft$))) -> (X ((F[<=$duration$] $post_condition_unexp_ft$) | (F[<$duration$] LAST))))) & ($regular_condition_unexp_ft$ -> ((F[<=$duration$] $post_condition_unexp_ft$) | (F[<$duration$] LAST))))",
            "ft": "((LAST V (((! ReferencesCalculated) & ((! LAST) & (X ReferencesCalculated))) -> (X ((F[<=10] (((AutonomousFlightMode -> UseReferences) & (RemoteControlFlightMode -> SendReferencesToNucleo)) & SendReferencesToRaspberry)) | (F[<10] LAST))))) & (ReferencesCalculated -> ((F[<=10] (((AutonomousFlightMode -> UseReferences) & (RemoteControlFlightMode -> SendReferencesToNucleo)) & SendReferencesToRaspberry)) | (F[<10] LAST))))",
            "pt_fetched": "(H ((O[=$duration$] (($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | FTP)) & (! $post_condition_unexp_pt$))) -> (O[<$duration$] (FTP | $post_condition_unexp_pt$))))",
            "pt": "(H ((O[=10] ((ReferencesCalculated & ((Y (! ReferencesCalculated)) | FTP)) & (! (((AutonomousFlightMode -> UseReferences) & (RemoteControlFlightMode -> SendReferencesToNucleo)) & SendReferencesToRaspberry)))) -> (O[<10] (FTP | (((AutonomousFlightMode -> UseReferences) & (RemoteControlFlightMode -> SendReferencesToNucleo)) & SendReferencesToRaspberry)))))",
            "ptExpanded_fetched": "(H ((O[=$duration$] (($regular_condition_SMV_pt$ & (Z (! $regular_condition_SMV_pt$))) & (! $post_condition_SMV_pt$))) -> (O[<$duration$] ((! (Y TRUE)) | $post_condition_SMV_pt$))))",
            "ptExpanded": "(H ((O[10,10] ((ReferencesCalculated & (Z (! ReferencesCalculated))) & (! (((AutonomousFlightMode -> UseReferences) & (RemoteControlFlightMode -> SendReferencesToNucleo)) & SendReferencesToRaspberry)))) -> (O[0,9] ((! (Y TRUE)) | (((AutonomousFlightMode -> UseReferences) & (RemoteControlFlightMode -> SendReferencesToNucleo)) & SendReferencesToRaspberry)))))",
            "CoCoSpecCode": "H((OT(10, 10, ((ReferencesCalculated and ZtoPre(not (ReferencesCalculated))) and not ((((AutonomousFlightMode => UseReferences) and (RemoteControlFlightMode => SendReferencesToNucleo)) and SendReferencesToRaspberry)))) => OT(9, 0, (not (YtoPre(true)) or (((AutonomousFlightMode => UseReferences) and (RemoteControlFlightMode => SendReferencesToNucleo)) and SendReferencesToRaspberry)))))",
            "ftExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X ((F[<=$duration$] $post_condition_SMV_ft$) | (F[<$duration$] LAST))))) & ($regular_condition_SMV_ft$ -> ((F[<=$duration$] $post_condition_SMV_ft$) | (F[<$duration$] LAST))))",
            "ftExpandedUnoptimized": "((LAST V (((! ReferencesCalculated) & ((! LAST) & (X ReferencesCalculated))) -> (X ((F[0,10] (((AutonomousFlightMode -> UseReferences) & (RemoteControlFlightMode -> SendReferencesToNucleo)) & SendReferencesToRaspberry)) | (F[0,9] LAST))))) & (ReferencesCalculated -> ((F[0,10] (((AutonomousFlightMode -> UseReferences) & (RemoteControlFlightMode -> SendReferencesToNucleo)) & SendReferencesToRaspberry)) | (F[0,9] LAST))))",
            "ftExpanded": "((LAST V (((! ReferencesCalculated) & ((! LAST) & (X ReferencesCalculated))) -> (X ((F[0,10] (((AutonomousFlightMode -> UseReferences) & (RemoteControlFlightMode -> SendReferencesToNucleo)) & SendReferencesToRaspberry)) | (F[0,9] LAST))))) & (ReferencesCalculated -> ((F[0,10] (((AutonomousFlightMode -> UseReferences) & (RemoteControlFlightMode -> SendReferencesToNucleo)) & SendReferencesToRaspberry)) | (F[0,9] LAST))))",
            "ftInfAUExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X (F[<=$duration$] $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> (F[<=$duration$] $post_condition_SMV_ft$)))",
            "ftInfAUExpanded": "((G (((! ReferencesCalculated) & (X ReferencesCalculated)) -> (X (F[0,10] (((AutonomousFlightMode -> UseReferences) & (RemoteControlFlightMode -> SendReferencesToNucleo)) & SendReferencesToRaspberry))))) & (ReferencesCalculated -> (F[0,10] (((AutonomousFlightMode -> UseReferences) & (RemoteControlFlightMode -> SendReferencesToNucleo)) & SendReferencesToRaspberry))))",
            "component": "Jetson"
        },
        "status": "",
        "_id": "cca703f5-d8e6-11ef-941f-71fece653e2f"
    },
    {
        "reqid": "REQ034",
        "parent_reqid": "",
        "project": "Drone Requirements v0.4",
        "rationale": "\"Monitor Pitot Tube, Alpha Vane and Beta Vane\"\n\nGroup: Data Monitoring\nFunctional\nFeasible\nNeeds Further Specification\n\"What are Alpha Vane and Beta Vane?\"",
        "comments": "",
        "fulltext": "upon ControlLoopStart ActiveNucleo shall before ControlLoopFinish satisfy (MonitorPitotTube & SendPitotTubeData) & (MonitorAlphaVane & SendAlphaVaneData) & (MonitorBetaVane & SendBetaVaneData)",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "before",
            "response": "satisfaction",
            "variables": [
                "ControlLoopStart",
                "ControlLoopFinish",
                "MonitorPitotTube",
                "SendPitotTubeData",
                "MonitorAlphaVane",
                "SendAlphaVaneData",
                "MonitorBetaVane",
                "SendBetaVaneData"
            ],
            "qualifier_word": "upon",
            "pre_condition": "(ControlLoopStart)",
            "regular_condition": "(ControlLoopStart)",
            "conditionTextRange": [
                0,
                20
            ],
            "component_name": "ActiveNucleo",
            "componentTextRange": [
                22,
                33
            ],
            "stop_condition": "(ControlLoopFinish)",
            "timingTextRange": [
                41,
                64
            ],
            "post_condition": "(( MonitorPitotTube & SendPitotTubeData ) & ( MonitorAlphaVane & SendAlphaVaneData ) & ( MonitorBetaVane & SendBetaVaneData ))",
            "responseTextRange": [
                66,
                191
            ],
            "diagramVariables": "TC = <b><i>(ControlLoopStart)</i></b>, SC = <b><i>(ControlLoopFinish)</i></b>, Response = <b><i>(( MonitorPitotTube & SendPitotTubeData ) & ( MonitorAlphaVane & SendAlphaVaneData ) & ( MonitorBetaVane & SendBetaVaneData ))</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(ControlLoopStart)</i></b> is true and any point in the interval where <b><i>(ControlLoopStart)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at least once strictly before the state where the stop condition holds. If the stop condition never occurs in the interval, RES does not need to hold. If the stop condition holds at the trigger, the requirement is not satisfied.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_before_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "regular_condition_unexp_pt": "ControlLoopStart",
            "regular_condition_unexp_ft": "ControlLoopStart",
            "regular_condition_SMV_pt": "ControlLoopStart",
            "regular_condition_SMV_ft": "ControlLoopStart",
            "post_condition_unexp_pt": "(((MonitorPitotTube & SendPitotTubeData) & (MonitorAlphaVane & SendAlphaVaneData)) & (MonitorBetaVane & SendBetaVaneData))",
            "post_condition_unexp_ft": "(((MonitorPitotTube & SendPitotTubeData) & (MonitorAlphaVane & SendAlphaVaneData)) & (MonitorBetaVane & SendBetaVaneData))",
            "post_condition_SMV_pt": "(((MonitorPitotTube & SendPitotTubeData) & (MonitorAlphaVane & SendAlphaVaneData)) & (MonitorBetaVane & SendBetaVaneData))",
            "post_condition_SMV_ft": "(((MonitorPitotTube & SendPitotTubeData) & (MonitorAlphaVane & SendAlphaVaneData)) & (MonitorBetaVane & SendBetaVaneData))",
            "stop_condition_unexp_pt": "ControlLoopFinish",
            "stop_condition_unexp_ft": "ControlLoopFinish",
            "stop_condition_SMV_pt": "ControlLoopFinish",
            "stop_condition_SMV_ft": "ControlLoopFinish",
            "ft_fetched": "((LAST V (((! $regular_condition_unexp_ft$) & ((! LAST) & (X $regular_condition_unexp_ft$))) -> (X (($post_condition_unexp_ft$ | LAST) V (! $stop_condition_unexp_ft$))))) & ($regular_condition_unexp_ft$ -> (($post_condition_unexp_ft$ | LAST) V (! $stop_condition_unexp_ft$))))",
            "ft": "((LAST V (((! ControlLoopStart) & ((! LAST) & (X ControlLoopStart))) -> (X (((((MonitorPitotTube & SendPitotTubeData) & (MonitorAlphaVane & SendAlphaVaneData)) & (MonitorBetaVane & SendBetaVaneData)) | LAST) V (! ControlLoopFinish))))) & (ControlLoopStart -> (((((MonitorPitotTube & SendPitotTubeData) & (MonitorAlphaVane & SendAlphaVaneData)) & (MonitorBetaVane & SendBetaVaneData)) | LAST) V (! ControlLoopFinish))))",
            "pt_fetched": "(H ($stop_condition_unexp_pt$ -> ((H (! $regular_condition_unexp_pt$)) | (((! FTP) & (! ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | FTP)))) & (Y (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | FTP))))))))))",
            "pt": "(H (ControlLoopFinish -> ((H (! ControlLoopStart)) | (((! FTP) & (! (ControlLoopStart & ((Y (! ControlLoopStart)) | FTP)))) & (Y (! ((! (((MonitorPitotTube & SendPitotTubeData) & (MonitorAlphaVane & SendAlphaVaneData)) & (MonitorBetaVane & SendBetaVaneData))) S ((! (((MonitorPitotTube & SendPitotTubeData) & (MonitorAlphaVane & SendAlphaVaneData)) & (MonitorBetaVane & SendBetaVaneData))) & (ControlLoopStart & ((Y (! ControlLoopStart)) | FTP))))))))))",
            "ptExpanded_fetched": "(H ($stop_condition_SMV_pt$ -> ((H (! $regular_condition_SMV_pt$)) | (((Y TRUE) & (! ($regular_condition_SMV_pt$ & (Z (! $regular_condition_SMV_pt$))))) & (Y (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & (Z (! $regular_condition_SMV_pt$)))))))))))",
            "ptExpanded": "(H (ControlLoopFinish -> ((H (! ControlLoopStart)) | (((Y TRUE) & (! (ControlLoopStart & (Z (! ControlLoopStart))))) & (Y (! ((! (((MonitorPitotTube & SendPitotTubeData) & (MonitorAlphaVane & SendAlphaVaneData)) & (MonitorBetaVane & SendBetaVaneData))) S ((! (((MonitorPitotTube & SendPitotTubeData) & (MonitorAlphaVane & SendAlphaVaneData)) & (MonitorBetaVane & SendBetaVaneData))) & (ControlLoopStart & (Z (! ControlLoopStart)))))))))))",
            "CoCoSpecCode": "H((ControlLoopFinish => (H(not (ControlLoopStart)) or ((YtoPre(true) and not ((ControlLoopStart and ZtoPre(not (ControlLoopStart))))) and YtoPre(not (SI((ControlLoopStart and ZtoPre(not (ControlLoopStart))),not ((((MonitorPitotTube and SendPitotTubeData) and (MonitorAlphaVane and SendAlphaVaneData)) and (MonitorBetaVane and SendBetaVaneData))))))))))",
            "ftExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X (($post_condition_SMV_ft$ | LAST) V (! $stop_condition_SMV_ft$))))) & ($regular_condition_SMV_ft$ -> (($post_condition_SMV_ft$ | LAST) V (! $stop_condition_SMV_ft$))))",
            "ftExpandedUnoptimized": "((LAST V (((! ControlLoopStart) & ((! LAST) & (X ControlLoopStart))) -> (X (((((MonitorPitotTube & SendPitotTubeData) & (MonitorAlphaVane & SendAlphaVaneData)) & (MonitorBetaVane & SendBetaVaneData)) | LAST) V (! ControlLoopFinish))))) & (ControlLoopStart -> (((((MonitorPitotTube & SendPitotTubeData) & (MonitorAlphaVane & SendAlphaVaneData)) & (MonitorBetaVane & SendBetaVaneData)) | LAST) V (! ControlLoopFinish))))",
            "ftExpanded": "((LAST V (((! ControlLoopStart) & ((! LAST) & (X ControlLoopStart))) -> (X (((((MonitorPitotTube & SendPitotTubeData) & (MonitorAlphaVane & SendAlphaVaneData)) & (MonitorBetaVane & SendBetaVaneData)) | LAST) V (! ControlLoopFinish))))) & (ControlLoopStart -> (((((MonitorPitotTube & SendPitotTubeData) & (MonitorAlphaVane & SendAlphaVaneData)) & (MonitorBetaVane & SendBetaVaneData)) | LAST) V (! ControlLoopFinish))))",
            "ftInfAUExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X ($post_condition_SMV_ft$ V (! $stop_condition_SMV_ft$))))) & ($regular_condition_SMV_ft$ -> ($post_condition_SMV_ft$ V (! $stop_condition_SMV_ft$))))",
            "ftInfAUExpanded": "((G (((! ControlLoopStart) & (X ControlLoopStart)) -> (X ((((MonitorPitotTube & SendPitotTubeData) & (MonitorAlphaVane & SendAlphaVaneData)) & (MonitorBetaVane & SendBetaVaneData)) V (! ControlLoopFinish))))) & (ControlLoopStart -> ((((MonitorPitotTube & SendPitotTubeData) & (MonitorAlphaVane & SendAlphaVaneData)) & (MonitorBetaVane & SendBetaVaneData)) V (! ControlLoopFinish))))",
            "component": "ActiveNucleo"
        },
        "status": "",
        "_id": "cca703f6-d8e6-11ef-941f-71fece653e2f"
    },
    {
        "reqid": "REQ001_1",
        "parent_reqid": "REQ001",
        "project": "Drone Requirements v0.4",
        "rationale": "",
        "comments": "",
        "fulltext": "when JetsonControl & JetsonFailureTransitionToNucleo System shall within 10 milliseconds satisfy !JetsonControl & NucleoControl",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "within",
            "response": "satisfaction",
            "variables": [
                "JetsonControl",
                "JetsonFailureTransitionToNucleo",
                "NucleoControl"
            ],
            "qualifier_word": "when",
            "pre_condition": "(JetsonControl & JetsonFailureTransitionToNucleo)",
            "regular_condition": "(JetsonControl & JetsonFailureTransitionToNucleo)",
            "conditionTextRange": [
                0,
                51
            ],
            "component_name": "System",
            "componentTextRange": [
                53,
                58
            ],
            "duration": "10",
            "timingTextRange": [
                66,
                87
            ],
            "post_condition": "(! JetsonControl & NucleoControl)",
            "responseTextRange": [
                89,
                126
            ],
            "diagramVariables": "TC = <b><i>(JetsonControl & JetsonFailureTransitionToNucleo)</i></b>,  n = <b><i>10</i></b>, Response = <b><i>(! JetsonControl & NucleoControl)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(JetsonControl & JetsonFailureTransitionToNucleo)</i></b> is true and any point in the interval where <b><i>(JetsonControl & JetsonFailureTransitionToNucleo)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some point with distance <= <b><i>10</i></b> from the trigger (i.e., at trigger, trigger+1, ..., or trigger+<b><i>10</i></b>). If the interval ends sooner than trigger+<b><i>10</i></b>, then RES need not hold.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_within_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "regular_condition_unexp_pt": "(JetsonControl & JetsonFailureTransitionToNucleo)",
            "regular_condition_unexp_ft": "(JetsonControl & JetsonFailureTransitionToNucleo)",
            "regular_condition_SMV_pt": "(JetsonControl & JetsonFailureTransitionToNucleo)",
            "regular_condition_SMV_ft": "(JetsonControl & JetsonFailureTransitionToNucleo)",
            "post_condition_unexp_pt": "((! JetsonControl) & NucleoControl)",
            "post_condition_unexp_ft": "((! JetsonControl) & NucleoControl)",
            "post_condition_SMV_pt": "((! JetsonControl) & NucleoControl)",
            "post_condition_SMV_ft": "((! JetsonControl) & NucleoControl)",
            "ft_fetched": "((LAST V (((! $regular_condition_unexp_ft$) & ((! LAST) & (X $regular_condition_unexp_ft$))) -> (X ((F[<=$duration$] $post_condition_unexp_ft$) | (F[<$duration$] LAST))))) & ($regular_condition_unexp_ft$ -> ((F[<=$duration$] $post_condition_unexp_ft$) | (F[<$duration$] LAST))))",
            "ft": "((LAST V (((! (JetsonControl & JetsonFailureTransitionToNucleo)) & ((! LAST) & (X (JetsonControl & JetsonFailureTransitionToNucleo)))) -> (X ((F[<=10] ((! JetsonControl) & NucleoControl)) | (F[<10] LAST))))) & ((JetsonControl & JetsonFailureTransitionToNucleo) -> ((F[<=10] ((! JetsonControl) & NucleoControl)) | (F[<10] LAST))))",
            "pt_fetched": "(H ((O[=$duration$] (($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | FTP)) & (! $post_condition_unexp_pt$))) -> (O[<$duration$] (FTP | $post_condition_unexp_pt$))))",
            "pt": "(H ((O[=10] (((JetsonControl & JetsonFailureTransitionToNucleo) & ((Y (! (JetsonControl & JetsonFailureTransitionToNucleo))) | FTP)) & (! ((! JetsonControl) & NucleoControl)))) -> (O[<10] (FTP | ((! JetsonControl) & NucleoControl)))))",
            "ptExpanded_fetched": "(H ((O[=$duration$] (($regular_condition_SMV_pt$ & (Z (! $regular_condition_SMV_pt$))) & (! $post_condition_SMV_pt$))) -> (O[<$duration$] ((! (Y TRUE)) | $post_condition_SMV_pt$))))",
            "ptExpanded": "(H ((O[10,10] (((JetsonControl & JetsonFailureTransitionToNucleo) & (Z (! (JetsonControl & JetsonFailureTransitionToNucleo)))) & (! ((! JetsonControl) & NucleoControl)))) -> (O[0,9] ((! (Y TRUE)) | ((! JetsonControl) & NucleoControl)))))",
            "CoCoSpecCode": "H((OT(10, 10, (((JetsonControl and JetsonFailureTransitionToNucleo) and ZtoPre(not ((JetsonControl and JetsonFailureTransitionToNucleo)))) and not ((not (JetsonControl) and NucleoControl)))) => OT(9, 0, (not (YtoPre(true)) or (not (JetsonControl) and NucleoControl)))))",
            "ftExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X ((F[<=$duration$] $post_condition_SMV_ft$) | (F[<$duration$] LAST))))) & ($regular_condition_SMV_ft$ -> ((F[<=$duration$] $post_condition_SMV_ft$) | (F[<$duration$] LAST))))",
            "ftExpandedUnoptimized": "((LAST V (((! (JetsonControl & JetsonFailureTransitionToNucleo)) & ((! LAST) & (X (JetsonControl & JetsonFailureTransitionToNucleo)))) -> (X ((F[0,10] ((! JetsonControl) & NucleoControl)) | (F[0,9] LAST))))) & ((JetsonControl & JetsonFailureTransitionToNucleo) -> ((F[0,10] ((! JetsonControl) & NucleoControl)) | (F[0,9] LAST))))",
            "ftExpanded": "((LAST V (((! (JetsonControl & JetsonFailureTransitionToNucleo)) & ((! LAST) & (X (JetsonControl & JetsonFailureTransitionToNucleo)))) -> (X ((F[0,10] ((! JetsonControl) & NucleoControl)) | (F[0,9] LAST))))) & ((JetsonControl & JetsonFailureTransitionToNucleo) -> ((F[0,10] ((! JetsonControl) & NucleoControl)) | (F[0,9] LAST))))",
            "ftInfAUExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X (F[<=$duration$] $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> (F[<=$duration$] $post_condition_SMV_ft$)))",
            "ftInfAUExpanded": "((G (((! (JetsonControl & JetsonFailureTransitionToNucleo)) & (X (JetsonControl & JetsonFailureTransitionToNucleo))) -> (X (F[0,10] ((! JetsonControl) & NucleoControl))))) & ((JetsonControl & JetsonFailureTransitionToNucleo) -> (F[0,10] ((! JetsonControl) & NucleoControl))))",
            "component": "System"
        },
        "status": "",
        "_id": "cca703f7-d8e6-11ef-941f-71fece653e2f"
    },
    {
        "reqid": "REQ028",
        "parent_reqid": "",
        "project": "Drone Requirements v0.4",
        "rationale": "\"Communicate with Simulator and Ground Station\"\n\nGroup: Simulation\nNon-functional\nPartially Unfeasible\nNeeds Further Specification\n\"Communication with the ProVANT Simulator deferred.\"",
        "comments": "Non-functional requirement: Out of scope",
        "fulltext": "",
        "semantics": {},
        "status": "",
        "_id": "cca703f8-d8e6-11ef-941f-71fece653e2f"
    },
    {
        "reqid": "REQ056",
        "parent_reqid": "",
        "project": "Drone Requirements v0.4",
        "rationale": "\"Monitor QoS of the communication between ground station and UAV\"\n\nGroup: Data Monitoring\nFunctional\nFeasible\nNeeds Further Specification",
        "comments": "",
        "fulltext": "while MonitoringEnabled Raspberry shall always satisfy MonitorCommunicationQuality",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": [
                "MonitoringEnabled",
                "MonitorCommunicationQuality"
            ],
            "scope_mode": "(MonitoringEnabled)",
            "scopeTextRange": [
                0,
                22
            ],
            "component_name": "Raspberry",
            "componentTextRange": [
                24,
                32
            ],
            "timingTextRange": [
                40,
                45
            ],
            "post_condition": "(MonitorCommunicationQuality)",
            "responseTextRange": [
                47,
                81
            ],
            "diagramVariables": "M = <b><i>(MonitoringEnabled)</i></b>, Response = <b><i>(MonitorCommunicationQuality)</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>(MonitoringEnabled)</i></b> holds.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_null_always_satisfaction.svg",
            "scope_mode_pt": "MonitoringEnabled",
            "scope_mode_ft": "MonitoringEnabled",
            "post_condition_unexp_pt": "MonitorCommunicationQuality",
            "post_condition_unexp_ft": "MonitorCommunicationQuality",
            "post_condition_SMV_pt": "MonitorCommunicationQuality",
            "post_condition_SMV_ft": "MonitorCommunicationQuality",
            "ft_fetched": "(LAST V ($scope_mode_ft$ -> $post_condition_unexp_ft$))",
            "ft": "(LAST V (MonitoringEnabled -> MonitorCommunicationQuality))",
            "pt_fetched": "(H ($scope_mode_pt$ -> $post_condition_unexp_pt$))",
            "pt": "(H (MonitoringEnabled -> MonitorCommunicationQuality))",
            "ptExpanded_fetched": "(H ($scope_mode_pt$ -> $post_condition_SMV_pt$))",
            "ptExpanded": "(H (MonitoringEnabled -> MonitorCommunicationQuality))",
            "CoCoSpecCode": "H((MonitoringEnabled => MonitorCommunicationQuality))",
            "ftExpanded_fetched": "(LAST V ($scope_mode_ft$ -> $post_condition_SMV_ft$))",
            "ftExpandedUnoptimized": "(LAST V (MonitoringEnabled -> MonitorCommunicationQuality))",
            "ftExpanded": "(LAST V (MonitoringEnabled -> MonitorCommunicationQuality))",
            "ftInfAUExpanded_fetched": "(G ($scope_mode_ft$ -> $post_condition_SMV_ft$))",
            "ftInfAUExpanded": "(G (MonitoringEnabled -> MonitorCommunicationQuality))",
            "component": "Raspberry"
        },
        "status": "",
        "_id": "cca703f9-d8e6-11ef-941f-71fece653e2f"
    },
    {
        "reqid": "REQ018",
        "parent_reqid": "",
        "project": "Drone Requirements v0.4",
        "rationale": "\"Present the total time spent\"\n\nGroup: Performance\nFunctional\nFeasibility: Unknown\nNeeds Further Specification\n\"Total time spent on what?\"\n\n26/09/2024 -- Changed the this requirement to a more specifiable version:\n\"The control loop will complete within 12 milliseconds\"",
        "comments": "Original version: \"System shall always satisfy DisplayTotalTimeSpent\"\n\n26/09/2024 -- Changed the this requirement to a more specifiable version",
        "fulltext": "upon ControlLoopStart System shall within 12 milliseconds satisfy ControlLoopFinish",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "within",
            "response": "satisfaction",
            "variables": [
                "ControlLoopStart",
                "ControlLoopFinish"
            ],
            "qualifier_word": "upon",
            "pre_condition": "(ControlLoopStart)",
            "regular_condition": "(ControlLoopStart)",
            "conditionTextRange": [
                0,
                20
            ],
            "component_name": "System",
            "componentTextRange": [
                22,
                27
            ],
            "duration": "12",
            "timingTextRange": [
                35,
                56
            ],
            "post_condition": "(ControlLoopFinish)",
            "responseTextRange": [
                58,
                82
            ],
            "diagramVariables": "TC = <b><i>(ControlLoopStart)</i></b>,  n = <b><i>12</i></b>, Response = <b><i>(ControlLoopFinish)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(ControlLoopStart)</i></b> is true and any point in the interval where <b><i>(ControlLoopStart)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some point with distance <= <b><i>12</i></b> from the trigger (i.e., at trigger, trigger+1, ..., or trigger+<b><i>12</i></b>). If the interval ends sooner than trigger+<b><i>12</i></b>, then RES need not hold.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_within_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "regular_condition_unexp_pt": "ControlLoopStart",
            "regular_condition_unexp_ft": "ControlLoopStart",
            "regular_condition_SMV_pt": "ControlLoopStart",
            "regular_condition_SMV_ft": "ControlLoopStart",
            "post_condition_unexp_pt": "ControlLoopFinish",
            "post_condition_unexp_ft": "ControlLoopFinish",
            "post_condition_SMV_pt": "ControlLoopFinish",
            "post_condition_SMV_ft": "ControlLoopFinish",
            "ft_fetched": "((LAST V (((! $regular_condition_unexp_ft$) & ((! LAST) & (X $regular_condition_unexp_ft$))) -> (X ((F[<=$duration$] $post_condition_unexp_ft$) | (F[<$duration$] LAST))))) & ($regular_condition_unexp_ft$ -> ((F[<=$duration$] $post_condition_unexp_ft$) | (F[<$duration$] LAST))))",
            "ft": "((LAST V (((! ControlLoopStart) & ((! LAST) & (X ControlLoopStart))) -> (X ((F[<=12] ControlLoopFinish) | (F[<12] LAST))))) & (ControlLoopStart -> ((F[<=12] ControlLoopFinish) | (F[<12] LAST))))",
            "pt_fetched": "(H ((O[=$duration$] (($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | FTP)) & (! $post_condition_unexp_pt$))) -> (O[<$duration$] (FTP | $post_condition_unexp_pt$))))",
            "pt": "(H ((O[=12] ((ControlLoopStart & ((Y (! ControlLoopStart)) | FTP)) & (! ControlLoopFinish))) -> (O[<12] (FTP | ControlLoopFinish))))",
            "ptExpanded_fetched": "(H ((O[=$duration$] (($regular_condition_SMV_pt$ & (Z (! $regular_condition_SMV_pt$))) & (! $post_condition_SMV_pt$))) -> (O[<$duration$] ((! (Y TRUE)) | $post_condition_SMV_pt$))))",
            "ptExpanded": "(H ((O[12,12] ((ControlLoopStart & (Z (! ControlLoopStart))) & (! ControlLoopFinish))) -> (O[0,11] ((! (Y TRUE)) | ControlLoopFinish))))",
            "CoCoSpecCode": "H((OT(12, 12, ((ControlLoopStart and ZtoPre(not (ControlLoopStart))) and not (ControlLoopFinish))) => OT(11, 0, (not (YtoPre(true)) or ControlLoopFinish))))",
            "ftExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X ((F[<=$duration$] $post_condition_SMV_ft$) | (F[<$duration$] LAST))))) & ($regular_condition_SMV_ft$ -> ((F[<=$duration$] $post_condition_SMV_ft$) | (F[<$duration$] LAST))))",
            "ftExpandedUnoptimized": "((LAST V (((! ControlLoopStart) & ((! LAST) & (X ControlLoopStart))) -> (X ((F[0,12] ControlLoopFinish) | (F[0,11] LAST))))) & (ControlLoopStart -> ((F[0,12] ControlLoopFinish) | (F[0,11] LAST))))",
            "ftExpanded": "((LAST V (((! ControlLoopStart) & ((! LAST) & (X ControlLoopStart))) -> (X ((F[0,12] ControlLoopFinish) | (F[0,11] LAST))))) & (ControlLoopStart -> ((F[0,12] ControlLoopFinish) | (F[0,11] LAST))))",
            "ftInfAUExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X (F[<=$duration$] $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> (F[<=$duration$] $post_condition_SMV_ft$)))",
            "ftInfAUExpanded": "((G (((! ControlLoopStart) & (X ControlLoopStart)) -> (X (F[0,12] ControlLoopFinish)))) & (ControlLoopStart -> (F[0,12] ControlLoopFinish)))",
            "component": "System"
        },
        "status": "",
        "_id": "cca703fa-d8e6-11ef-941f-71fece653e2f"
    },
    {
        "reqid": "REQ052",
        "parent_reqid": "",
        "project": "Drone Requirements v0.4",
        "rationale": "\"Monitor velocity of propellers (RPM)\"\n\nGroup: Data Monitoring\nFunctional\nFeasible\nSatisfactory\n\"Duplicate of REQ045\"",
        "comments": "",
        "fulltext": "upon ControlLoopStart ActiveNucleo shall before ControlLoopFinish satisfy MonitorPropellerRPM & SendPropellerRPMData",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "before",
            "response": "satisfaction",
            "variables": [
                "ControlLoopStart",
                "ControlLoopFinish",
                "MonitorPropellerRPM",
                "SendPropellerRPMData"
            ],
            "qualifier_word": "upon",
            "pre_condition": "(ControlLoopStart)",
            "regular_condition": "(ControlLoopStart)",
            "conditionTextRange": [
                0,
                20
            ],
            "component_name": "ActiveNucleo",
            "componentTextRange": [
                22,
                33
            ],
            "stop_condition": "(ControlLoopFinish)",
            "timingTextRange": [
                41,
                64
            ],
            "post_condition": "(MonitorPropellerRPM & SendPropellerRPMData)",
            "responseTextRange": [
                66,
                115
            ],
            "diagramVariables": "TC = <b><i>(ControlLoopStart)</i></b>, SC = <b><i>(ControlLoopFinish)</i></b>, Response = <b><i>(MonitorPropellerRPM & SendPropellerRPMData)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(ControlLoopStart)</i></b> is true and any point in the interval where <b><i>(ControlLoopStart)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at least once strictly before the state where the stop condition holds. If the stop condition never occurs in the interval, RES does not need to hold. If the stop condition holds at the trigger, the requirement is not satisfied.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_before_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "regular_condition_unexp_pt": "ControlLoopStart",
            "regular_condition_unexp_ft": "ControlLoopStart",
            "regular_condition_SMV_pt": "ControlLoopStart",
            "regular_condition_SMV_ft": "ControlLoopStart",
            "post_condition_unexp_pt": "(MonitorPropellerRPM & SendPropellerRPMData)",
            "post_condition_unexp_ft": "(MonitorPropellerRPM & SendPropellerRPMData)",
            "post_condition_SMV_pt": "(MonitorPropellerRPM & SendPropellerRPMData)",
            "post_condition_SMV_ft": "(MonitorPropellerRPM & SendPropellerRPMData)",
            "stop_condition_unexp_pt": "ControlLoopFinish",
            "stop_condition_unexp_ft": "ControlLoopFinish",
            "stop_condition_SMV_pt": "ControlLoopFinish",
            "stop_condition_SMV_ft": "ControlLoopFinish",
            "ft_fetched": "((LAST V (((! $regular_condition_unexp_ft$) & ((! LAST) & (X $regular_condition_unexp_ft$))) -> (X (($post_condition_unexp_ft$ | LAST) V (! $stop_condition_unexp_ft$))))) & ($regular_condition_unexp_ft$ -> (($post_condition_unexp_ft$ | LAST) V (! $stop_condition_unexp_ft$))))",
            "ft": "((LAST V (((! ControlLoopStart) & ((! LAST) & (X ControlLoopStart))) -> (X (((MonitorPropellerRPM & SendPropellerRPMData) | LAST) V (! ControlLoopFinish))))) & (ControlLoopStart -> (((MonitorPropellerRPM & SendPropellerRPMData) | LAST) V (! ControlLoopFinish))))",
            "pt_fetched": "(H ($stop_condition_unexp_pt$ -> ((H (! $regular_condition_unexp_pt$)) | (((! FTP) & (! ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | FTP)))) & (Y (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | FTP))))))))))",
            "pt": "(H (ControlLoopFinish -> ((H (! ControlLoopStart)) | (((! FTP) & (! (ControlLoopStart & ((Y (! ControlLoopStart)) | FTP)))) & (Y (! ((! (MonitorPropellerRPM & SendPropellerRPMData)) S ((! (MonitorPropellerRPM & SendPropellerRPMData)) & (ControlLoopStart & ((Y (! ControlLoopStart)) | FTP))))))))))",
            "ptExpanded_fetched": "(H ($stop_condition_SMV_pt$ -> ((H (! $regular_condition_SMV_pt$)) | (((Y TRUE) & (! ($regular_condition_SMV_pt$ & (Z (! $regular_condition_SMV_pt$))))) & (Y (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & (Z (! $regular_condition_SMV_pt$)))))))))))",
            "ptExpanded": "(H (ControlLoopFinish -> ((H (! ControlLoopStart)) | (((Y TRUE) & (! (ControlLoopStart & (Z (! ControlLoopStart))))) & (Y (! ((! (MonitorPropellerRPM & SendPropellerRPMData)) S ((! (MonitorPropellerRPM & SendPropellerRPMData)) & (ControlLoopStart & (Z (! ControlLoopStart)))))))))))",
            "CoCoSpecCode": "H((ControlLoopFinish => (H(not (ControlLoopStart)) or ((YtoPre(true) and not ((ControlLoopStart and ZtoPre(not (ControlLoopStart))))) and YtoPre(not (SI((ControlLoopStart and ZtoPre(not (ControlLoopStart))),not ((MonitorPropellerRPM and SendPropellerRPMData)))))))))",
            "ftExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X (($post_condition_SMV_ft$ | LAST) V (! $stop_condition_SMV_ft$))))) & ($regular_condition_SMV_ft$ -> (($post_condition_SMV_ft$ | LAST) V (! $stop_condition_SMV_ft$))))",
            "ftExpandedUnoptimized": "((LAST V (((! ControlLoopStart) & ((! LAST) & (X ControlLoopStart))) -> (X (((MonitorPropellerRPM & SendPropellerRPMData) | LAST) V (! ControlLoopFinish))))) & (ControlLoopStart -> (((MonitorPropellerRPM & SendPropellerRPMData) | LAST) V (! ControlLoopFinish))))",
            "ftExpanded": "((LAST V (((! ControlLoopStart) & ((! LAST) & (X ControlLoopStart))) -> (X (((MonitorPropellerRPM & SendPropellerRPMData) | LAST) V (! ControlLoopFinish))))) & (ControlLoopStart -> (((MonitorPropellerRPM & SendPropellerRPMData) | LAST) V (! ControlLoopFinish))))",
            "ftInfAUExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X ($post_condition_SMV_ft$ V (! $stop_condition_SMV_ft$))))) & ($regular_condition_SMV_ft$ -> ($post_condition_SMV_ft$ V (! $stop_condition_SMV_ft$))))",
            "ftInfAUExpanded": "((G (((! ControlLoopStart) & (X ControlLoopStart)) -> (X ((MonitorPropellerRPM & SendPropellerRPMData) V (! ControlLoopFinish))))) & (ControlLoopStart -> ((MonitorPropellerRPM & SendPropellerRPMData) V (! ControlLoopFinish))))",
            "component": "ActiveNucleo"
        },
        "status": "",
        "_id": "cca703fb-d8e6-11ef-941f-71fece653e2f"
    },
    {
        "reqid": "REQ043",
        "parent_reqid": "",
        "project": "Drone Requirements v0.4",
        "rationale": "\"Monitor gyroscope data (IMU)\"\n\nGroup: Data Monitoring\nFunctional\nPotentially Unfeasible\nNeeds Further Specification\n\"Duplicate of REQ040\"",
        "comments": "",
        "fulltext": "upon ControlLoopStart ActiveNucleo shall before ControlLoopFinish satisfy (MonitorGyroscopeData & SendGyroscopeData)",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "before",
            "response": "satisfaction",
            "variables": [
                "ControlLoopStart",
                "ControlLoopFinish",
                "MonitorGyroscopeData",
                "SendGyroscopeData"
            ],
            "qualifier_word": "upon",
            "pre_condition": "(ControlLoopStart)",
            "regular_condition": "(ControlLoopStart)",
            "conditionTextRange": [
                0,
                20
            ],
            "component_name": "ActiveNucleo",
            "componentTextRange": [
                22,
                33
            ],
            "stop_condition": "(ControlLoopFinish)",
            "timingTextRange": [
                41,
                64
            ],
            "post_condition": "(( MonitorGyroscopeData & SendGyroscopeData ))",
            "responseTextRange": [
                66,
                115
            ],
            "diagramVariables": "TC = <b><i>(ControlLoopStart)</i></b>, SC = <b><i>(ControlLoopFinish)</i></b>, Response = <b><i>(( MonitorGyroscopeData & SendGyroscopeData ))</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(ControlLoopStart)</i></b> is true and any point in the interval where <b><i>(ControlLoopStart)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at least once strictly before the state where the stop condition holds. If the stop condition never occurs in the interval, RES does not need to hold. If the stop condition holds at the trigger, the requirement is not satisfied.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_before_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "regular_condition_unexp_pt": "ControlLoopStart",
            "regular_condition_unexp_ft": "ControlLoopStart",
            "regular_condition_SMV_pt": "ControlLoopStart",
            "regular_condition_SMV_ft": "ControlLoopStart",
            "post_condition_unexp_pt": "(MonitorGyroscopeData & SendGyroscopeData)",
            "post_condition_unexp_ft": "(MonitorGyroscopeData & SendGyroscopeData)",
            "post_condition_SMV_pt": "(MonitorGyroscopeData & SendGyroscopeData)",
            "post_condition_SMV_ft": "(MonitorGyroscopeData & SendGyroscopeData)",
            "stop_condition_unexp_pt": "ControlLoopFinish",
            "stop_condition_unexp_ft": "ControlLoopFinish",
            "stop_condition_SMV_pt": "ControlLoopFinish",
            "stop_condition_SMV_ft": "ControlLoopFinish",
            "ft_fetched": "((LAST V (((! $regular_condition_unexp_ft$) & ((! LAST) & (X $regular_condition_unexp_ft$))) -> (X (($post_condition_unexp_ft$ | LAST) V (! $stop_condition_unexp_ft$))))) & ($regular_condition_unexp_ft$ -> (($post_condition_unexp_ft$ | LAST) V (! $stop_condition_unexp_ft$))))",
            "ft": "((LAST V (((! ControlLoopStart) & ((! LAST) & (X ControlLoopStart))) -> (X (((MonitorGyroscopeData & SendGyroscopeData) | LAST) V (! ControlLoopFinish))))) & (ControlLoopStart -> (((MonitorGyroscopeData & SendGyroscopeData) | LAST) V (! ControlLoopFinish))))",
            "pt_fetched": "(H ($stop_condition_unexp_pt$ -> ((H (! $regular_condition_unexp_pt$)) | (((! FTP) & (! ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | FTP)))) & (Y (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | FTP))))))))))",
            "pt": "(H (ControlLoopFinish -> ((H (! ControlLoopStart)) | (((! FTP) & (! (ControlLoopStart & ((Y (! ControlLoopStart)) | FTP)))) & (Y (! ((! (MonitorGyroscopeData & SendGyroscopeData)) S ((! (MonitorGyroscopeData & SendGyroscopeData)) & (ControlLoopStart & ((Y (! ControlLoopStart)) | FTP))))))))))",
            "ptExpanded_fetched": "(H ($stop_condition_SMV_pt$ -> ((H (! $regular_condition_SMV_pt$)) | (((Y TRUE) & (! ($regular_condition_SMV_pt$ & (Z (! $regular_condition_SMV_pt$))))) & (Y (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & (Z (! $regular_condition_SMV_pt$)))))))))))",
            "ptExpanded": "(H (ControlLoopFinish -> ((H (! ControlLoopStart)) | (((Y TRUE) & (! (ControlLoopStart & (Z (! ControlLoopStart))))) & (Y (! ((! (MonitorGyroscopeData & SendGyroscopeData)) S ((! (MonitorGyroscopeData & SendGyroscopeData)) & (ControlLoopStart & (Z (! ControlLoopStart)))))))))))",
            "CoCoSpecCode": "H((ControlLoopFinish => (H(not (ControlLoopStart)) or ((YtoPre(true) and not ((ControlLoopStart and ZtoPre(not (ControlLoopStart))))) and YtoPre(not (SI((ControlLoopStart and ZtoPre(not (ControlLoopStart))),not ((MonitorGyroscopeData and SendGyroscopeData)))))))))",
            "ftExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X (($post_condition_SMV_ft$ | LAST) V (! $stop_condition_SMV_ft$))))) & ($regular_condition_SMV_ft$ -> (($post_condition_SMV_ft$ | LAST) V (! $stop_condition_SMV_ft$))))",
            "ftExpandedUnoptimized": "((LAST V (((! ControlLoopStart) & ((! LAST) & (X ControlLoopStart))) -> (X (((MonitorGyroscopeData & SendGyroscopeData) | LAST) V (! ControlLoopFinish))))) & (ControlLoopStart -> (((MonitorGyroscopeData & SendGyroscopeData) | LAST) V (! ControlLoopFinish))))",
            "ftExpanded": "((LAST V (((! ControlLoopStart) & ((! LAST) & (X ControlLoopStart))) -> (X (((MonitorGyroscopeData & SendGyroscopeData) | LAST) V (! ControlLoopFinish))))) & (ControlLoopStart -> (((MonitorGyroscopeData & SendGyroscopeData) | LAST) V (! ControlLoopFinish))))",
            "ftInfAUExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X ($post_condition_SMV_ft$ V (! $stop_condition_SMV_ft$))))) & ($regular_condition_SMV_ft$ -> ($post_condition_SMV_ft$ V (! $stop_condition_SMV_ft$))))",
            "ftInfAUExpanded": "((G (((! ControlLoopStart) & (X ControlLoopStart)) -> (X ((MonitorGyroscopeData & SendGyroscopeData) V (! ControlLoopFinish))))) & (ControlLoopStart -> ((MonitorGyroscopeData & SendGyroscopeData) V (! ControlLoopFinish))))",
            "component": "ActiveNucleo"
        },
        "status": "",
        "_id": "cca703fc-d8e6-11ef-941f-71fece653e2f"
    },
    {
        "reqid": "REQ063",
        "parent_reqid": "",
        "project": "Drone Requirements v0.4",
        "rationale": "\"Indicate which board is running the controller\"\n\nGroup: Data Monitoring\nFunctional\nFeasible\nSatisfactory\nDetailing Level: \"Duplicate of REQ004\"",
        "comments": "",
        "fulltext": "System shall always satisfy (AutonomousFlightMode => JetsonControl & JetsonControlDisplay) & (RemoteControlFlightMode => NulceoControl & NucleoControlDisplay) & (FailsafeFlightMode => NucleoControl & NucleoControlDisplay)",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": [
                "AutonomousFlightMode",
                "JetsonControl",
                "JetsonControlDisplay",
                "RemoteControlFlightMode",
                "NulceoControl",
                "NucleoControlDisplay",
                "FailsafeFlightMode",
                "NucleoControl"
            ],
            "component_name": "System",
            "componentTextRange": [
                0,
                5
            ],
            "timingTextRange": [
                13,
                18
            ],
            "post_condition": "(( AutonomousFlightMode => JetsonControl & JetsonControlDisplay ) & ( RemoteControlFlightMode => NulceoControl & NucleoControlDisplay ) & ( FailsafeFlightMode => NucleoControl & NucleoControlDisplay ))",
            "responseTextRange": [
                20,
                220
            ],
            "diagramVariables": "Response = <b><i>(( AutonomousFlightMode => JetsonControl & JetsonControlDisplay ) & ( RemoteControlFlightMode => NulceoControl & NucleoControlDisplay ) & ( FailsafeFlightMode => NucleoControl & NucleoControlDisplay ))</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "post_condition_unexp_pt": "(((AutonomousFlightMode -> (JetsonControl & JetsonControlDisplay)) & (RemoteControlFlightMode -> (NulceoControl & NucleoControlDisplay))) & (FailsafeFlightMode -> (NucleoControl & NucleoControlDisplay)))",
            "post_condition_unexp_ft": "(((AutonomousFlightMode -> (JetsonControl & JetsonControlDisplay)) & (RemoteControlFlightMode -> (NulceoControl & NucleoControlDisplay))) & (FailsafeFlightMode -> (NucleoControl & NucleoControlDisplay)))",
            "post_condition_SMV_pt": "(((AutonomousFlightMode -> (JetsonControl & JetsonControlDisplay)) & (RemoteControlFlightMode -> (NulceoControl & NucleoControlDisplay))) & (FailsafeFlightMode -> (NucleoControl & NucleoControlDisplay)))",
            "post_condition_SMV_ft": "(((AutonomousFlightMode -> (JetsonControl & JetsonControlDisplay)) & (RemoteControlFlightMode -> (NulceoControl & NucleoControlDisplay))) & (FailsafeFlightMode -> (NucleoControl & NucleoControlDisplay)))",
            "ft_fetched": "(LAST V $post_condition_unexp_ft$)",
            "ft": "(LAST V (((AutonomousFlightMode -> (JetsonControl & JetsonControlDisplay)) & (RemoteControlFlightMode -> (NulceoControl & NucleoControlDisplay))) & (FailsafeFlightMode -> (NucleoControl & NucleoControlDisplay))))",
            "pt_fetched": "(H $post_condition_unexp_pt$)",
            "pt": "(H (((AutonomousFlightMode -> (JetsonControl & JetsonControlDisplay)) & (RemoteControlFlightMode -> (NulceoControl & NucleoControlDisplay))) & (FailsafeFlightMode -> (NucleoControl & NucleoControlDisplay))))",
            "ptExpanded_fetched": "(H $post_condition_SMV_pt$)",
            "ptExpanded": "(H (((AutonomousFlightMode -> (JetsonControl & JetsonControlDisplay)) & (RemoteControlFlightMode -> (NulceoControl & NucleoControlDisplay))) & (FailsafeFlightMode -> (NucleoControl & NucleoControlDisplay))))",
            "CoCoSpecCode": "H((((AutonomousFlightMode => (JetsonControl and JetsonControlDisplay)) and (RemoteControlFlightMode => (NulceoControl and NucleoControlDisplay))) and (FailsafeFlightMode => (NucleoControl and NucleoControlDisplay))))",
            "ftExpanded_fetched": "(LAST V $post_condition_SMV_ft$)",
            "ftExpandedUnoptimized": "(LAST V (((AutonomousFlightMode -> (JetsonControl & JetsonControlDisplay)) & (RemoteControlFlightMode -> (NulceoControl & NucleoControlDisplay))) & (FailsafeFlightMode -> (NucleoControl & NucleoControlDisplay))))",
            "ftExpanded": "(LAST V (((AutonomousFlightMode -> (JetsonControl & JetsonControlDisplay)) & (RemoteControlFlightMode -> (NulceoControl & NucleoControlDisplay))) & (FailsafeFlightMode -> (NucleoControl & NucleoControlDisplay))))",
            "ftInfAUExpanded_fetched": "(G $post_condition_SMV_ft$)",
            "ftInfAUExpanded": "(G (((AutonomousFlightMode -> (JetsonControl & JetsonControlDisplay)) & (RemoteControlFlightMode -> (NulceoControl & NucleoControlDisplay))) & (FailsafeFlightMode -> (NucleoControl & NucleoControlDisplay))))",
            "component": "System"
        },
        "status": "",
        "_id": "cca703fd-d8e6-11ef-941f-71fece653e2f"
    },
    {
        "reqid": "REQ002_3",
        "parent_reqid": "REQ002",
        "project": "Drone Requirements v0.4",
        "rationale": "",
        "comments": "",
        "fulltext": "whenever RaspberryHardwareFailure Raspberry shall within 10 milliseconds satisfy HardwareFailureDetected",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "noTrigger",
            "timing": "within",
            "response": "satisfaction",
            "variables": [
                "RaspberryHardwareFailure",
                "HardwareFailureDetected"
            ],
            "qualifier_word": "whenever",
            "pre_condition": "(RaspberryHardwareFailure)",
            "regular_condition": "(RaspberryHardwareFailure)",
            "conditionTextRange": [
                0,
                32
            ],
            "component_name": "Raspberry",
            "componentTextRange": [
                34,
                42
            ],
            "duration": "10",
            "timingTextRange": [
                50,
                71
            ],
            "post_condition": "(HardwareFailureDetected)",
            "responseTextRange": [
                73,
                103
            ],
            "diagramVariables": "CC = <b><i>(RaspberryHardwareFailure)</i></b>,  n = <b><i>10</i></b>, Response = <b><i>(HardwareFailureDetected)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: every point in the interval where <b><i>(RaspberryHardwareFailure)</i></b> is true.\nREQUIRES: for every trigger, RES must hold at some point with distance <= <b><i>10</i></b> from the trigger (i.e., at trigger, trigger+1, ..., or trigger+<b><i>10</i></b>). If the interval ends sooner than trigger+<b><i>10</i></b>, then RES need not hold.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_noTrigger_within_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "regular_condition_unexp_pt": "RaspberryHardwareFailure",
            "regular_condition_unexp_ft": "RaspberryHardwareFailure",
            "regular_condition_SMV_pt": "RaspberryHardwareFailure",
            "regular_condition_SMV_ft": "RaspberryHardwareFailure",
            "post_condition_unexp_pt": "HardwareFailureDetected",
            "post_condition_unexp_ft": "HardwareFailureDetected",
            "post_condition_SMV_pt": "HardwareFailureDetected",
            "post_condition_SMV_ft": "HardwareFailureDetected",
            "ft_fetched": "(LAST V ($regular_condition_unexp_ft$ -> ((F[<=$duration$] $post_condition_unexp_ft$) | (F[<$duration$] LAST))))",
            "ft": "(LAST V (RaspberryHardwareFailure -> ((F[<=10] HardwareFailureDetected) | (F[<10] LAST))))",
            "pt_fetched": "(H ((O[=$duration$] ($regular_condition_unexp_pt$ & (! $post_condition_unexp_pt$))) -> (O[<$duration$] (FTP | $post_condition_unexp_pt$))))",
            "pt": "(H ((O[=10] (RaspberryHardwareFailure & (! HardwareFailureDetected))) -> (O[<10] (FTP | HardwareFailureDetected))))",
            "ptExpanded_fetched": "(H ((O[=$duration$] ($regular_condition_SMV_pt$ & (! $post_condition_SMV_pt$))) -> (O[<$duration$] ((! (Y TRUE)) | $post_condition_SMV_pt$))))",
            "ptExpanded": "(H ((O[10,10] (RaspberryHardwareFailure & (! HardwareFailureDetected))) -> (O[0,9] ((! (Y TRUE)) | HardwareFailureDetected))))",
            "CoCoSpecCode": "H((OT(10, 10, (RaspberryHardwareFailure and not (HardwareFailureDetected))) => OT(9, 0, (not (YtoPre(true)) or HardwareFailureDetected))))",
            "ftExpanded_fetched": "(LAST V ($regular_condition_SMV_ft$ -> ((F[<=$duration$] $post_condition_SMV_ft$) | (F[<$duration$] LAST))))",
            "ftExpandedUnoptimized": "(LAST V (RaspberryHardwareFailure -> ((F[0,10] HardwareFailureDetected) | (F[0,9] LAST))))",
            "ftExpanded": "(LAST V (RaspberryHardwareFailure -> ((F[0,10] HardwareFailureDetected) | (F[0,9] LAST))))",
            "ftInfAUExpanded_fetched": "(G ($regular_condition_SMV_ft$ -> (F[<=$duration$] $post_condition_SMV_ft$)))",
            "ftInfAUExpanded": "(G (RaspberryHardwareFailure -> (F[0,10] HardwareFailureDetected)))",
            "component": "Raspberry"
        },
        "status": "",
        "_id": "cca703fe-d8e6-11ef-941f-71fece653e2f"
    },
    {
        "reqid": "REQ021",
        "parent_reqid": "",
        "project": "Drone Requirements v0.4",
        "rationale": "\"Have a standard class controller\"\n\nGroup: TBD\nNon-Functional\nLikely Unfeasible\nNeeds Further Specification\n\"Assuming the user refers to the controller Class on the ProVANT Simulator, this is unfeasible for the UAV.\"",
        "comments": "Non-functional requirement: Out of scope",
        "fulltext": "",
        "semantics": {},
        "status": "",
        "_id": "cca703ff-d8e6-11ef-941f-71fece653e2f"
    },
    {
        "reqid": "REQ035",
        "parent_reqid": "",
        "project": "Drone Requirements v0.4",
        "rationale": "\"Monitor angular velocities\"\n\nGroup: Data Monitoring\nFunctional\nFeasible\nNeeds Further Specification",
        "comments": "",
        "fulltext": "upon ControlLoopStart ActiveNucleo shall before ControlLoopFinish satisfy (MonitorAngularVelocity & SendAngularVelocityData)",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "before",
            "response": "satisfaction",
            "variables": [
                "ControlLoopStart",
                "ControlLoopFinish",
                "MonitorAngularVelocity",
                "SendAngularVelocityData"
            ],
            "qualifier_word": "upon",
            "pre_condition": "(ControlLoopStart)",
            "regular_condition": "(ControlLoopStart)",
            "conditionTextRange": [
                0,
                20
            ],
            "component_name": "ActiveNucleo",
            "componentTextRange": [
                22,
                33
            ],
            "stop_condition": "(ControlLoopFinish)",
            "timingTextRange": [
                41,
                64
            ],
            "post_condition": "(( MonitorAngularVelocity & SendAngularVelocityData ))",
            "responseTextRange": [
                66,
                123
            ],
            "diagramVariables": "TC = <b><i>(ControlLoopStart)</i></b>, SC = <b><i>(ControlLoopFinish)</i></b>, Response = <b><i>(( MonitorAngularVelocity & SendAngularVelocityData ))</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(ControlLoopStart)</i></b> is true and any point in the interval where <b><i>(ControlLoopStart)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at least once strictly before the state where the stop condition holds. If the stop condition never occurs in the interval, RES does not need to hold. If the stop condition holds at the trigger, the requirement is not satisfied.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_before_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "regular_condition_unexp_pt": "ControlLoopStart",
            "regular_condition_unexp_ft": "ControlLoopStart",
            "regular_condition_SMV_pt": "ControlLoopStart",
            "regular_condition_SMV_ft": "ControlLoopStart",
            "post_condition_unexp_pt": "(MonitorAngularVelocity & SendAngularVelocityData)",
            "post_condition_unexp_ft": "(MonitorAngularVelocity & SendAngularVelocityData)",
            "post_condition_SMV_pt": "(MonitorAngularVelocity & SendAngularVelocityData)",
            "post_condition_SMV_ft": "(MonitorAngularVelocity & SendAngularVelocityData)",
            "stop_condition_unexp_pt": "ControlLoopFinish",
            "stop_condition_unexp_ft": "ControlLoopFinish",
            "stop_condition_SMV_pt": "ControlLoopFinish",
            "stop_condition_SMV_ft": "ControlLoopFinish",
            "ft_fetched": "((LAST V (((! $regular_condition_unexp_ft$) & ((! LAST) & (X $regular_condition_unexp_ft$))) -> (X (($post_condition_unexp_ft$ | LAST) V (! $stop_condition_unexp_ft$))))) & ($regular_condition_unexp_ft$ -> (($post_condition_unexp_ft$ | LAST) V (! $stop_condition_unexp_ft$))))",
            "ft": "((LAST V (((! ControlLoopStart) & ((! LAST) & (X ControlLoopStart))) -> (X (((MonitorAngularVelocity & SendAngularVelocityData) | LAST) V (! ControlLoopFinish))))) & (ControlLoopStart -> (((MonitorAngularVelocity & SendAngularVelocityData) | LAST) V (! ControlLoopFinish))))",
            "pt_fetched": "(H ($stop_condition_unexp_pt$ -> ((H (! $regular_condition_unexp_pt$)) | (((! FTP) & (! ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | FTP)))) & (Y (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | FTP))))))))))",
            "pt": "(H (ControlLoopFinish -> ((H (! ControlLoopStart)) | (((! FTP) & (! (ControlLoopStart & ((Y (! ControlLoopStart)) | FTP)))) & (Y (! ((! (MonitorAngularVelocity & SendAngularVelocityData)) S ((! (MonitorAngularVelocity & SendAngularVelocityData)) & (ControlLoopStart & ((Y (! ControlLoopStart)) | FTP))))))))))",
            "ptExpanded_fetched": "(H ($stop_condition_SMV_pt$ -> ((H (! $regular_condition_SMV_pt$)) | (((Y TRUE) & (! ($regular_condition_SMV_pt$ & (Z (! $regular_condition_SMV_pt$))))) & (Y (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & (Z (! $regular_condition_SMV_pt$)))))))))))",
            "ptExpanded": "(H (ControlLoopFinish -> ((H (! ControlLoopStart)) | (((Y TRUE) & (! (ControlLoopStart & (Z (! ControlLoopStart))))) & (Y (! ((! (MonitorAngularVelocity & SendAngularVelocityData)) S ((! (MonitorAngularVelocity & SendAngularVelocityData)) & (ControlLoopStart & (Z (! ControlLoopStart)))))))))))",
            "CoCoSpecCode": "H((ControlLoopFinish => (H(not (ControlLoopStart)) or ((YtoPre(true) and not ((ControlLoopStart and ZtoPre(not (ControlLoopStart))))) and YtoPre(not (SI((ControlLoopStart and ZtoPre(not (ControlLoopStart))),not ((MonitorAngularVelocity and SendAngularVelocityData)))))))))",
            "ftExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X (($post_condition_SMV_ft$ | LAST) V (! $stop_condition_SMV_ft$))))) & ($regular_condition_SMV_ft$ -> (($post_condition_SMV_ft$ | LAST) V (! $stop_condition_SMV_ft$))))",
            "ftExpandedUnoptimized": "((LAST V (((! ControlLoopStart) & ((! LAST) & (X ControlLoopStart))) -> (X (((MonitorAngularVelocity & SendAngularVelocityData) | LAST) V (! ControlLoopFinish))))) & (ControlLoopStart -> (((MonitorAngularVelocity & SendAngularVelocityData) | LAST) V (! ControlLoopFinish))))",
            "ftExpanded": "((LAST V (((! ControlLoopStart) & ((! LAST) & (X ControlLoopStart))) -> (X (((MonitorAngularVelocity & SendAngularVelocityData) | LAST) V (! ControlLoopFinish))))) & (ControlLoopStart -> (((MonitorAngularVelocity & SendAngularVelocityData) | LAST) V (! ControlLoopFinish))))",
            "ftInfAUExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X ($post_condition_SMV_ft$ V (! $stop_condition_SMV_ft$))))) & ($regular_condition_SMV_ft$ -> ($post_condition_SMV_ft$ V (! $stop_condition_SMV_ft$))))",
            "ftInfAUExpanded": "((G (((! ControlLoopStart) & (X ControlLoopStart)) -> (X ((MonitorAngularVelocity & SendAngularVelocityData) V (! ControlLoopFinish))))) & (ControlLoopStart -> ((MonitorAngularVelocity & SendAngularVelocityData) V (! ControlLoopFinish))))",
            "component": "ActiveNucleo"
        },
        "status": "",
        "_id": "cca70400-d8e6-11ef-941f-71fece653e2f"
    },
    {
        "reqid": "REQ010",
        "parent_reqid": "",
        "project": "Drone Requirements v0.4",
        "rationale": "\"Measure nucleo control transitions\"\n\nGroup: Monitoring\nFunctional\nFeasible\nNeeds Further Specification\n\"Possible duplicate of REQ004\"",
        "comments": "FRET specifies that conditions trigger upon becoming true after being false, so this works as intended. One might want to split this into two requirements (one for each control transition) once there is more detail on what to do with the measurement\n\nv0.2: Leaving this one unchanged besides adding a timing constraint, but also decided to create some child requirements",
        "fulltext": "in SimulationMode when NucleoOneControl | NucleoTwoControl System shall at the next timepoint satisfy MeasureControlTransition",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "regular",
            "timing": "next",
            "response": "satisfaction",
            "variables": [
                "SimulationMode",
                "NucleoOneControl",
                "NucleoTwoControl",
                "MeasureControlTransition"
            ],
            "scope_mode": "SimulationMode",
            "scopeTextRange": [
                0,
                16
            ],
            "qualifier_word": "when",
            "pre_condition": "(NucleoOneControl | NucleoTwoControl)",
            "regular_condition": "(NucleoOneControl | NucleoTwoControl)",
            "conditionTextRange": [
                18,
                57
            ],
            "component_name": "System",
            "componentTextRange": [
                59,
                64
            ],
            "timingTextRange": [
                72,
                92
            ],
            "post_condition": "(MeasureControlTransition)",
            "responseTextRange": [
                94,
                125
            ],
            "diagramVariables": "M = <b><i>SimulationMode</i></b>, TC = <b><i>(NucleoOneControl | NucleoTwoControl)</i></b>, Response = <b><i>(MeasureControlTransition)</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>SimulationMode</i></b> holds.\nTRIGGER: first point in the interval if <b><i>(NucleoOneControl | NucleoTwoControl)</i></b> is true and any point in the interval where <b><i>(NucleoOneControl | NucleoTwoControl)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at the next time step.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_regular_next_satisfaction.svg",
            "scope_mode_pt": "SimulationMode",
            "scope_mode_ft": "SimulationMode",
            "regular_condition_unexp_pt": "(NucleoOneControl | NucleoTwoControl)",
            "regular_condition_unexp_ft": "(NucleoOneControl | NucleoTwoControl)",
            "regular_condition_SMV_pt": "(NucleoOneControl | NucleoTwoControl)",
            "regular_condition_SMV_ft": "(NucleoOneControl | NucleoTwoControl)",
            "post_condition_unexp_pt": "MeasureControlTransition",
            "post_condition_unexp_ft": "MeasureControlTransition",
            "post_condition_SMV_pt": "MeasureControlTransition",
            "post_condition_SMV_ft": "MeasureControlTransition",
            "ft_fetched": "((LAST V ((! (Fin_$scope_mode_ft$ & (! LAST))) | (X (((Lin_$scope_mode_ft$ | LAST) V (((! $regular_condition_unexp_ft$) & ((! LAST) & ((X $regular_condition_unexp_ft$) & (! (Lin_$scope_mode_ft$ | LAST))))) -> ((X ((Lin_$scope_mode_ft$ | LAST) | ((X $post_condition_unexp_ft$) & (! (Lin_$scope_mode_ft$ | LAST))))) & (! (Lin_$scope_mode_ft$ | LAST))))) & ($regular_condition_unexp_ft$ -> ((Lin_$scope_mode_ft$ | LAST) | ((X $post_condition_unexp_ft$) & (! (Lin_$scope_mode_ft$ | LAST))))))))) & ($scope_mode_ft$ -> (((Lin_$scope_mode_ft$ | LAST) V (((! $regular_condition_unexp_ft$) & ((! LAST) & ((X $regular_condition_unexp_ft$) & (! (Lin_$scope_mode_ft$ | LAST))))) -> ((X ((Lin_$scope_mode_ft$ | LAST) | ((X $post_condition_unexp_ft$) & (! (Lin_$scope_mode_ft$ | LAST))))) & (! (Lin_$scope_mode_ft$ | LAST))))) & ($regular_condition_unexp_ft$ -> ((Lin_$scope_mode_ft$ | LAST) | ((X $post_condition_unexp_ft$) & (! (Lin_$scope_mode_ft$ | LAST))))))))",
            "ft": "((LAST V ((! (Fin_SimulationMode & (! LAST))) | (X (((Lin_SimulationMode | LAST) V (((! (NucleoOneControl | NucleoTwoControl)) & ((! LAST) & ((X (NucleoOneControl | NucleoTwoControl)) & (! (Lin_SimulationMode | LAST))))) -> ((X ((Lin_SimulationMode | LAST) | ((X MeasureControlTransition) & (! (Lin_SimulationMode | LAST))))) & (! (Lin_SimulationMode | LAST))))) & ((NucleoOneControl | NucleoTwoControl) -> ((Lin_SimulationMode | LAST) | ((X MeasureControlTransition) & (! (Lin_SimulationMode | LAST))))))))) & (SimulationMode -> (((Lin_SimulationMode | LAST) V (((! (NucleoOneControl | NucleoTwoControl)) & ((! LAST) & ((X (NucleoOneControl | NucleoTwoControl)) & (! (Lin_SimulationMode | LAST))))) -> ((X ((Lin_SimulationMode | LAST) | ((X MeasureControlTransition) & (! (Lin_SimulationMode | LAST))))) & (! (Lin_SimulationMode | LAST))))) & ((NucleoOneControl | NucleoTwoControl) -> ((Lin_SimulationMode | LAST) | ((X MeasureControlTransition) & (! (Lin_SimulationMode | LAST))))))))",
            "pt_fetched": "((H (Lin_$scope_mode_pt$ -> (Y (((Y ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | Fin_$scope_mode_pt$))) -> ($post_condition_unexp_pt$ | Fin_$scope_mode_pt$)) S (((Y ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | Fin_$scope_mode_pt$))) -> ($post_condition_unexp_pt$ | Fin_$scope_mode_pt$)) & Fin_$scope_mode_pt$))))) & (((! Lin_$scope_mode_pt$) S ((! Lin_$scope_mode_pt$) & Fin_$scope_mode_pt$)) -> (((Y ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | Fin_$scope_mode_pt$))) -> ($post_condition_unexp_pt$ | Fin_$scope_mode_pt$)) S (((Y ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | Fin_$scope_mode_pt$))) -> ($post_condition_unexp_pt$ | Fin_$scope_mode_pt$)) & Fin_$scope_mode_pt$))))",
            "pt": "((H (Lin_SimulationMode -> (Y (((Y ((NucleoOneControl | NucleoTwoControl) & ((Y (! (NucleoOneControl | NucleoTwoControl))) | Fin_SimulationMode))) -> (MeasureControlTransition | Fin_SimulationMode)) S (((Y ((NucleoOneControl | NucleoTwoControl) & ((Y (! (NucleoOneControl | NucleoTwoControl))) | Fin_SimulationMode))) -> (MeasureControlTransition | Fin_SimulationMode)) & Fin_SimulationMode))))) & (((! Lin_SimulationMode) S ((! Lin_SimulationMode) & Fin_SimulationMode)) -> (((Y ((NucleoOneControl | NucleoTwoControl) & ((Y (! (NucleoOneControl | NucleoTwoControl))) | Fin_SimulationMode))) -> (MeasureControlTransition | Fin_SimulationMode)) S (((Y ((NucleoOneControl | NucleoTwoControl) & ((Y (! (NucleoOneControl | NucleoTwoControl))) | Fin_SimulationMode))) -> (MeasureControlTransition | Fin_SimulationMode)) & Fin_SimulationMode))))",
            "ptExpanded_fetched": "((H (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) -> (Y (((Y ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | ($scope_mode_pt$ & (Z (! $scope_mode_pt$)))))) -> ($post_condition_SMV_pt$ | ($scope_mode_pt$ & (Z (! $scope_mode_pt$))))) S (((Y ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | ($scope_mode_pt$ & (Z (! $scope_mode_pt$)))))) -> ($post_condition_SMV_pt$ | ($scope_mode_pt$ & (Z (! $scope_mode_pt$))))) & ($scope_mode_pt$ & (Z (! $scope_mode_pt$)))))))) & (((! ((! $scope_mode_pt$) & (Y $scope_mode_pt$))) S ((! ((! $scope_mode_pt$) & (Y $scope_mode_pt$))) & ($scope_mode_pt$ & (Z (! $scope_mode_pt$))))) -> (((Y ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | ($scope_mode_pt$ & (Z (! $scope_mode_pt$)))))) -> ($post_condition_SMV_pt$ | ($scope_mode_pt$ & (Z (! $scope_mode_pt$))))) S (((Y ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | ($scope_mode_pt$ & (Z (! $scope_mode_pt$)))))) -> ($post_condition_SMV_pt$ | ($scope_mode_pt$ & (Z (! $scope_mode_pt$))))) & ($scope_mode_pt$ & (Z (! $scope_mode_pt$)))))))",
            "ptExpanded": "((H (((! SimulationMode) & (Y SimulationMode)) -> (Y (((Y ((NucleoOneControl | NucleoTwoControl) & ((Y (! (NucleoOneControl | NucleoTwoControl))) | (SimulationMode & (Z (! SimulationMode)))))) -> (MeasureControlTransition | (SimulationMode & (Z (! SimulationMode))))) S (((Y ((NucleoOneControl | NucleoTwoControl) & ((Y (! (NucleoOneControl | NucleoTwoControl))) | (SimulationMode & (Z (! SimulationMode)))))) -> (MeasureControlTransition | (SimulationMode & (Z (! SimulationMode))))) & (SimulationMode & (Z (! SimulationMode)))))))) & (((! ((! SimulationMode) & (Y SimulationMode))) S ((! ((! SimulationMode) & (Y SimulationMode))) & (SimulationMode & (Z (! SimulationMode))))) -> (((Y ((NucleoOneControl | NucleoTwoControl) & ((Y (! (NucleoOneControl | NucleoTwoControl))) | (SimulationMode & (Z (! SimulationMode)))))) -> (MeasureControlTransition | (SimulationMode & (Z (! SimulationMode))))) S (((Y ((NucleoOneControl | NucleoTwoControl) & ((Y (! (NucleoOneControl | NucleoTwoControl))) | (SimulationMode & (Z (! SimulationMode)))))) -> (MeasureControlTransition | (SimulationMode & (Z (! SimulationMode))))) & (SimulationMode & (Z (! SimulationMode)))))))",
            "CoCoSpecCode": "(H(((not (SimulationMode) and YtoPre(SimulationMode)) => YtoPre(SI((SimulationMode and ZtoPre(not (SimulationMode))),(YtoPre(((NucleoOneControl or NucleoTwoControl) and (YtoPre(not ((NucleoOneControl or NucleoTwoControl))) or (SimulationMode and ZtoPre(not (SimulationMode)))))) => (MeasureControlTransition or (SimulationMode and ZtoPre(not (SimulationMode))))))))) and (SI((SimulationMode and ZtoPre(not (SimulationMode))),not ((not (SimulationMode) and YtoPre(SimulationMode)))) => SI((SimulationMode and ZtoPre(not (SimulationMode))),(YtoPre(((NucleoOneControl or NucleoTwoControl) and (YtoPre(not ((NucleoOneControl or NucleoTwoControl))) or (SimulationMode and ZtoPre(not (SimulationMode)))))) => (MeasureControlTransition or (SimulationMode and ZtoPre(not (SimulationMode))))))))",
            "ftExpanded_fetched": "((LAST V ((! ((((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$)) & (! LAST))) | (X ((((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST) V (((! $regular_condition_SMV_ft$) & ((! LAST) & ((X $regular_condition_SMV_ft$) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))))) -> ((X (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST) | ((X $post_condition_SMV_ft$) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))))) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))))) & ($regular_condition_SMV_ft$ -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST) | ((X $post_condition_SMV_ft$) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))))))))) & ($scope_mode_ft$ -> ((((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST) V (((! $regular_condition_SMV_ft$) & ((! LAST) & ((X $regular_condition_SMV_ft$) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))))) -> ((X (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST) | ((X $post_condition_SMV_ft$) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))))) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))))) & ($regular_condition_SMV_ft$ -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST) | ((X $post_condition_SMV_ft$) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))))))))",
            "ftExpandedUnoptimized": "((LAST V ((! ((((! SimulationMode) & (! LAST)) & (X SimulationMode)) & (! LAST))) | (X (((((SimulationMode & (! LAST)) & (X (! SimulationMode))) | LAST) V (((! (NucleoOneControl | NucleoTwoControl)) & ((! LAST) & ((X (NucleoOneControl | NucleoTwoControl)) & (! (((SimulationMode & (! LAST)) & (X (! SimulationMode))) | LAST))))) -> ((X ((((SimulationMode & (! LAST)) & (X (! SimulationMode))) | LAST) | ((X MeasureControlTransition) & (! (((SimulationMode & (! LAST)) & (X (! SimulationMode))) | LAST))))) & (! (((SimulationMode & (! LAST)) & (X (! SimulationMode))) | LAST))))) & ((NucleoOneControl | NucleoTwoControl) -> ((((SimulationMode & (! LAST)) & (X (! SimulationMode))) | LAST) | ((X MeasureControlTransition) & (! (((SimulationMode & (! LAST)) & (X (! SimulationMode))) | LAST))))))))) & (SimulationMode -> (((((SimulationMode & (! LAST)) & (X (! SimulationMode))) | LAST) V (((! (NucleoOneControl | NucleoTwoControl)) & ((! LAST) & ((X (NucleoOneControl | NucleoTwoControl)) & (! (((SimulationMode & (! LAST)) & (X (! SimulationMode))) | LAST))))) -> ((X ((((SimulationMode & (! LAST)) & (X (! SimulationMode))) | LAST) | ((X MeasureControlTransition) & (! (((SimulationMode & (! LAST)) & (X (! SimulationMode))) | LAST))))) & (! (((SimulationMode & (! LAST)) & (X (! SimulationMode))) | LAST))))) & ((NucleoOneControl | NucleoTwoControl) -> ((((SimulationMode & (! LAST)) & (X (! SimulationMode))) | LAST) | ((X MeasureControlTransition) & (! (((SimulationMode & (! LAST)) & (X (! SimulationMode))) | LAST))))))))",
            "ftExpanded": "((LAST V ((! ((((! SimulationMode) & (! LAST)) & (X SimulationMode)) & (! LAST))) | (X (((((SimulationMode & (! LAST)) & (X (! SimulationMode))) | LAST) V (((! (NucleoOneControl | NucleoTwoControl)) & ((! LAST) & ((X (NucleoOneControl | NucleoTwoControl)) & (! (((SimulationMode & (! LAST)) & (X (! SimulationMode))) | LAST))))) -> ((X ((((SimulationMode & (! LAST)) & (X (! SimulationMode))) | LAST) | ((X MeasureControlTransition) & (! (((SimulationMode & (! LAST)) & (X (! SimulationMode))) | LAST))))) & (! (((SimulationMode & (! LAST)) & (X (! SimulationMode))) | LAST))))) & ((NucleoOneControl | NucleoTwoControl) -> ((((SimulationMode & (! LAST)) & (X (! SimulationMode))) | LAST) | ((X MeasureControlTransition) & (! (((SimulationMode & (! LAST)) & (X (! SimulationMode))) | LAST))))))))) & (SimulationMode -> (((((SimulationMode & (! LAST)) & (X (! SimulationMode))) | LAST) V (((! (NucleoOneControl | NucleoTwoControl)) & ((! LAST) & ((X (NucleoOneControl | NucleoTwoControl)) & (! (((SimulationMode & (! LAST)) & (X (! SimulationMode))) | LAST))))) -> ((X ((((SimulationMode & (! LAST)) & (X (! SimulationMode))) | LAST) | ((X MeasureControlTransition) & (! (((SimulationMode & (! LAST)) & (X (! SimulationMode))) | LAST))))) & (! (((SimulationMode & (! LAST)) & (X (! SimulationMode))) | LAST))))) & ((NucleoOneControl | NucleoTwoControl) -> ((((SimulationMode & (! LAST)) & (X (! SimulationMode))) | LAST) | ((X MeasureControlTransition) & (! (((SimulationMode & (! LAST)) & (X (! SimulationMode))) | LAST))))))))",
            "ftInfAUExpanded_fetched": "((G ((! (((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$))) | (X (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))))) -> ((X ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | ((X $post_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | ((X $post_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))))))) & ($scope_mode_ft$ -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))))) -> ((X ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | ((X $post_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | ((X $post_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))))))",
            "ftInfAUExpanded": "((G ((! ((! SimulationMode) & (X SimulationMode))) | (X (((SimulationMode & (X (! SimulationMode))) V (((! (NucleoOneControl | NucleoTwoControl)) & ((X (NucleoOneControl | NucleoTwoControl)) & (! (SimulationMode & (X (! SimulationMode)))))) -> ((X ((SimulationMode & (X (! SimulationMode))) | ((X MeasureControlTransition) & (! (SimulationMode & (X (! SimulationMode))))))) & (! (SimulationMode & (X (! SimulationMode))))))) & ((NucleoOneControl | NucleoTwoControl) -> ((SimulationMode & (X (! SimulationMode))) | ((X MeasureControlTransition) & (! (SimulationMode & (X (! SimulationMode))))))))))) & (SimulationMode -> (((SimulationMode & (X (! SimulationMode))) V (((! (NucleoOneControl | NucleoTwoControl)) & ((X (NucleoOneControl | NucleoTwoControl)) & (! (SimulationMode & (X (! SimulationMode)))))) -> ((X ((SimulationMode & (X (! SimulationMode))) | ((X MeasureControlTransition) & (! (SimulationMode & (X (! SimulationMode))))))) & (! (SimulationMode & (X (! SimulationMode))))))) & ((NucleoOneControl | NucleoTwoControl) -> ((SimulationMode & (X (! SimulationMode))) | ((X MeasureControlTransition) & (! (SimulationMode & (X (! SimulationMode))))))))))",
            "component": "System"
        },
        "status": "",
        "_id": "cca70401-d8e6-11ef-941f-71fece653e2f"
    },
    {
        "reqid": "REQ038",
        "parent_reqid": "",
        "project": "Drone Requirements v0.4",
        "rationale": "\"Monitor xyz accelerations (in terms of g)\"\n\nGroup: Data Monitoring\nFunctional\nPotentially Unfeasible\nNeeds Further Specification\n\"Why in terms of g? Affects the ground station more than the UAV>\"",
        "comments": "I could have made three variables, one each for x y and z, but that feels a bit silly at this high level",
        "fulltext": "upon ControlLoopStart ActiveNucleo shall before ControlLoopFinish satisfy (MonitorAccelerations & SendAccelerationsData)",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "before",
            "response": "satisfaction",
            "variables": [
                "ControlLoopStart",
                "ControlLoopFinish",
                "MonitorAccelerations",
                "SendAccelerationsData"
            ],
            "qualifier_word": "upon",
            "pre_condition": "(ControlLoopStart)",
            "regular_condition": "(ControlLoopStart)",
            "conditionTextRange": [
                0,
                20
            ],
            "component_name": "ActiveNucleo",
            "componentTextRange": [
                22,
                33
            ],
            "stop_condition": "(ControlLoopFinish)",
            "timingTextRange": [
                41,
                64
            ],
            "post_condition": "(( MonitorAccelerations & SendAccelerationsData ))",
            "responseTextRange": [
                66,
                119
            ],
            "diagramVariables": "TC = <b><i>(ControlLoopStart)</i></b>, SC = <b><i>(ControlLoopFinish)</i></b>, Response = <b><i>(( MonitorAccelerations & SendAccelerationsData ))</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(ControlLoopStart)</i></b> is true and any point in the interval where <b><i>(ControlLoopStart)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at least once strictly before the state where the stop condition holds. If the stop condition never occurs in the interval, RES does not need to hold. If the stop condition holds at the trigger, the requirement is not satisfied.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_before_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "regular_condition_unexp_pt": "ControlLoopStart",
            "regular_condition_unexp_ft": "ControlLoopStart",
            "regular_condition_SMV_pt": "ControlLoopStart",
            "regular_condition_SMV_ft": "ControlLoopStart",
            "post_condition_unexp_pt": "(MonitorAccelerations & SendAccelerationsData)",
            "post_condition_unexp_ft": "(MonitorAccelerations & SendAccelerationsData)",
            "post_condition_SMV_pt": "(MonitorAccelerations & SendAccelerationsData)",
            "post_condition_SMV_ft": "(MonitorAccelerations & SendAccelerationsData)",
            "stop_condition_unexp_pt": "ControlLoopFinish",
            "stop_condition_unexp_ft": "ControlLoopFinish",
            "stop_condition_SMV_pt": "ControlLoopFinish",
            "stop_condition_SMV_ft": "ControlLoopFinish",
            "ft_fetched": "((LAST V (((! $regular_condition_unexp_ft$) & ((! LAST) & (X $regular_condition_unexp_ft$))) -> (X (($post_condition_unexp_ft$ | LAST) V (! $stop_condition_unexp_ft$))))) & ($regular_condition_unexp_ft$ -> (($post_condition_unexp_ft$ | LAST) V (! $stop_condition_unexp_ft$))))",
            "ft": "((LAST V (((! ControlLoopStart) & ((! LAST) & (X ControlLoopStart))) -> (X (((MonitorAccelerations & SendAccelerationsData) | LAST) V (! ControlLoopFinish))))) & (ControlLoopStart -> (((MonitorAccelerations & SendAccelerationsData) | LAST) V (! ControlLoopFinish))))",
            "pt_fetched": "(H ($stop_condition_unexp_pt$ -> ((H (! $regular_condition_unexp_pt$)) | (((! FTP) & (! ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | FTP)))) & (Y (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | FTP))))))))))",
            "pt": "(H (ControlLoopFinish -> ((H (! ControlLoopStart)) | (((! FTP) & (! (ControlLoopStart & ((Y (! ControlLoopStart)) | FTP)))) & (Y (! ((! (MonitorAccelerations & SendAccelerationsData)) S ((! (MonitorAccelerations & SendAccelerationsData)) & (ControlLoopStart & ((Y (! ControlLoopStart)) | FTP))))))))))",
            "ptExpanded_fetched": "(H ($stop_condition_SMV_pt$ -> ((H (! $regular_condition_SMV_pt$)) | (((Y TRUE) & (! ($regular_condition_SMV_pt$ & (Z (! $regular_condition_SMV_pt$))))) & (Y (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & (Z (! $regular_condition_SMV_pt$)))))))))))",
            "ptExpanded": "(H (ControlLoopFinish -> ((H (! ControlLoopStart)) | (((Y TRUE) & (! (ControlLoopStart & (Z (! ControlLoopStart))))) & (Y (! ((! (MonitorAccelerations & SendAccelerationsData)) S ((! (MonitorAccelerations & SendAccelerationsData)) & (ControlLoopStart & (Z (! ControlLoopStart)))))))))))",
            "CoCoSpecCode": "H((ControlLoopFinish => (H(not (ControlLoopStart)) or ((YtoPre(true) and not ((ControlLoopStart and ZtoPre(not (ControlLoopStart))))) and YtoPre(not (SI((ControlLoopStart and ZtoPre(not (ControlLoopStart))),not ((MonitorAccelerations and SendAccelerationsData)))))))))",
            "ftExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X (($post_condition_SMV_ft$ | LAST) V (! $stop_condition_SMV_ft$))))) & ($regular_condition_SMV_ft$ -> (($post_condition_SMV_ft$ | LAST) V (! $stop_condition_SMV_ft$))))",
            "ftExpandedUnoptimized": "((LAST V (((! ControlLoopStart) & ((! LAST) & (X ControlLoopStart))) -> (X (((MonitorAccelerations & SendAccelerationsData) | LAST) V (! ControlLoopFinish))))) & (ControlLoopStart -> (((MonitorAccelerations & SendAccelerationsData) | LAST) V (! ControlLoopFinish))))",
            "ftExpanded": "((LAST V (((! ControlLoopStart) & ((! LAST) & (X ControlLoopStart))) -> (X (((MonitorAccelerations & SendAccelerationsData) | LAST) V (! ControlLoopFinish))))) & (ControlLoopStart -> (((MonitorAccelerations & SendAccelerationsData) | LAST) V (! ControlLoopFinish))))",
            "ftInfAUExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X ($post_condition_SMV_ft$ V (! $stop_condition_SMV_ft$))))) & ($regular_condition_SMV_ft$ -> ($post_condition_SMV_ft$ V (! $stop_condition_SMV_ft$))))",
            "ftInfAUExpanded": "((G (((! ControlLoopStart) & (X ControlLoopStart)) -> (X ((MonitorAccelerations & SendAccelerationsData) V (! ControlLoopFinish))))) & (ControlLoopStart -> ((MonitorAccelerations & SendAccelerationsData) V (! ControlLoopFinish))))",
            "component": "ActiveNucleo"
        },
        "status": "",
        "_id": "cca70402-d8e6-11ef-941f-71fece653e2f"
    },
    {
        "reqid": "REQ048",
        "parent_reqid": "",
        "project": "Drone Requirements v0.4",
        "rationale": "\"Monitor each sensor and actuator - show individually on interface, along with each sensor sampling time\"\n\nGroup: Data Monitoring\nFunctional\nLikely Unfeasible\nNeeds Further Specification\n\"Need to include sampling time in the MAVLink Messages.\"",
        "comments": "",
        "fulltext": "",
        "semantics": {},
        "status": "",
        "_id": "cca70403-d8e6-11ef-941f-71fece653e2f"
    },
    {
        "reqid": "REQ002_1",
        "parent_reqid": "REQ002",
        "project": "Drone Requirements v0.4",
        "rationale": "",
        "comments": "",
        "fulltext": "whenever HardwareFailure Jetson shall within 10 milliseconds satisfy HardwareFailureDetected",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "noTrigger",
            "timing": "within",
            "response": "satisfaction",
            "variables": [
                "HardwareFailure",
                "HardwareFailureDetected"
            ],
            "qualifier_word": "whenever",
            "pre_condition": "(HardwareFailure)",
            "regular_condition": "(HardwareFailure)",
            "conditionTextRange": [
                0,
                23
            ],
            "component_name": "Jetson",
            "componentTextRange": [
                25,
                30
            ],
            "duration": "10",
            "timingTextRange": [
                38,
                59
            ],
            "post_condition": "(HardwareFailureDetected)",
            "responseTextRange": [
                61,
                91
            ],
            "diagramVariables": "CC = <b><i>(HardwareFailure)</i></b>,  n = <b><i>10</i></b>, Response = <b><i>(HardwareFailureDetected)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: every point in the interval where <b><i>(HardwareFailure)</i></b> is true.\nREQUIRES: for every trigger, RES must hold at some point with distance <= <b><i>10</i></b> from the trigger (i.e., at trigger, trigger+1, ..., or trigger+<b><i>10</i></b>). If the interval ends sooner than trigger+<b><i>10</i></b>, then RES need not hold.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_noTrigger_within_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "regular_condition_unexp_pt": "HardwareFailure",
            "regular_condition_unexp_ft": "HardwareFailure",
            "regular_condition_SMV_pt": "HardwareFailure",
            "regular_condition_SMV_ft": "HardwareFailure",
            "post_condition_unexp_pt": "HardwareFailureDetected",
            "post_condition_unexp_ft": "HardwareFailureDetected",
            "post_condition_SMV_pt": "HardwareFailureDetected",
            "post_condition_SMV_ft": "HardwareFailureDetected",
            "ft_fetched": "(LAST V ($regular_condition_unexp_ft$ -> ((F[<=$duration$] $post_condition_unexp_ft$) | (F[<$duration$] LAST))))",
            "ft": "(LAST V (HardwareFailure -> ((F[<=10] HardwareFailureDetected) | (F[<10] LAST))))",
            "pt_fetched": "(H ((O[=$duration$] ($regular_condition_unexp_pt$ & (! $post_condition_unexp_pt$))) -> (O[<$duration$] (FTP | $post_condition_unexp_pt$))))",
            "pt": "(H ((O[=10] (HardwareFailure & (! HardwareFailureDetected))) -> (O[<10] (FTP | HardwareFailureDetected))))",
            "ptExpanded_fetched": "(H ((O[=$duration$] ($regular_condition_SMV_pt$ & (! $post_condition_SMV_pt$))) -> (O[<$duration$] ((! (Y TRUE)) | $post_condition_SMV_pt$))))",
            "ptExpanded": "(H ((O[10,10] (HardwareFailure & (! HardwareFailureDetected))) -> (O[0,9] ((! (Y TRUE)) | HardwareFailureDetected))))",
            "CoCoSpecCode": "H((OT(10, 10, (HardwareFailure and not (HardwareFailureDetected))) => OT(9, 0, (not (YtoPre(true)) or HardwareFailureDetected))))",
            "ftExpanded_fetched": "(LAST V ($regular_condition_SMV_ft$ -> ((F[<=$duration$] $post_condition_SMV_ft$) | (F[<$duration$] LAST))))",
            "ftExpandedUnoptimized": "(LAST V (HardwareFailure -> ((F[0,10] HardwareFailureDetected) | (F[0,9] LAST))))",
            "ftExpanded": "(LAST V (HardwareFailure -> ((F[0,10] HardwareFailureDetected) | (F[0,9] LAST))))",
            "ftInfAUExpanded_fetched": "(G ($regular_condition_SMV_ft$ -> (F[<=$duration$] $post_condition_SMV_ft$)))",
            "ftInfAUExpanded": "(G (HardwareFailure -> (F[0,10] HardwareFailureDetected)))",
            "component": "Jetson"
        },
        "status": "",
        "_id": "cca70404-d8e6-11ef-941f-71fece653e2f"
    },
    {
        "reqid": "REQ006",
        "parent_reqid": "",
        "project": "Drone Requirements v0.4",
        "rationale": "\"Servo, Battery and Attitude simulations and monitoring\"\n\nGroup: Monitoring\nFunctional\nPartially Unfeasible\nNeeds Further Specification\n\"Aerodynamic servos do not offer any feedback\"",
        "comments": "v0.2: Unchanged",
        "fulltext": "while SimulationMode | RealMode ActiveNucleo shall always satisfy ServoMonitoring & BatteryMonitoring & AttitudeMonitoring",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": [
                "SimulationMode",
                "RealMode",
                "ServoMonitoring",
                "BatteryMonitoring",
                "AttitudeMonitoring"
            ],
            "scope_mode": "(SimulationMode | RealMode)",
            "scopeTextRange": [
                0,
                30
            ],
            "component_name": "ActiveNucleo",
            "componentTextRange": [
                32,
                43
            ],
            "timingTextRange": [
                51,
                56
            ],
            "post_condition": "(ServoMonitoring & BatteryMonitoring & AttitudeMonitoring)",
            "responseTextRange": [
                58,
                121
            ],
            "diagramVariables": "M = <b><i>(SimulationMode | RealMode)</i></b>, Response = <b><i>(ServoMonitoring & BatteryMonitoring & AttitudeMonitoring)</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>(SimulationMode | RealMode)</i></b> holds.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_null_always_satisfaction.svg",
            "scope_mode_pt": "(SimulationMode | RealMode)",
            "scope_mode_ft": "(SimulationMode | RealMode)",
            "post_condition_unexp_pt": "((ServoMonitoring & BatteryMonitoring) & AttitudeMonitoring)",
            "post_condition_unexp_ft": "((ServoMonitoring & BatteryMonitoring) & AttitudeMonitoring)",
            "post_condition_SMV_pt": "((ServoMonitoring & BatteryMonitoring) & AttitudeMonitoring)",
            "post_condition_SMV_ft": "((ServoMonitoring & BatteryMonitoring) & AttitudeMonitoring)",
            "ft_fetched": "(LAST V ($scope_mode_ft$ -> $post_condition_unexp_ft$))",
            "ft": "(LAST V ((SimulationMode | RealMode) -> ((ServoMonitoring & BatteryMonitoring) & AttitudeMonitoring)))",
            "pt_fetched": "(H ($scope_mode_pt$ -> $post_condition_unexp_pt$))",
            "pt": "(H ((SimulationMode | RealMode) -> ((ServoMonitoring & BatteryMonitoring) & AttitudeMonitoring)))",
            "ptExpanded_fetched": "(H ($scope_mode_pt$ -> $post_condition_SMV_pt$))",
            "ptExpanded": "(H ((SimulationMode | RealMode) -> ((ServoMonitoring & BatteryMonitoring) & AttitudeMonitoring)))",
            "CoCoSpecCode": "H(((SimulationMode or RealMode) => ((ServoMonitoring and BatteryMonitoring) and AttitudeMonitoring)))",
            "ftExpanded_fetched": "(LAST V ($scope_mode_ft$ -> $post_condition_SMV_ft$))",
            "ftExpandedUnoptimized": "(LAST V ((SimulationMode | RealMode) -> ((ServoMonitoring & BatteryMonitoring) & AttitudeMonitoring)))",
            "ftExpanded": "(LAST V ((SimulationMode | RealMode) -> ((ServoMonitoring & BatteryMonitoring) & AttitudeMonitoring)))",
            "ftInfAUExpanded_fetched": "(G ($scope_mode_ft$ -> $post_condition_SMV_ft$))",
            "ftInfAUExpanded": "(G ((SimulationMode | RealMode) -> ((ServoMonitoring & BatteryMonitoring) & AttitudeMonitoring)))",
            "component": "ActiveNucleo"
        },
        "status": "",
        "_id": "cca70405-d8e6-11ef-941f-71fece653e2f"
    },
    {
        "reqid": "REQ029",
        "parent_reqid": "",
        "project": "Drone Requirements v0.4",
        "rationale": "\"Be operated both autonomously and by a joystick\"\n\nGroup: Simulation\nFunctional\nPotentially Unfeasible\nNeeds Further Specification\n\"Assuming joystick = radio.\"",
        "comments": "This one feels non-functional to me; pretty sure it's out of scope.",
        "fulltext": "",
        "semantics": {},
        "status": "",
        "_id": "cca70406-d8e6-11ef-941f-71fece653e2f"
    },
    {
        "reqid": "REQ001_2",
        "parent_reqid": "REQ001",
        "project": "Drone Requirements v0.4",
        "rationale": "",
        "comments": "",
        "fulltext": "when NucleoOneControl & NucleoFailureSwitchActiveNucleo System shall within 10 milliseconds satisfy !NucleoOneControl & NucleoTwoControl",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "within",
            "response": "satisfaction",
            "variables": [
                "NucleoOneControl",
                "NucleoFailureSwitchActiveNucleo",
                "NucleoTwoControl"
            ],
            "qualifier_word": "when",
            "pre_condition": "(NucleoOneControl & NucleoFailureSwitchActiveNucleo)",
            "regular_condition": "(NucleoOneControl & NucleoFailureSwitchActiveNucleo)",
            "conditionTextRange": [
                0,
                54
            ],
            "component_name": "System",
            "componentTextRange": [
                56,
                61
            ],
            "duration": "10",
            "timingTextRange": [
                69,
                90
            ],
            "post_condition": "(! NucleoOneControl & NucleoTwoControl)",
            "responseTextRange": [
                92,
                135
            ],
            "diagramVariables": "TC = <b><i>(NucleoOneControl & NucleoFailureSwitchActiveNucleo)</i></b>,  n = <b><i>10</i></b>, Response = <b><i>(! NucleoOneControl & NucleoTwoControl)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(NucleoOneControl & NucleoFailureSwitchActiveNucleo)</i></b> is true and any point in the interval where <b><i>(NucleoOneControl & NucleoFailureSwitchActiveNucleo)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some point with distance <= <b><i>10</i></b> from the trigger (i.e., at trigger, trigger+1, ..., or trigger+<b><i>10</i></b>). If the interval ends sooner than trigger+<b><i>10</i></b>, then RES need not hold.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_within_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "regular_condition_unexp_pt": "(NucleoOneControl & NucleoFailureSwitchActiveNucleo)",
            "regular_condition_unexp_ft": "(NucleoOneControl & NucleoFailureSwitchActiveNucleo)",
            "regular_condition_SMV_pt": "(NucleoOneControl & NucleoFailureSwitchActiveNucleo)",
            "regular_condition_SMV_ft": "(NucleoOneControl & NucleoFailureSwitchActiveNucleo)",
            "post_condition_unexp_pt": "((! NucleoOneControl) & NucleoTwoControl)",
            "post_condition_unexp_ft": "((! NucleoOneControl) & NucleoTwoControl)",
            "post_condition_SMV_pt": "((! NucleoOneControl) & NucleoTwoControl)",
            "post_condition_SMV_ft": "((! NucleoOneControl) & NucleoTwoControl)",
            "ft_fetched": "((LAST V (((! $regular_condition_unexp_ft$) & ((! LAST) & (X $regular_condition_unexp_ft$))) -> (X ((F[<=$duration$] $post_condition_unexp_ft$) | (F[<$duration$] LAST))))) & ($regular_condition_unexp_ft$ -> ((F[<=$duration$] $post_condition_unexp_ft$) | (F[<$duration$] LAST))))",
            "ft": "((LAST V (((! (NucleoOneControl & NucleoFailureSwitchActiveNucleo)) & ((! LAST) & (X (NucleoOneControl & NucleoFailureSwitchActiveNucleo)))) -> (X ((F[<=10] ((! NucleoOneControl) & NucleoTwoControl)) | (F[<10] LAST))))) & ((NucleoOneControl & NucleoFailureSwitchActiveNucleo) -> ((F[<=10] ((! NucleoOneControl) & NucleoTwoControl)) | (F[<10] LAST))))",
            "pt_fetched": "(H ((O[=$duration$] (($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | FTP)) & (! $post_condition_unexp_pt$))) -> (O[<$duration$] (FTP | $post_condition_unexp_pt$))))",
            "pt": "(H ((O[=10] (((NucleoOneControl & NucleoFailureSwitchActiveNucleo) & ((Y (! (NucleoOneControl & NucleoFailureSwitchActiveNucleo))) | FTP)) & (! ((! NucleoOneControl) & NucleoTwoControl)))) -> (O[<10] (FTP | ((! NucleoOneControl) & NucleoTwoControl)))))",
            "ptExpanded_fetched": "(H ((O[=$duration$] (($regular_condition_SMV_pt$ & (Z (! $regular_condition_SMV_pt$))) & (! $post_condition_SMV_pt$))) -> (O[<$duration$] ((! (Y TRUE)) | $post_condition_SMV_pt$))))",
            "ptExpanded": "(H ((O[10,10] (((NucleoOneControl & NucleoFailureSwitchActiveNucleo) & (Z (! (NucleoOneControl & NucleoFailureSwitchActiveNucleo)))) & (! ((! NucleoOneControl) & NucleoTwoControl)))) -> (O[0,9] ((! (Y TRUE)) | ((! NucleoOneControl) & NucleoTwoControl)))))",
            "CoCoSpecCode": "H((OT(10, 10, (((NucleoOneControl and NucleoFailureSwitchActiveNucleo) and ZtoPre(not ((NucleoOneControl and NucleoFailureSwitchActiveNucleo)))) and not ((not (NucleoOneControl) and NucleoTwoControl)))) => OT(9, 0, (not (YtoPre(true)) or (not (NucleoOneControl) and NucleoTwoControl)))))",
            "ftExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X ((F[<=$duration$] $post_condition_SMV_ft$) | (F[<$duration$] LAST))))) & ($regular_condition_SMV_ft$ -> ((F[<=$duration$] $post_condition_SMV_ft$) | (F[<$duration$] LAST))))",
            "ftExpandedUnoptimized": "((LAST V (((! (NucleoOneControl & NucleoFailureSwitchActiveNucleo)) & ((! LAST) & (X (NucleoOneControl & NucleoFailureSwitchActiveNucleo)))) -> (X ((F[0,10] ((! NucleoOneControl) & NucleoTwoControl)) | (F[0,9] LAST))))) & ((NucleoOneControl & NucleoFailureSwitchActiveNucleo) -> ((F[0,10] ((! NucleoOneControl) & NucleoTwoControl)) | (F[0,9] LAST))))",
            "ftExpanded": "((LAST V (((! (NucleoOneControl & NucleoFailureSwitchActiveNucleo)) & ((! LAST) & (X (NucleoOneControl & NucleoFailureSwitchActiveNucleo)))) -> (X ((F[0,10] ((! NucleoOneControl) & NucleoTwoControl)) | (F[0,9] LAST))))) & ((NucleoOneControl & NucleoFailureSwitchActiveNucleo) -> ((F[0,10] ((! NucleoOneControl) & NucleoTwoControl)) | (F[0,9] LAST))))",
            "ftInfAUExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X (F[<=$duration$] $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> (F[<=$duration$] $post_condition_SMV_ft$)))",
            "ftInfAUExpanded": "((G (((! (NucleoOneControl & NucleoFailureSwitchActiveNucleo)) & (X (NucleoOneControl & NucleoFailureSwitchActiveNucleo))) -> (X (F[0,10] ((! NucleoOneControl) & NucleoTwoControl))))) & ((NucleoOneControl & NucleoFailureSwitchActiveNucleo) -> (F[0,10] ((! NucleoOneControl) & NucleoTwoControl))))",
            "component": "System"
        },
        "status": "",
        "_id": "cca70407-d8e6-11ef-941f-71fece653e2f"
    },
    {
        "reqid": "REQ057",
        "parent_reqid": "",
        "project": "Drone Requirements v0.4",
        "rationale": "\"Management of energy sources\"\n\nGroup: Data Monitoring\nFunctional\nUnknown\nNeeds Further Specification\n\"What does this means?\"",
        "comments": "Agreed, this one doesn't really say anything as-is",
        "fulltext": "while MonitoringEnabled System shall always satisfy ManageEnergySources",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": [
                "MonitoringEnabled",
                "ManageEnergySources"
            ],
            "scope_mode": "(MonitoringEnabled)",
            "scopeTextRange": [
                0,
                22
            ],
            "component_name": "System",
            "componentTextRange": [
                24,
                29
            ],
            "timingTextRange": [
                37,
                42
            ],
            "post_condition": "(ManageEnergySources)",
            "responseTextRange": [
                44,
                70
            ],
            "diagramVariables": "M = <b><i>(MonitoringEnabled)</i></b>, Response = <b><i>(ManageEnergySources)</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>(MonitoringEnabled)</i></b> holds.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_null_always_satisfaction.svg",
            "scope_mode_pt": "MonitoringEnabled",
            "scope_mode_ft": "MonitoringEnabled",
            "post_condition_unexp_pt": "ManageEnergySources",
            "post_condition_unexp_ft": "ManageEnergySources",
            "post_condition_SMV_pt": "ManageEnergySources",
            "post_condition_SMV_ft": "ManageEnergySources",
            "ft_fetched": "(LAST V ($scope_mode_ft$ -> $post_condition_unexp_ft$))",
            "ft": "(LAST V (MonitoringEnabled -> ManageEnergySources))",
            "pt_fetched": "(H ($scope_mode_pt$ -> $post_condition_unexp_pt$))",
            "pt": "(H (MonitoringEnabled -> ManageEnergySources))",
            "ptExpanded_fetched": "(H ($scope_mode_pt$ -> $post_condition_SMV_pt$))",
            "ptExpanded": "(H (MonitoringEnabled -> ManageEnergySources))",
            "CoCoSpecCode": "H((MonitoringEnabled => ManageEnergySources))",
            "ftExpanded_fetched": "(LAST V ($scope_mode_ft$ -> $post_condition_SMV_ft$))",
            "ftExpandedUnoptimized": "(LAST V (MonitoringEnabled -> ManageEnergySources))",
            "ftExpanded": "(LAST V (MonitoringEnabled -> ManageEnergySources))",
            "ftInfAUExpanded_fetched": "(G ($scope_mode_ft$ -> $post_condition_SMV_ft$))",
            "ftInfAUExpanded": "(G (MonitoringEnabled -> ManageEnergySources))",
            "component": "System"
        },
        "status": "",
        "_id": "cca70408-d8e6-11ef-941f-71fece653e2f"
    },
    {
        "reqid": "REQ044",
        "parent_reqid": "",
        "project": "Drone Requirements v0.4",
        "rationale": "\"Monitor compass data (IMU)\"\n\nGroup: Data Monitoring\nFunctional\nFeasible\nNeeds Further Specification\n\"Duplicate of REQ043\"",
        "comments": "",
        "fulltext": "upon ControlLoopStart ActiveNucleo shall before ControlLoopFinish satisfy (MonitorCompassData & SendCompassData)",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "before",
            "response": "satisfaction",
            "variables": [
                "ControlLoopStart",
                "ControlLoopFinish",
                "MonitorCompassData",
                "SendCompassData"
            ],
            "qualifier_word": "upon",
            "pre_condition": "(ControlLoopStart)",
            "regular_condition": "(ControlLoopStart)",
            "conditionTextRange": [
                0,
                20
            ],
            "component_name": "ActiveNucleo",
            "componentTextRange": [
                22,
                33
            ],
            "stop_condition": "(ControlLoopFinish)",
            "timingTextRange": [
                41,
                64
            ],
            "post_condition": "(( MonitorCompassData & SendCompassData ))",
            "responseTextRange": [
                66,
                111
            ],
            "diagramVariables": "TC = <b><i>(ControlLoopStart)</i></b>, SC = <b><i>(ControlLoopFinish)</i></b>, Response = <b><i>(( MonitorCompassData & SendCompassData ))</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(ControlLoopStart)</i></b> is true and any point in the interval where <b><i>(ControlLoopStart)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at least once strictly before the state where the stop condition holds. If the stop condition never occurs in the interval, RES does not need to hold. If the stop condition holds at the trigger, the requirement is not satisfied.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_before_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "regular_condition_unexp_pt": "ControlLoopStart",
            "regular_condition_unexp_ft": "ControlLoopStart",
            "regular_condition_SMV_pt": "ControlLoopStart",
            "regular_condition_SMV_ft": "ControlLoopStart",
            "post_condition_unexp_pt": "(MonitorCompassData & SendCompassData)",
            "post_condition_unexp_ft": "(MonitorCompassData & SendCompassData)",
            "post_condition_SMV_pt": "(MonitorCompassData & SendCompassData)",
            "post_condition_SMV_ft": "(MonitorCompassData & SendCompassData)",
            "stop_condition_unexp_pt": "ControlLoopFinish",
            "stop_condition_unexp_ft": "ControlLoopFinish",
            "stop_condition_SMV_pt": "ControlLoopFinish",
            "stop_condition_SMV_ft": "ControlLoopFinish",
            "ft_fetched": "((LAST V (((! $regular_condition_unexp_ft$) & ((! LAST) & (X $regular_condition_unexp_ft$))) -> (X (($post_condition_unexp_ft$ | LAST) V (! $stop_condition_unexp_ft$))))) & ($regular_condition_unexp_ft$ -> (($post_condition_unexp_ft$ | LAST) V (! $stop_condition_unexp_ft$))))",
            "ft": "((LAST V (((! ControlLoopStart) & ((! LAST) & (X ControlLoopStart))) -> (X (((MonitorCompassData & SendCompassData) | LAST) V (! ControlLoopFinish))))) & (ControlLoopStart -> (((MonitorCompassData & SendCompassData) | LAST) V (! ControlLoopFinish))))",
            "pt_fetched": "(H ($stop_condition_unexp_pt$ -> ((H (! $regular_condition_unexp_pt$)) | (((! FTP) & (! ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | FTP)))) & (Y (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | FTP))))))))))",
            "pt": "(H (ControlLoopFinish -> ((H (! ControlLoopStart)) | (((! FTP) & (! (ControlLoopStart & ((Y (! ControlLoopStart)) | FTP)))) & (Y (! ((! (MonitorCompassData & SendCompassData)) S ((! (MonitorCompassData & SendCompassData)) & (ControlLoopStart & ((Y (! ControlLoopStart)) | FTP))))))))))",
            "ptExpanded_fetched": "(H ($stop_condition_SMV_pt$ -> ((H (! $regular_condition_SMV_pt$)) | (((Y TRUE) & (! ($regular_condition_SMV_pt$ & (Z (! $regular_condition_SMV_pt$))))) & (Y (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & (Z (! $regular_condition_SMV_pt$)))))))))))",
            "ptExpanded": "(H (ControlLoopFinish -> ((H (! ControlLoopStart)) | (((Y TRUE) & (! (ControlLoopStart & (Z (! ControlLoopStart))))) & (Y (! ((! (MonitorCompassData & SendCompassData)) S ((! (MonitorCompassData & SendCompassData)) & (ControlLoopStart & (Z (! ControlLoopStart)))))))))))",
            "CoCoSpecCode": "H((ControlLoopFinish => (H(not (ControlLoopStart)) or ((YtoPre(true) and not ((ControlLoopStart and ZtoPre(not (ControlLoopStart))))) and YtoPre(not (SI((ControlLoopStart and ZtoPre(not (ControlLoopStart))),not ((MonitorCompassData and SendCompassData)))))))))",
            "ftExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X (($post_condition_SMV_ft$ | LAST) V (! $stop_condition_SMV_ft$))))) & ($regular_condition_SMV_ft$ -> (($post_condition_SMV_ft$ | LAST) V (! $stop_condition_SMV_ft$))))",
            "ftExpandedUnoptimized": "((LAST V (((! ControlLoopStart) & ((! LAST) & (X ControlLoopStart))) -> (X (((MonitorCompassData & SendCompassData) | LAST) V (! ControlLoopFinish))))) & (ControlLoopStart -> (((MonitorCompassData & SendCompassData) | LAST) V (! ControlLoopFinish))))",
            "ftExpanded": "((LAST V (((! ControlLoopStart) & ((! LAST) & (X ControlLoopStart))) -> (X (((MonitorCompassData & SendCompassData) | LAST) V (! ControlLoopFinish))))) & (ControlLoopStart -> (((MonitorCompassData & SendCompassData) | LAST) V (! ControlLoopFinish))))",
            "ftInfAUExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X ($post_condition_SMV_ft$ V (! $stop_condition_SMV_ft$))))) & ($regular_condition_SMV_ft$ -> ($post_condition_SMV_ft$ V (! $stop_condition_SMV_ft$))))",
            "ftInfAUExpanded": "((G (((! ControlLoopStart) & (X ControlLoopStart)) -> (X ((MonitorCompassData & SendCompassData) V (! ControlLoopFinish))))) & (ControlLoopStart -> ((MonitorCompassData & SendCompassData) V (! ControlLoopFinish))))",
            "component": "ActiveNucleo"
        },
        "status": "",
        "_id": "cca70409-d8e6-11ef-941f-71fece653e2f"
    },
    {
        "reqid": "REQ064",
        "parent_reqid": "",
        "project": "Drone Requirements v0.4",
        "rationale": "\"Indicate which controller is running\"\n\nGroup: Data Monitoring\nFunctional\nFeasible\nDetailing Level: Satisfactory",
        "comments": "",
        "fulltext": "System shall always satisfy DisplayCurrentController",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": [
                "DisplayCurrentController"
            ],
            "component_name": "System",
            "componentTextRange": [
                0,
                5
            ],
            "timingTextRange": [
                13,
                18
            ],
            "post_condition": "(DisplayCurrentController)",
            "responseTextRange": [
                20,
                51
            ],
            "diagramVariables": "Response = <b><i>(DisplayCurrentController)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_coco": "BAD_COCO",
            "scope_mode_ft": "BAD_FT",
            "post_condition_unexp_pt": "DisplayCurrentController",
            "post_condition_unexp_ft": "DisplayCurrentController",
            "post_condition_SMV_pt": "DisplayCurrentController",
            "post_condition_SMV_ft": "DisplayCurrentController",
            "post_condition_coco_smv": "DisplayCurrentController",
            "post_condition_coco": "DisplayCurrentController",
            "ft_fetched": "(LAST V $post_condition_unexp_ft$)",
            "ft": "(LAST V DisplayCurrentController)",
            "pt_fetched": "(H $post_condition_unexp_pt$)",
            "pt": "(H DisplayCurrentController)",
            "ptExpanded_fetched": "(H $post_condition_SMV_pt$)",
            "ptExpanded": "(H DisplayCurrentController)",
            "ptFinBtwExpanded_fetched": "(H $post_condition_SMV_pt$)",
            "ptFinBtwExpanded": "(H DisplayCurrentController)",
            "ftExpanded_fetched": "(LAST V $post_condition_SMV_ft$)",
            "ftExpanded": "(LAST V DisplayCurrentController)",
            "ftInfAUExpanded_fetched": "(G $post_condition_SMV_ft$)",
            "ftInfAUExpanded": "(G DisplayCurrentController)",
            "ftInfBtwExpanded_fetched": "(G $post_condition_SMV_ft$)",
            "ftInfBtwExpanded": "(G DisplayCurrentController)",
            "ftFinBtwExpanded_fetched": "(LAST V $post_condition_SMV_ft$)",
            "ftFinBtwExpanded": "(LAST V DisplayCurrentController)",
            "CoCoSpecCode_fetched": "(H($post_condition_coco$))",
            "CoCoSpecCode": "(H(DisplayCurrentController))",
            "component": "System"
        },
        "status": "",
        "_id": "cca7040a-d8e6-11ef-941f-71fece653e2f"
    },
    {
        "reqid": "REQ019",
        "parent_reqid": "",
        "project": "Drone Requirements v0.4",
        "rationale": "\"Present the time spent in the control algorithm\"\n\nGroup: Performance\nFunctional\nFeasible\nDetailing Level: Satisfactory\n\"Assuming all control algorithms should be timed.\"\n\n26/09/2024 -- Changed the this requirement to a more specifiable version:\nThe control algorithm will complete within 6 milliseconds",
        "comments": "Original FRETish version: \"System shall always satisfy DisplayControlAlgorithmTime\"\n\n26/09/2024 -- Changed the this requirement to a more specifiable version\n6ms is something of a placeholder time, it is an estimated upper bound for how long could be allowed",
        "fulltext": "upon ControlAlgorithmStart System shall within 6 milliseconds satisfy ControlAlgorithmFinish",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "within",
            "response": "satisfaction",
            "variables": [
                "ControlAlgorithmStart",
                "ControlAlgorithmFinish"
            ],
            "qualifier_word": "upon",
            "pre_condition": "(ControlAlgorithmStart)",
            "regular_condition": "(ControlAlgorithmStart)",
            "conditionTextRange": [
                0,
                25
            ],
            "component_name": "System",
            "componentTextRange": [
                27,
                32
            ],
            "duration": "6",
            "timingTextRange": [
                40,
                60
            ],
            "post_condition": "(ControlAlgorithmFinish)",
            "responseTextRange": [
                62,
                91
            ],
            "diagramVariables": "TC = <b><i>(ControlAlgorithmStart)</i></b>,  n = <b><i>6</i></b>, Response = <b><i>(ControlAlgorithmFinish)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(ControlAlgorithmStart)</i></b> is true and any point in the interval where <b><i>(ControlAlgorithmStart)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some point with distance <= <b><i>6</i></b> from the trigger (i.e., at trigger, trigger+1, ..., or trigger+<b><i>6</i></b>). If the interval ends sooner than trigger+<b><i>6</i></b>, then RES need not hold.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_within_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "regular_condition_unexp_pt": "ControlAlgorithmStart",
            "regular_condition_unexp_ft": "ControlAlgorithmStart",
            "regular_condition_SMV_pt": "ControlAlgorithmStart",
            "regular_condition_SMV_ft": "ControlAlgorithmStart",
            "post_condition_unexp_pt": "ControlAlgorithmFinish",
            "post_condition_unexp_ft": "ControlAlgorithmFinish",
            "post_condition_SMV_pt": "ControlAlgorithmFinish",
            "post_condition_SMV_ft": "ControlAlgorithmFinish",
            "ft_fetched": "((LAST V (((! $regular_condition_unexp_ft$) & ((! LAST) & (X $regular_condition_unexp_ft$))) -> (X ((F[<=$duration$] $post_condition_unexp_ft$) | (F[<$duration$] LAST))))) & ($regular_condition_unexp_ft$ -> ((F[<=$duration$] $post_condition_unexp_ft$) | (F[<$duration$] LAST))))",
            "ft": "((LAST V (((! ControlAlgorithmStart) & ((! LAST) & (X ControlAlgorithmStart))) -> (X ((F[<=6] ControlAlgorithmFinish) | (F[<6] LAST))))) & (ControlAlgorithmStart -> ((F[<=6] ControlAlgorithmFinish) | (F[<6] LAST))))",
            "pt_fetched": "(H ((O[=$duration$] (($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | FTP)) & (! $post_condition_unexp_pt$))) -> (O[<$duration$] (FTP | $post_condition_unexp_pt$))))",
            "pt": "(H ((O[=6] ((ControlAlgorithmStart & ((Y (! ControlAlgorithmStart)) | FTP)) & (! ControlAlgorithmFinish))) -> (O[<6] (FTP | ControlAlgorithmFinish))))",
            "ptExpanded_fetched": "(H ((O[=$duration$] (($regular_condition_SMV_pt$ & (Z (! $regular_condition_SMV_pt$))) & (! $post_condition_SMV_pt$))) -> (O[<$duration$] ((! (Y TRUE)) | $post_condition_SMV_pt$))))",
            "ptExpanded": "(H ((O[6,6] ((ControlAlgorithmStart & (Z (! ControlAlgorithmStart))) & (! ControlAlgorithmFinish))) -> (O[0,5] ((! (Y TRUE)) | ControlAlgorithmFinish))))",
            "CoCoSpecCode": "H((OT(6, 6, ((ControlAlgorithmStart and ZtoPre(not (ControlAlgorithmStart))) and not (ControlAlgorithmFinish))) => OT(5, 0, (not (YtoPre(true)) or ControlAlgorithmFinish))))",
            "ftExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X ((F[<=$duration$] $post_condition_SMV_ft$) | (F[<$duration$] LAST))))) & ($regular_condition_SMV_ft$ -> ((F[<=$duration$] $post_condition_SMV_ft$) | (F[<$duration$] LAST))))",
            "ftExpandedUnoptimized": "((LAST V (((! ControlAlgorithmStart) & ((! LAST) & (X ControlAlgorithmStart))) -> (X ((F[0,6] ControlAlgorithmFinish) | (F[0,5] LAST))))) & (ControlAlgorithmStart -> ((F[0,6] ControlAlgorithmFinish) | (F[0,5] LAST))))",
            "ftExpanded": "((LAST V (((! ControlAlgorithmStart) & ((! LAST) & (X ControlAlgorithmStart))) -> (X ((F[0,6] ControlAlgorithmFinish) | (F[0,5] LAST))))) & (ControlAlgorithmStart -> ((F[0,6] ControlAlgorithmFinish) | (F[0,5] LAST))))",
            "ftInfAUExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X (F[<=$duration$] $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> (F[<=$duration$] $post_condition_SMV_ft$)))",
            "ftInfAUExpanded": "((G (((! ControlAlgorithmStart) & (X ControlAlgorithmStart)) -> (X (F[0,6] ControlAlgorithmFinish)))) & (ControlAlgorithmStart -> (F[0,6] ControlAlgorithmFinish)))",
            "component": "System"
        },
        "status": "",
        "_id": "cca7040b-d8e6-11ef-941f-71fece653e2f"
    },
    {
        "reqid": "REQ022",
        "parent_reqid": "",
        "project": "Drone Requirements v0.4",
        "rationale": "\"Be open source, maintainable and extensible\"\n\nGroup: TBD\nNon-functional\nPotentially Unfeasible\nNeeds Further Specification\n\"Need to check with Raffo with UAV source code will be opened.\"",
        "comments": "Non-functional requirement: Out of scope",
        "fulltext": "",
        "semantics": {},
        "status": "",
        "_id": "cca7040c-d8e6-11ef-941f-71fece653e2f"
    },
    {
        "reqid": "REQ053",
        "parent_reqid": "",
        "project": "Drone Requirements v0.4",
        "rationale": "\"Monitor maximum and average temperatures of the components\"\n\nGroup: Data Monitoring\nFunctional\nUnfeasible\nNeeds Further Specification\nNot all components have temperature sensors.",
        "comments": "",
        "fulltext": "upon ControlLoopStart ActiveNucleo shall before ControlLoopFinish satisfy MonitorComponentsTemeratures & SendComponentsTemperaturesData",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "before",
            "response": "satisfaction",
            "variables": [
                "ControlLoopStart",
                "ControlLoopFinish",
                "MonitorComponentsTemeratures",
                "SendComponentsTemperaturesData"
            ],
            "qualifier_word": "upon",
            "pre_condition": "(ControlLoopStart)",
            "regular_condition": "(ControlLoopStart)",
            "conditionTextRange": [
                0,
                20
            ],
            "component_name": "ActiveNucleo",
            "componentTextRange": [
                22,
                33
            ],
            "stop_condition": "(ControlLoopFinish)",
            "timingTextRange": [
                41,
                64
            ],
            "post_condition": "(MonitorComponentsTemeratures & SendComponentsTemperaturesData)",
            "responseTextRange": [
                66,
                134
            ],
            "diagramVariables": "TC = <b><i>(ControlLoopStart)</i></b>, SC = <b><i>(ControlLoopFinish)</i></b>, Response = <b><i>(MonitorComponentsTemeratures & SendComponentsTemperaturesData)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(ControlLoopStart)</i></b> is true and any point in the interval where <b><i>(ControlLoopStart)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at least once strictly before the state where the stop condition holds. If the stop condition never occurs in the interval, RES does not need to hold. If the stop condition holds at the trigger, the requirement is not satisfied.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_before_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "regular_condition_unexp_pt": "ControlLoopStart",
            "regular_condition_unexp_ft": "ControlLoopStart",
            "regular_condition_SMV_pt": "ControlLoopStart",
            "regular_condition_SMV_ft": "ControlLoopStart",
            "post_condition_unexp_pt": "(MonitorComponentsTemeratures & SendComponentsTemperaturesData)",
            "post_condition_unexp_ft": "(MonitorComponentsTemeratures & SendComponentsTemperaturesData)",
            "post_condition_SMV_pt": "(MonitorComponentsTemeratures & SendComponentsTemperaturesData)",
            "post_condition_SMV_ft": "(MonitorComponentsTemeratures & SendComponentsTemperaturesData)",
            "stop_condition_unexp_pt": "ControlLoopFinish",
            "stop_condition_unexp_ft": "ControlLoopFinish",
            "stop_condition_SMV_pt": "ControlLoopFinish",
            "stop_condition_SMV_ft": "ControlLoopFinish",
            "ft_fetched": "((LAST V (((! $regular_condition_unexp_ft$) & ((! LAST) & (X $regular_condition_unexp_ft$))) -> (X (($post_condition_unexp_ft$ | LAST) V (! $stop_condition_unexp_ft$))))) & ($regular_condition_unexp_ft$ -> (($post_condition_unexp_ft$ | LAST) V (! $stop_condition_unexp_ft$))))",
            "ft": "((LAST V (((! ControlLoopStart) & ((! LAST) & (X ControlLoopStart))) -> (X (((MonitorComponentsTemeratures & SendComponentsTemperaturesData) | LAST) V (! ControlLoopFinish))))) & (ControlLoopStart -> (((MonitorComponentsTemeratures & SendComponentsTemperaturesData) | LAST) V (! ControlLoopFinish))))",
            "pt_fetched": "(H ($stop_condition_unexp_pt$ -> ((H (! $regular_condition_unexp_pt$)) | (((! FTP) & (! ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | FTP)))) & (Y (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | FTP))))))))))",
            "pt": "(H (ControlLoopFinish -> ((H (! ControlLoopStart)) | (((! FTP) & (! (ControlLoopStart & ((Y (! ControlLoopStart)) | FTP)))) & (Y (! ((! (MonitorComponentsTemeratures & SendComponentsTemperaturesData)) S ((! (MonitorComponentsTemeratures & SendComponentsTemperaturesData)) & (ControlLoopStart & ((Y (! ControlLoopStart)) | FTP))))))))))",
            "ptExpanded_fetched": "(H ($stop_condition_SMV_pt$ -> ((H (! $regular_condition_SMV_pt$)) | (((Y TRUE) & (! ($regular_condition_SMV_pt$ & (Z (! $regular_condition_SMV_pt$))))) & (Y (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & (Z (! $regular_condition_SMV_pt$)))))))))))",
            "ptExpanded": "(H (ControlLoopFinish -> ((H (! ControlLoopStart)) | (((Y TRUE) & (! (ControlLoopStart & (Z (! ControlLoopStart))))) & (Y (! ((! (MonitorComponentsTemeratures & SendComponentsTemperaturesData)) S ((! (MonitorComponentsTemeratures & SendComponentsTemperaturesData)) & (ControlLoopStart & (Z (! ControlLoopStart)))))))))))",
            "CoCoSpecCode": "H((ControlLoopFinish => (H(not (ControlLoopStart)) or ((YtoPre(true) and not ((ControlLoopStart and ZtoPre(not (ControlLoopStart))))) and YtoPre(not (SI((ControlLoopStart and ZtoPre(not (ControlLoopStart))),not ((MonitorComponentsTemeratures and SendComponentsTemperaturesData)))))))))",
            "ftExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X (($post_condition_SMV_ft$ | LAST) V (! $stop_condition_SMV_ft$))))) & ($regular_condition_SMV_ft$ -> (($post_condition_SMV_ft$ | LAST) V (! $stop_condition_SMV_ft$))))",
            "ftExpandedUnoptimized": "((LAST V (((! ControlLoopStart) & ((! LAST) & (X ControlLoopStart))) -> (X (((MonitorComponentsTemeratures & SendComponentsTemperaturesData) | LAST) V (! ControlLoopFinish))))) & (ControlLoopStart -> (((MonitorComponentsTemeratures & SendComponentsTemperaturesData) | LAST) V (! ControlLoopFinish))))",
            "ftExpanded": "((LAST V (((! ControlLoopStart) & ((! LAST) & (X ControlLoopStart))) -> (X (((MonitorComponentsTemeratures & SendComponentsTemperaturesData) | LAST) V (! ControlLoopFinish))))) & (ControlLoopStart -> (((MonitorComponentsTemeratures & SendComponentsTemperaturesData) | LAST) V (! ControlLoopFinish))))",
            "ftInfAUExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X ($post_condition_SMV_ft$ V (! $stop_condition_SMV_ft$))))) & ($regular_condition_SMV_ft$ -> ($post_condition_SMV_ft$ V (! $stop_condition_SMV_ft$))))",
            "ftInfAUExpanded": "((G (((! ControlLoopStart) & (X ControlLoopStart)) -> (X ((MonitorComponentsTemeratures & SendComponentsTemperaturesData) V (! ControlLoopFinish))))) & (ControlLoopStart -> ((MonitorComponentsTemeratures & SendComponentsTemperaturesData) V (! ControlLoopFinish))))",
            "component": "ActiveNucleo"
        },
        "status": "",
        "_id": "cca7040d-d8e6-11ef-941f-71fece653e2f"
    },
    {
        "reqid": "REQ008",
        "parent_reqid": "",
        "project": "Drone Requirements v0.4",
        "rationale": "\"Save any desired simulation data\"\n\nGroup: Monitoring\nFunctional\nFeasible\nNeeds Further Specification",
        "comments": "I wonder if this would be best captured with a timing condition after the simulation in performed; e.g. \"when SimulationDone System shall within x ticks satisfy SimulationResultSaved\"\n\nv0.2: 100 is just a placeholder number, FRET doesn't let you put a variable into the Timing constraint.",
        "fulltext": "after SimulationMode System shall within 10 milliseconds satisfy SimulationDataSaved",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "after",
                "exclusive": false,
                "required": false
            },
            "condition": "null",
            "timing": "within",
            "response": "satisfaction",
            "variables": [
                "SimulationMode",
                "SimulationDataSaved"
            ],
            "scope_mode": "SimulationMode",
            "scopeTextRange": [
                0,
                19
            ],
            "component_name": "System",
            "componentTextRange": [
                21,
                26
            ],
            "duration": "10",
            "timingTextRange": [
                34,
                55
            ],
            "post_condition": "(SimulationDataSaved)",
            "responseTextRange": [
                57,
                83
            ],
            "diagramVariables": "M = <b><i>SimulationMode</i></b>,  n = <b><i>10</i></b>, Response = <b><i>(SimulationDataSaved)</i></b>.",
            "description": "ENFORCED: in the interval (if defined) starting strictly after the first <b><i>SimulationMode</i></b> interval and spanning to the end of the execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some point with distance <= <b><i>10</i></b> from the trigger (i.e., at trigger, trigger+1, ..., or trigger+<b><i>10</i></b>). If the interval ends sooner than trigger+<b><i>10</i></b>, then RES need not hold.",
            "diagram": "_media/user-interface/examples/svgDiagrams/after_null_within_satisfaction.svg",
            "scope_mode_pt": "SimulationMode",
            "scope_mode_ft": "SimulationMode",
            "post_condition_unexp_pt": "SimulationDataSaved",
            "post_condition_unexp_ft": "SimulationDataSaved",
            "post_condition_SMV_pt": "SimulationDataSaved",
            "post_condition_SMV_ft": "SimulationDataSaved",
            "ft_fetched": "(((! FLin_$scope_mode_ft$) U (FLin_$scope_mode_ft$ & (X ((F[<=$duration$] $post_condition_unexp_ft$) | (F[<$duration$] LAST))))) | (LAST V (! FLin_$scope_mode_ft$)))",
            "ft": "(((! FLin_SimulationMode) U (FLin_SimulationMode & (X ((F[<=10] SimulationDataSaved) | (F[<10] LAST))))) | (LAST V (! FLin_SimulationMode)))",
            "pt_fetched": "((O FLin_$scope_mode_pt$) -> ((((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & FLin_$scope_mode_pt$)) -> (O[<$duration$] FLin_$scope_mode_pt$)) S ((((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & FLin_$scope_mode_pt$)) -> (O[<$duration$] FLin_$scope_mode_pt$)) & FLin_$scope_mode_pt$)))",
            "pt": "((O FLin_SimulationMode) -> ((((! SimulationDataSaved) S ((! SimulationDataSaved) & FLin_SimulationMode)) -> (O[<10] FLin_SimulationMode)) S ((((! SimulationDataSaved) S ((! SimulationDataSaved) & FLin_SimulationMode)) -> (O[<10] FLin_SimulationMode)) & FLin_SimulationMode)))",
            "ptExpanded_fetched": "((O (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) & (Y (H (! ((! $scope_mode_pt$) & (Y $scope_mode_pt$))))))) -> ((((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) & (Y (H (! ((! $scope_mode_pt$) & (Y $scope_mode_pt$)))))))) -> (O[<$duration$] (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) & (Y (H (! ((! $scope_mode_pt$) & (Y $scope_mode_pt$)))))))) S ((((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) & (Y (H (! ((! $scope_mode_pt$) & (Y $scope_mode_pt$)))))))) -> (O[<$duration$] (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) & (Y (H (! ((! $scope_mode_pt$) & (Y $scope_mode_pt$)))))))) & (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) & (Y (H (! ((! $scope_mode_pt$) & (Y $scope_mode_pt$)))))))))",
            "ptExpanded": "((O (((! SimulationMode) & (Y SimulationMode)) & (Y (H (! ((! SimulationMode) & (Y SimulationMode))))))) -> ((((! SimulationDataSaved) S ((! SimulationDataSaved) & (((! SimulationMode) & (Y SimulationMode)) & (Y (H (! ((! SimulationMode) & (Y SimulationMode)))))))) -> (O[0,9] (((! SimulationMode) & (Y SimulationMode)) & (Y (H (! ((! SimulationMode) & (Y SimulationMode)))))))) S ((((! SimulationDataSaved) S ((! SimulationDataSaved) & (((! SimulationMode) & (Y SimulationMode)) & (Y (H (! ((! SimulationMode) & (Y SimulationMode)))))))) -> (O[0,9] (((! SimulationMode) & (Y SimulationMode)) & (Y (H (! ((! SimulationMode) & (Y SimulationMode)))))))) & (((! SimulationMode) & (Y SimulationMode)) & (Y (H (! ((! SimulationMode) & (Y SimulationMode)))))))))",
            "CoCoSpecCode": "(O(((not (SimulationMode) and YtoPre(SimulationMode)) and YtoPre(H(not ((not (SimulationMode) and YtoPre(SimulationMode))))))) => SI(((not (SimulationMode) and YtoPre(SimulationMode)) and YtoPre(H(not ((not (SimulationMode) and YtoPre(SimulationMode)))))),(SI(((not (SimulationMode) and YtoPre(SimulationMode)) and YtoPre(H(not ((not (SimulationMode) and YtoPre(SimulationMode)))))),not (SimulationDataSaved)) => OT(9, 0, ((not (SimulationMode) and YtoPre(SimulationMode)) and YtoPre(H(not ((not (SimulationMode) and YtoPre(SimulationMode))))))))))",
            "ftExpanded_fetched": "(((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) & (X ((F[<=$duration$] $post_condition_SMV_ft$) | (F[<$duration$] LAST))))) | (LAST V (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))",
            "ftExpandedUnoptimized": "(((! ((SimulationMode & (! LAST)) & (X (! SimulationMode)))) U (((SimulationMode & (! LAST)) & (X (! SimulationMode))) & (X ((F[0,10] SimulationDataSaved) | (F[0,9] LAST))))) | (LAST V (! ((SimulationMode & (! LAST)) & (X (! SimulationMode))))))",
            "ftExpanded": "(((! ((SimulationMode & (! LAST)) & (X (! SimulationMode)))) U (((SimulationMode & (! LAST)) & (X (! SimulationMode))) & (X ((F[0,10] SimulationDataSaved) | (F[0,9] LAST))))) | (LAST V (! ((SimulationMode & (! LAST)) & (X (! SimulationMode))))))",
            "ftInfAUExpanded_fetched": "(((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) & (X (F[<=$duration$] $post_condition_SMV_ft$)))) | (G (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))",
            "ftInfAUExpanded": "(((! (SimulationMode & (X (! SimulationMode)))) U ((SimulationMode & (X (! SimulationMode))) & (X (F[0,10] SimulationDataSaved)))) | (G (! (SimulationMode & (X (! SimulationMode))))))",
            "component": "System"
        },
        "status": "",
        "_id": "cca7040e-d8e6-11ef-941f-71fece653e2f"
    },
    {
        "reqid": "REQ039",
        "parent_reqid": "",
        "project": "Drone Requirements v0.4",
        "rationale": "\"Monitor altitude\"\n\nGroup: Data Monitoring\nFunctional\nFeasible\nNeeds Further Specification",
        "comments": "Feels like a duplicate/sub-requirement of REQ047",
        "fulltext": "upon ControlLoopStart ActiveNucleo shall before ControlLoopFinish satisfy (MonitorBarometerAltitude & SendBarometerAltitudeData)",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "before",
            "response": "satisfaction",
            "variables": [
                "ControlLoopStart",
                "ControlLoopFinish",
                "MonitorBarometerAltitude",
                "SendBarometerAltitudeData"
            ],
            "qualifier_word": "upon",
            "pre_condition": "(ControlLoopStart)",
            "regular_condition": "(ControlLoopStart)",
            "conditionTextRange": [
                0,
                20
            ],
            "component_name": "ActiveNucleo",
            "componentTextRange": [
                22,
                33
            ],
            "stop_condition": "(ControlLoopFinish)",
            "timingTextRange": [
                41,
                64
            ],
            "post_condition": "(( MonitorBarometerAltitude & SendBarometerAltitudeData ))",
            "responseTextRange": [
                66,
                127
            ],
            "diagramVariables": "TC = <b><i>(ControlLoopStart)</i></b>, SC = <b><i>(ControlLoopFinish)</i></b>, Response = <b><i>(( MonitorBarometerAltitude & SendBarometerAltitudeData ))</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(ControlLoopStart)</i></b> is true and any point in the interval where <b><i>(ControlLoopStart)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at least once strictly before the state where the stop condition holds. If the stop condition never occurs in the interval, RES does not need to hold. If the stop condition holds at the trigger, the requirement is not satisfied.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_before_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "regular_condition_unexp_pt": "ControlLoopStart",
            "regular_condition_unexp_ft": "ControlLoopStart",
            "regular_condition_SMV_pt": "ControlLoopStart",
            "regular_condition_SMV_ft": "ControlLoopStart",
            "post_condition_unexp_pt": "(MonitorBarometerAltitude & SendBarometerAltitudeData)",
            "post_condition_unexp_ft": "(MonitorBarometerAltitude & SendBarometerAltitudeData)",
            "post_condition_SMV_pt": "(MonitorBarometerAltitude & SendBarometerAltitudeData)",
            "post_condition_SMV_ft": "(MonitorBarometerAltitude & SendBarometerAltitudeData)",
            "stop_condition_unexp_pt": "ControlLoopFinish",
            "stop_condition_unexp_ft": "ControlLoopFinish",
            "stop_condition_SMV_pt": "ControlLoopFinish",
            "stop_condition_SMV_ft": "ControlLoopFinish",
            "ft_fetched": "((LAST V (((! $regular_condition_unexp_ft$) & ((! LAST) & (X $regular_condition_unexp_ft$))) -> (X (($post_condition_unexp_ft$ | LAST) V (! $stop_condition_unexp_ft$))))) & ($regular_condition_unexp_ft$ -> (($post_condition_unexp_ft$ | LAST) V (! $stop_condition_unexp_ft$))))",
            "ft": "((LAST V (((! ControlLoopStart) & ((! LAST) & (X ControlLoopStart))) -> (X (((MonitorBarometerAltitude & SendBarometerAltitudeData) | LAST) V (! ControlLoopFinish))))) & (ControlLoopStart -> (((MonitorBarometerAltitude & SendBarometerAltitudeData) | LAST) V (! ControlLoopFinish))))",
            "pt_fetched": "(H ($stop_condition_unexp_pt$ -> ((H (! $regular_condition_unexp_pt$)) | (((! FTP) & (! ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | FTP)))) & (Y (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | FTP))))))))))",
            "pt": "(H (ControlLoopFinish -> ((H (! ControlLoopStart)) | (((! FTP) & (! (ControlLoopStart & ((Y (! ControlLoopStart)) | FTP)))) & (Y (! ((! (MonitorBarometerAltitude & SendBarometerAltitudeData)) S ((! (MonitorBarometerAltitude & SendBarometerAltitudeData)) & (ControlLoopStart & ((Y (! ControlLoopStart)) | FTP))))))))))",
            "ptExpanded_fetched": "(H ($stop_condition_SMV_pt$ -> ((H (! $regular_condition_SMV_pt$)) | (((Y TRUE) & (! ($regular_condition_SMV_pt$ & (Z (! $regular_condition_SMV_pt$))))) & (Y (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & (Z (! $regular_condition_SMV_pt$)))))))))))",
            "ptExpanded": "(H (ControlLoopFinish -> ((H (! ControlLoopStart)) | (((Y TRUE) & (! (ControlLoopStart & (Z (! ControlLoopStart))))) & (Y (! ((! (MonitorBarometerAltitude & SendBarometerAltitudeData)) S ((! (MonitorBarometerAltitude & SendBarometerAltitudeData)) & (ControlLoopStart & (Z (! ControlLoopStart)))))))))))",
            "CoCoSpecCode": "H((ControlLoopFinish => (H(not (ControlLoopStart)) or ((YtoPre(true) and not ((ControlLoopStart and ZtoPre(not (ControlLoopStart))))) and YtoPre(not (SI((ControlLoopStart and ZtoPre(not (ControlLoopStart))),not ((MonitorBarometerAltitude and SendBarometerAltitudeData)))))))))",
            "ftExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X (($post_condition_SMV_ft$ | LAST) V (! $stop_condition_SMV_ft$))))) & ($regular_condition_SMV_ft$ -> (($post_condition_SMV_ft$ | LAST) V (! $stop_condition_SMV_ft$))))",
            "ftExpandedUnoptimized": "((LAST V (((! ControlLoopStart) & ((! LAST) & (X ControlLoopStart))) -> (X (((MonitorBarometerAltitude & SendBarometerAltitudeData) | LAST) V (! ControlLoopFinish))))) & (ControlLoopStart -> (((MonitorBarometerAltitude & SendBarometerAltitudeData) | LAST) V (! ControlLoopFinish))))",
            "ftExpanded": "((LAST V (((! ControlLoopStart) & ((! LAST) & (X ControlLoopStart))) -> (X (((MonitorBarometerAltitude & SendBarometerAltitudeData) | LAST) V (! ControlLoopFinish))))) & (ControlLoopStart -> (((MonitorBarometerAltitude & SendBarometerAltitudeData) | LAST) V (! ControlLoopFinish))))",
            "ftInfAUExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X ($post_condition_SMV_ft$ V (! $stop_condition_SMV_ft$))))) & ($regular_condition_SMV_ft$ -> ($post_condition_SMV_ft$ V (! $stop_condition_SMV_ft$))))",
            "ftInfAUExpanded": "((G (((! ControlLoopStart) & (X ControlLoopStart)) -> (X ((MonitorBarometerAltitude & SendBarometerAltitudeData) V (! ControlLoopFinish))))) & (ControlLoopStart -> ((MonitorBarometerAltitude & SendBarometerAltitudeData) V (! ControlLoopFinish))))",
            "component": "ActiveNucleo"
        },
        "status": "",
        "_id": "cca7040f-d8e6-11ef-941f-71fece653e2f"
    },
    {
        "reqid": "REQ049",
        "parent_reqid": "",
        "project": "Drone Requirements v0.4",
        "rationale": "\"GPS base station for RTK functionality\"\n\nGroup: Data Monitoring\nFunctional\nFeasible\nNeeds Further Specification",
        "comments": "Not sure what to do with this one, doesn't seem like a behavioural requirement",
        "fulltext": "",
        "semantics": {},
        "status": "",
        "_id": "cca70410-d8e6-11ef-941f-71fece653e2f"
    },
    {
        "reqid": "REQ011",
        "parent_reqid": "",
        "project": "Drone Requirements v0.4",
        "rationale": "\"Provide power consumption data\"\n\nGroup: Monitoring\nFunctional\nFeasible\nNeeds Further Specification",
        "comments": "v0.2: Added \"always\" timing and renamed the variable based on discussion",
        "fulltext": "ActiveNucleo shall always satisfy MonitorPowerConsumption & ReturnPowerConsumptionData",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": [
                "MonitorPowerConsumption",
                "ReturnPowerConsumptionData"
            ],
            "component_name": "ActiveNucleo",
            "componentTextRange": [
                0,
                11
            ],
            "timingTextRange": [
                19,
                24
            ],
            "post_condition": "(MonitorPowerConsumption & ReturnPowerConsumptionData)",
            "responseTextRange": [
                26,
                85
            ],
            "diagramVariables": "Response = <b><i>(MonitorPowerConsumption & ReturnPowerConsumptionData)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "post_condition_unexp_pt": "(MonitorPowerConsumption & ReturnPowerConsumptionData)",
            "post_condition_unexp_ft": "(MonitorPowerConsumption & ReturnPowerConsumptionData)",
            "post_condition_SMV_pt": "(MonitorPowerConsumption & ReturnPowerConsumptionData)",
            "post_condition_SMV_ft": "(MonitorPowerConsumption & ReturnPowerConsumptionData)",
            "ft_fetched": "(LAST V $post_condition_unexp_ft$)",
            "ft": "(LAST V (MonitorPowerConsumption & ReturnPowerConsumptionData))",
            "pt_fetched": "(H $post_condition_unexp_pt$)",
            "pt": "(H (MonitorPowerConsumption & ReturnPowerConsumptionData))",
            "ptExpanded_fetched": "(H $post_condition_SMV_pt$)",
            "ptExpanded": "(H (MonitorPowerConsumption & ReturnPowerConsumptionData))",
            "CoCoSpecCode": "H((MonitorPowerConsumption and ReturnPowerConsumptionData))",
            "ftExpanded_fetched": "(LAST V $post_condition_SMV_ft$)",
            "ftExpandedUnoptimized": "(LAST V (MonitorPowerConsumption & ReturnPowerConsumptionData))",
            "ftExpanded": "(LAST V (MonitorPowerConsumption & ReturnPowerConsumptionData))",
            "ftInfAUExpanded_fetched": "(G $post_condition_SMV_ft$)",
            "ftInfAUExpanded": "(G (MonitorPowerConsumption & ReturnPowerConsumptionData))",
            "component": "ActiveNucleo"
        },
        "status": "",
        "_id": "cca70411-d8e6-11ef-941f-71fece653e2f"
    },
    {
        "reqid": "REQ015",
        "parent_reqid": "",
        "project": "Drone Requirements v0.4",
        "rationale": "\"During HIL simulations the Gazebo should run using real-time clock\"\n\nSimulation\nFunctional\nFeasible\nNeeds Further Specification\n",
        "comments": "v0.2: Is HIL Simulation different from how simulation is mentioned in other requirements?",
        "fulltext": "during HILSimulation Gazebo shall always satisfy UseRealTimeClock",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": [
                "HILSimulation",
                "UseRealTimeClock"
            ],
            "scope_mode": "HILSimulation",
            "scopeTextRange": [
                0,
                19
            ],
            "component_name": "Gazebo",
            "componentTextRange": [
                21,
                26
            ],
            "timingTextRange": [
                34,
                39
            ],
            "post_condition": "(UseRealTimeClock)",
            "responseTextRange": [
                41,
                64
            ],
            "diagramVariables": "M = <b><i>HILSimulation</i></b>, Response = <b><i>(UseRealTimeClock)</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>HILSimulation</i></b> holds.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_null_always_satisfaction.svg",
            "scope_mode_pt": "HILSimulation",
            "scope_mode_ft": "HILSimulation",
            "post_condition_unexp_pt": "UseRealTimeClock",
            "post_condition_unexp_ft": "UseRealTimeClock",
            "post_condition_SMV_pt": "UseRealTimeClock",
            "post_condition_SMV_ft": "UseRealTimeClock",
            "ft_fetched": "(LAST V ($scope_mode_ft$ -> $post_condition_unexp_ft$))",
            "ft": "(LAST V (HILSimulation -> UseRealTimeClock))",
            "pt_fetched": "(H ($scope_mode_pt$ -> $post_condition_unexp_pt$))",
            "pt": "(H (HILSimulation -> UseRealTimeClock))",
            "ptExpanded_fetched": "(H ($scope_mode_pt$ -> $post_condition_SMV_pt$))",
            "ptExpanded": "(H (HILSimulation -> UseRealTimeClock))",
            "CoCoSpecCode": "H((HILSimulation => UseRealTimeClock))",
            "ftExpanded_fetched": "(LAST V ($scope_mode_ft$ -> $post_condition_SMV_ft$))",
            "ftExpandedUnoptimized": "(LAST V (HILSimulation -> UseRealTimeClock))",
            "ftExpanded": "(LAST V (HILSimulation -> UseRealTimeClock))",
            "ftInfAUExpanded_fetched": "(G ($scope_mode_ft$ -> $post_condition_SMV_ft$))",
            "ftInfAUExpanded": "(G (HILSimulation -> UseRealTimeClock))",
            "component": "Gazebo"
        },
        "status": "",
        "_id": "cca70412-d8e6-11ef-941f-71fece653e2f"
    },
    {
        "reqid": "REQ008_2",
        "parent_reqid": "REQ008",
        "project": "Drone Requirements v0.4",
        "rationale": "",
        "comments": "",
        "fulltext": "after SimulationMode Jetson shall within 10 milliseconds satisfy SimulationDataRecorded & NucleoReceivedData",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "after",
                "exclusive": false,
                "required": false
            },
            "condition": "null",
            "timing": "within",
            "response": "satisfaction",
            "variables": [
                "SimulationMode",
                "SimulationDataRecorded",
                "NucleoReceivedData"
            ],
            "scope_mode": "SimulationMode",
            "scopeTextRange": [
                0,
                19
            ],
            "component_name": "Jetson",
            "componentTextRange": [
                21,
                26
            ],
            "duration": "10",
            "timingTextRange": [
                34,
                55
            ],
            "post_condition": "(SimulationDataRecorded & NucleoReceivedData)",
            "responseTextRange": [
                57,
                107
            ],
            "diagramVariables": "M = <b><i>SimulationMode</i></b>,  n = <b><i>10</i></b>, Response = <b><i>(SimulationDataRecorded & NucleoReceivedData)</i></b>.",
            "description": "ENFORCED: in the interval (if defined) starting strictly after the first <b><i>SimulationMode</i></b> interval and spanning to the end of the execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some point with distance <= <b><i>10</i></b> from the trigger (i.e., at trigger, trigger+1, ..., or trigger+<b><i>10</i></b>). If the interval ends sooner than trigger+<b><i>10</i></b>, then RES need not hold.",
            "diagram": "_media/user-interface/examples/svgDiagrams/after_null_within_satisfaction.svg",
            "scope_mode_pt": "SimulationMode",
            "scope_mode_ft": "SimulationMode",
            "post_condition_unexp_pt": "(SimulationDataRecorded & NucleoReceivedData)",
            "post_condition_unexp_ft": "(SimulationDataRecorded & NucleoReceivedData)",
            "post_condition_SMV_pt": "(SimulationDataRecorded & NucleoReceivedData)",
            "post_condition_SMV_ft": "(SimulationDataRecorded & NucleoReceivedData)",
            "ft_fetched": "(((! FLin_$scope_mode_ft$) U (FLin_$scope_mode_ft$ & (X ((F[<=$duration$] $post_condition_unexp_ft$) | (F[<$duration$] LAST))))) | (LAST V (! FLin_$scope_mode_ft$)))",
            "ft": "(((! FLin_SimulationMode) U (FLin_SimulationMode & (X ((F[<=10] (SimulationDataRecorded & NucleoReceivedData)) | (F[<10] LAST))))) | (LAST V (! FLin_SimulationMode)))",
            "pt_fetched": "((O FLin_$scope_mode_pt$) -> ((((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & FLin_$scope_mode_pt$)) -> (O[<$duration$] FLin_$scope_mode_pt$)) S ((((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & FLin_$scope_mode_pt$)) -> (O[<$duration$] FLin_$scope_mode_pt$)) & FLin_$scope_mode_pt$)))",
            "pt": "((O FLin_SimulationMode) -> ((((! (SimulationDataRecorded & NucleoReceivedData)) S ((! (SimulationDataRecorded & NucleoReceivedData)) & FLin_SimulationMode)) -> (O[<10] FLin_SimulationMode)) S ((((! (SimulationDataRecorded & NucleoReceivedData)) S ((! (SimulationDataRecorded & NucleoReceivedData)) & FLin_SimulationMode)) -> (O[<10] FLin_SimulationMode)) & FLin_SimulationMode)))",
            "ptExpanded_fetched": "((O (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) & (Y (H (! ((! $scope_mode_pt$) & (Y $scope_mode_pt$))))))) -> ((((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) & (Y (H (! ((! $scope_mode_pt$) & (Y $scope_mode_pt$)))))))) -> (O[<$duration$] (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) & (Y (H (! ((! $scope_mode_pt$) & (Y $scope_mode_pt$)))))))) S ((((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) & (Y (H (! ((! $scope_mode_pt$) & (Y $scope_mode_pt$)))))))) -> (O[<$duration$] (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) & (Y (H (! ((! $scope_mode_pt$) & (Y $scope_mode_pt$)))))))) & (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) & (Y (H (! ((! $scope_mode_pt$) & (Y $scope_mode_pt$)))))))))",
            "ptExpanded": "((O (((! SimulationMode) & (Y SimulationMode)) & (Y (H (! ((! SimulationMode) & (Y SimulationMode))))))) -> ((((! (SimulationDataRecorded & NucleoReceivedData)) S ((! (SimulationDataRecorded & NucleoReceivedData)) & (((! SimulationMode) & (Y SimulationMode)) & (Y (H (! ((! SimulationMode) & (Y SimulationMode)))))))) -> (O[0,9] (((! SimulationMode) & (Y SimulationMode)) & (Y (H (! ((! SimulationMode) & (Y SimulationMode)))))))) S ((((! (SimulationDataRecorded & NucleoReceivedData)) S ((! (SimulationDataRecorded & NucleoReceivedData)) & (((! SimulationMode) & (Y SimulationMode)) & (Y (H (! ((! SimulationMode) & (Y SimulationMode)))))))) -> (O[0,9] (((! SimulationMode) & (Y SimulationMode)) & (Y (H (! ((! SimulationMode) & (Y SimulationMode)))))))) & (((! SimulationMode) & (Y SimulationMode)) & (Y (H (! ((! SimulationMode) & (Y SimulationMode)))))))))",
            "CoCoSpecCode": "(O(((not (SimulationMode) and YtoPre(SimulationMode)) and YtoPre(H(not ((not (SimulationMode) and YtoPre(SimulationMode))))))) => SI(((not (SimulationMode) and YtoPre(SimulationMode)) and YtoPre(H(not ((not (SimulationMode) and YtoPre(SimulationMode)))))),(SI(((not (SimulationMode) and YtoPre(SimulationMode)) and YtoPre(H(not ((not (SimulationMode) and YtoPre(SimulationMode)))))),not ((SimulationDataRecorded and NucleoReceivedData))) => OT(9, 0, ((not (SimulationMode) and YtoPre(SimulationMode)) and YtoPre(H(not ((not (SimulationMode) and YtoPre(SimulationMode))))))))))",
            "ftExpanded_fetched": "(((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) & (X ((F[<=$duration$] $post_condition_SMV_ft$) | (F[<$duration$] LAST))))) | (LAST V (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))",
            "ftExpandedUnoptimized": "(((! ((SimulationMode & (! LAST)) & (X (! SimulationMode)))) U (((SimulationMode & (! LAST)) & (X (! SimulationMode))) & (X ((F[0,10] (SimulationDataRecorded & NucleoReceivedData)) | (F[0,9] LAST))))) | (LAST V (! ((SimulationMode & (! LAST)) & (X (! SimulationMode))))))",
            "ftExpanded": "(((! ((SimulationMode & (! LAST)) & (X (! SimulationMode)))) U (((SimulationMode & (! LAST)) & (X (! SimulationMode))) & (X ((F[0,10] (SimulationDataRecorded & NucleoReceivedData)) | (F[0,9] LAST))))) | (LAST V (! ((SimulationMode & (! LAST)) & (X (! SimulationMode))))))",
            "ftInfAUExpanded_fetched": "(((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) & (X (F[<=$duration$] $post_condition_SMV_ft$)))) | (G (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))",
            "ftInfAUExpanded": "(((! (SimulationMode & (X (! SimulationMode)))) U ((SimulationMode & (X (! SimulationMode))) & (X (F[0,10] (SimulationDataRecorded & NucleoReceivedData))))) | (G (! (SimulationMode & (X (! SimulationMode))))))",
            "component": "Jetson"
        },
        "status": "",
        "_id": "cca70413-d8e6-11ef-941f-71fece653e2f"
    },
    {
        "reqid": "REQ001_3",
        "parent_reqid": "REQ001",
        "project": "Drone Requirements v0.4",
        "rationale": "",
        "comments": "",
        "fulltext": "when NucleoTwoControl & NucleoFailureSwitchActiveNucleo System shall within 10 milliseconds satisfy !NucleoTwoControl & NucleoOneControl",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "within",
            "response": "satisfaction",
            "variables": [
                "NucleoTwoControl",
                "NucleoFailureSwitchActiveNucleo",
                "NucleoOneControl"
            ],
            "qualifier_word": "when",
            "pre_condition": "(NucleoTwoControl & NucleoFailureSwitchActiveNucleo)",
            "regular_condition": "(NucleoTwoControl & NucleoFailureSwitchActiveNucleo)",
            "conditionTextRange": [
                0,
                54
            ],
            "component_name": "System",
            "componentTextRange": [
                56,
                61
            ],
            "duration": "10",
            "timingTextRange": [
                69,
                90
            ],
            "post_condition": "(! NucleoTwoControl & NucleoOneControl)",
            "responseTextRange": [
                92,
                135
            ],
            "diagramVariables": "TC = <b><i>(NucleoTwoControl & NucleoFailureSwitchActiveNucleo)</i></b>,  n = <b><i>10</i></b>, Response = <b><i>(! NucleoTwoControl & NucleoOneControl)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(NucleoTwoControl & NucleoFailureSwitchActiveNucleo)</i></b> is true and any point in the interval where <b><i>(NucleoTwoControl & NucleoFailureSwitchActiveNucleo)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some point with distance <= <b><i>10</i></b> from the trigger (i.e., at trigger, trigger+1, ..., or trigger+<b><i>10</i></b>). If the interval ends sooner than trigger+<b><i>10</i></b>, then RES need not hold.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_within_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "regular_condition_unexp_pt": "(NucleoTwoControl & NucleoFailureSwitchActiveNucleo)",
            "regular_condition_unexp_ft": "(NucleoTwoControl & NucleoFailureSwitchActiveNucleo)",
            "regular_condition_SMV_pt": "(NucleoTwoControl & NucleoFailureSwitchActiveNucleo)",
            "regular_condition_SMV_ft": "(NucleoTwoControl & NucleoFailureSwitchActiveNucleo)",
            "post_condition_unexp_pt": "((! NucleoTwoControl) & NucleoOneControl)",
            "post_condition_unexp_ft": "((! NucleoTwoControl) & NucleoOneControl)",
            "post_condition_SMV_pt": "((! NucleoTwoControl) & NucleoOneControl)",
            "post_condition_SMV_ft": "((! NucleoTwoControl) & NucleoOneControl)",
            "ft_fetched": "((LAST V (((! $regular_condition_unexp_ft$) & ((! LAST) & (X $regular_condition_unexp_ft$))) -> (X ((F[<=$duration$] $post_condition_unexp_ft$) | (F[<$duration$] LAST))))) & ($regular_condition_unexp_ft$ -> ((F[<=$duration$] $post_condition_unexp_ft$) | (F[<$duration$] LAST))))",
            "ft": "((LAST V (((! (NucleoTwoControl & NucleoFailureSwitchActiveNucleo)) & ((! LAST) & (X (NucleoTwoControl & NucleoFailureSwitchActiveNucleo)))) -> (X ((F[<=10] ((! NucleoTwoControl) & NucleoOneControl)) | (F[<10] LAST))))) & ((NucleoTwoControl & NucleoFailureSwitchActiveNucleo) -> ((F[<=10] ((! NucleoTwoControl) & NucleoOneControl)) | (F[<10] LAST))))",
            "pt_fetched": "(H ((O[=$duration$] (($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | FTP)) & (! $post_condition_unexp_pt$))) -> (O[<$duration$] (FTP | $post_condition_unexp_pt$))))",
            "pt": "(H ((O[=10] (((NucleoTwoControl & NucleoFailureSwitchActiveNucleo) & ((Y (! (NucleoTwoControl & NucleoFailureSwitchActiveNucleo))) | FTP)) & (! ((! NucleoTwoControl) & NucleoOneControl)))) -> (O[<10] (FTP | ((! NucleoTwoControl) & NucleoOneControl)))))",
            "ptExpanded_fetched": "(H ((O[=$duration$] (($regular_condition_SMV_pt$ & (Z (! $regular_condition_SMV_pt$))) & (! $post_condition_SMV_pt$))) -> (O[<$duration$] ((! (Y TRUE)) | $post_condition_SMV_pt$))))",
            "ptExpanded": "(H ((O[10,10] (((NucleoTwoControl & NucleoFailureSwitchActiveNucleo) & (Z (! (NucleoTwoControl & NucleoFailureSwitchActiveNucleo)))) & (! ((! NucleoTwoControl) & NucleoOneControl)))) -> (O[0,9] ((! (Y TRUE)) | ((! NucleoTwoControl) & NucleoOneControl)))))",
            "CoCoSpecCode": "H((OT(10, 10, (((NucleoTwoControl and NucleoFailureSwitchActiveNucleo) and ZtoPre(not ((NucleoTwoControl and NucleoFailureSwitchActiveNucleo)))) and not ((not (NucleoTwoControl) and NucleoOneControl)))) => OT(9, 0, (not (YtoPre(true)) or (not (NucleoTwoControl) and NucleoOneControl)))))",
            "ftExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X ((F[<=$duration$] $post_condition_SMV_ft$) | (F[<$duration$] LAST))))) & ($regular_condition_SMV_ft$ -> ((F[<=$duration$] $post_condition_SMV_ft$) | (F[<$duration$] LAST))))",
            "ftExpandedUnoptimized": "((LAST V (((! (NucleoTwoControl & NucleoFailureSwitchActiveNucleo)) & ((! LAST) & (X (NucleoTwoControl & NucleoFailureSwitchActiveNucleo)))) -> (X ((F[0,10] ((! NucleoTwoControl) & NucleoOneControl)) | (F[0,9] LAST))))) & ((NucleoTwoControl & NucleoFailureSwitchActiveNucleo) -> ((F[0,10] ((! NucleoTwoControl) & NucleoOneControl)) | (F[0,9] LAST))))",
            "ftExpanded": "((LAST V (((! (NucleoTwoControl & NucleoFailureSwitchActiveNucleo)) & ((! LAST) & (X (NucleoTwoControl & NucleoFailureSwitchActiveNucleo)))) -> (X ((F[0,10] ((! NucleoTwoControl) & NucleoOneControl)) | (F[0,9] LAST))))) & ((NucleoTwoControl & NucleoFailureSwitchActiveNucleo) -> ((F[0,10] ((! NucleoTwoControl) & NucleoOneControl)) | (F[0,9] LAST))))",
            "ftInfAUExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X (F[<=$duration$] $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> (F[<=$duration$] $post_condition_SMV_ft$)))",
            "ftInfAUExpanded": "((G (((! (NucleoTwoControl & NucleoFailureSwitchActiveNucleo)) & (X (NucleoTwoControl & NucleoFailureSwitchActiveNucleo))) -> (X (F[0,10] ((! NucleoTwoControl) & NucleoOneControl))))) & ((NucleoTwoControl & NucleoFailureSwitchActiveNucleo) -> (F[0,10] ((! NucleoTwoControl) & NucleoOneControl))))",
            "component": "System"
        },
        "status": "",
        "_id": "cca70414-d8e6-11ef-941f-71fece653e2f"
    },
    {
        "reqid": "REQ054",
        "parent_reqid": "",
        "project": "Drone Requirements v0.4",
        "rationale": "\"Monitor temperature inside the fuselage\"\n\nGroup: Data Monitoring\nFunctional\nPotentially Unfeasible\nNeeds Further Specification\n\"Need to check if we have a temperature sensor for this\"",
        "comments": "",
        "fulltext": "upon ControlLoopStart ActiveNucleo shall before ControlLoopFinish satisfy MonitorInternalTemperature & SendInternalTemperatureData",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "before",
            "response": "satisfaction",
            "variables": [
                "ControlLoopStart",
                "ControlLoopFinish",
                "MonitorInternalTemperature",
                "SendInternalTemperatureData"
            ],
            "qualifier_word": "upon",
            "pre_condition": "(ControlLoopStart)",
            "regular_condition": "(ControlLoopStart)",
            "conditionTextRange": [
                0,
                20
            ],
            "component_name": "ActiveNucleo",
            "componentTextRange": [
                22,
                33
            ],
            "stop_condition": "(ControlLoopFinish)",
            "timingTextRange": [
                41,
                64
            ],
            "post_condition": "(MonitorInternalTemperature & SendInternalTemperatureData)",
            "responseTextRange": [
                66,
                129
            ],
            "diagramVariables": "TC = <b><i>(ControlLoopStart)</i></b>, SC = <b><i>(ControlLoopFinish)</i></b>, Response = <b><i>(MonitorInternalTemperature & SendInternalTemperatureData)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(ControlLoopStart)</i></b> is true and any point in the interval where <b><i>(ControlLoopStart)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at least once strictly before the state where the stop condition holds. If the stop condition never occurs in the interval, RES does not need to hold. If the stop condition holds at the trigger, the requirement is not satisfied.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_before_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "regular_condition_unexp_pt": "ControlLoopStart",
            "regular_condition_unexp_ft": "ControlLoopStart",
            "regular_condition_SMV_pt": "ControlLoopStart",
            "regular_condition_SMV_ft": "ControlLoopStart",
            "post_condition_unexp_pt": "(MonitorInternalTemperature & SendInternalTemperatureData)",
            "post_condition_unexp_ft": "(MonitorInternalTemperature & SendInternalTemperatureData)",
            "post_condition_SMV_pt": "(MonitorInternalTemperature & SendInternalTemperatureData)",
            "post_condition_SMV_ft": "(MonitorInternalTemperature & SendInternalTemperatureData)",
            "stop_condition_unexp_pt": "ControlLoopFinish",
            "stop_condition_unexp_ft": "ControlLoopFinish",
            "stop_condition_SMV_pt": "ControlLoopFinish",
            "stop_condition_SMV_ft": "ControlLoopFinish",
            "ft_fetched": "((LAST V (((! $regular_condition_unexp_ft$) & ((! LAST) & (X $regular_condition_unexp_ft$))) -> (X (($post_condition_unexp_ft$ | LAST) V (! $stop_condition_unexp_ft$))))) & ($regular_condition_unexp_ft$ -> (($post_condition_unexp_ft$ | LAST) V (! $stop_condition_unexp_ft$))))",
            "ft": "((LAST V (((! ControlLoopStart) & ((! LAST) & (X ControlLoopStart))) -> (X (((MonitorInternalTemperature & SendInternalTemperatureData) | LAST) V (! ControlLoopFinish))))) & (ControlLoopStart -> (((MonitorInternalTemperature & SendInternalTemperatureData) | LAST) V (! ControlLoopFinish))))",
            "pt_fetched": "(H ($stop_condition_unexp_pt$ -> ((H (! $regular_condition_unexp_pt$)) | (((! FTP) & (! ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | FTP)))) & (Y (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | FTP))))))))))",
            "pt": "(H (ControlLoopFinish -> ((H (! ControlLoopStart)) | (((! FTP) & (! (ControlLoopStart & ((Y (! ControlLoopStart)) | FTP)))) & (Y (! ((! (MonitorInternalTemperature & SendInternalTemperatureData)) S ((! (MonitorInternalTemperature & SendInternalTemperatureData)) & (ControlLoopStart & ((Y (! ControlLoopStart)) | FTP))))))))))",
            "ptExpanded_fetched": "(H ($stop_condition_SMV_pt$ -> ((H (! $regular_condition_SMV_pt$)) | (((Y TRUE) & (! ($regular_condition_SMV_pt$ & (Z (! $regular_condition_SMV_pt$))))) & (Y (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & (Z (! $regular_condition_SMV_pt$)))))))))))",
            "ptExpanded": "(H (ControlLoopFinish -> ((H (! ControlLoopStart)) | (((Y TRUE) & (! (ControlLoopStart & (Z (! ControlLoopStart))))) & (Y (! ((! (MonitorInternalTemperature & SendInternalTemperatureData)) S ((! (MonitorInternalTemperature & SendInternalTemperatureData)) & (ControlLoopStart & (Z (! ControlLoopStart)))))))))))",
            "CoCoSpecCode": "H((ControlLoopFinish => (H(not (ControlLoopStart)) or ((YtoPre(true) and not ((ControlLoopStart and ZtoPre(not (ControlLoopStart))))) and YtoPre(not (SI((ControlLoopStart and ZtoPre(not (ControlLoopStart))),not ((MonitorInternalTemperature and SendInternalTemperatureData)))))))))",
            "ftExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X (($post_condition_SMV_ft$ | LAST) V (! $stop_condition_SMV_ft$))))) & ($regular_condition_SMV_ft$ -> (($post_condition_SMV_ft$ | LAST) V (! $stop_condition_SMV_ft$))))",
            "ftExpandedUnoptimized": "((LAST V (((! ControlLoopStart) & ((! LAST) & (X ControlLoopStart))) -> (X (((MonitorInternalTemperature & SendInternalTemperatureData) | LAST) V (! ControlLoopFinish))))) & (ControlLoopStart -> (((MonitorInternalTemperature & SendInternalTemperatureData) | LAST) V (! ControlLoopFinish))))",
            "ftExpanded": "((LAST V (((! ControlLoopStart) & ((! LAST) & (X ControlLoopStart))) -> (X (((MonitorInternalTemperature & SendInternalTemperatureData) | LAST) V (! ControlLoopFinish))))) & (ControlLoopStart -> (((MonitorInternalTemperature & SendInternalTemperatureData) | LAST) V (! ControlLoopFinish))))",
            "ftInfAUExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X ($post_condition_SMV_ft$ V (! $stop_condition_SMV_ft$))))) & ($regular_condition_SMV_ft$ -> ($post_condition_SMV_ft$ V (! $stop_condition_SMV_ft$))))",
            "ftInfAUExpanded": "((G (((! ControlLoopStart) & (X ControlLoopStart)) -> (X ((MonitorInternalTemperature & SendInternalTemperatureData) V (! ControlLoopFinish))))) & (ControlLoopStart -> ((MonitorInternalTemperature & SendInternalTemperatureData) V (! ControlLoopFinish))))",
            "component": "ActiveNucleo"
        },
        "status": "",
        "_id": "cca70415-d8e6-11ef-941f-71fece653e2f"
    },
    {
        "reqid": "REQ013_4",
        "parent_reqid": "REQ013",
        "project": "Drone Requirements v0.4",
        "rationale": "",
        "comments": "",
        "fulltext": "when ReferencesReturnedFromJetson Raspberry shall within 10 milliseconds satisfy GroundStationCommunication & SendReferencesToGCS",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "within",
            "response": "satisfaction",
            "variables": [
                "ReferencesReturnedFromJetson",
                "GroundStationCommunication",
                "SendReferencesToGCS"
            ],
            "qualifier_word": "when",
            "pre_condition": "(ReferencesReturnedFromJetson)",
            "regular_condition": "(ReferencesReturnedFromJetson)",
            "conditionTextRange": [
                0,
                32
            ],
            "component_name": "Raspberry",
            "componentTextRange": [
                34,
                42
            ],
            "duration": "10",
            "timingTextRange": [
                50,
                71
            ],
            "post_condition": "(GroundStationCommunication & SendReferencesToGCS)",
            "responseTextRange": [
                73,
                128
            ],
            "diagramVariables": "TC = <b><i>(ReferencesReturnedFromJetson)</i></b>,  n = <b><i>10</i></b>, Response = <b><i>(GroundStationCommunication & SendReferencesToGCS)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(ReferencesReturnedFromJetson)</i></b> is true and any point in the interval where <b><i>(ReferencesReturnedFromJetson)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some point with distance <= <b><i>10</i></b> from the trigger (i.e., at trigger, trigger+1, ..., or trigger+<b><i>10</i></b>). If the interval ends sooner than trigger+<b><i>10</i></b>, then RES need not hold.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_within_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "regular_condition_unexp_pt": "ReferencesReturnedFromJetson",
            "regular_condition_unexp_ft": "ReferencesReturnedFromJetson",
            "regular_condition_SMV_pt": "ReferencesReturnedFromJetson",
            "regular_condition_SMV_ft": "ReferencesReturnedFromJetson",
            "post_condition_unexp_pt": "(GroundStationCommunication & SendReferencesToGCS)",
            "post_condition_unexp_ft": "(GroundStationCommunication & SendReferencesToGCS)",
            "post_condition_SMV_pt": "(GroundStationCommunication & SendReferencesToGCS)",
            "post_condition_SMV_ft": "(GroundStationCommunication & SendReferencesToGCS)",
            "ft_fetched": "((LAST V (((! $regular_condition_unexp_ft$) & ((! LAST) & (X $regular_condition_unexp_ft$))) -> (X ((F[<=$duration$] $post_condition_unexp_ft$) | (F[<$duration$] LAST))))) & ($regular_condition_unexp_ft$ -> ((F[<=$duration$] $post_condition_unexp_ft$) | (F[<$duration$] LAST))))",
            "ft": "((LAST V (((! ReferencesReturnedFromJetson) & ((! LAST) & (X ReferencesReturnedFromJetson))) -> (X ((F[<=10] (GroundStationCommunication & SendReferencesToGCS)) | (F[<10] LAST))))) & (ReferencesReturnedFromJetson -> ((F[<=10] (GroundStationCommunication & SendReferencesToGCS)) | (F[<10] LAST))))",
            "pt_fetched": "(H ((O[=$duration$] (($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | FTP)) & (! $post_condition_unexp_pt$))) -> (O[<$duration$] (FTP | $post_condition_unexp_pt$))))",
            "pt": "(H ((O[=10] ((ReferencesReturnedFromJetson & ((Y (! ReferencesReturnedFromJetson)) | FTP)) & (! (GroundStationCommunication & SendReferencesToGCS)))) -> (O[<10] (FTP | (GroundStationCommunication & SendReferencesToGCS)))))",
            "ptExpanded_fetched": "(H ((O[=$duration$] (($regular_condition_SMV_pt$ & (Z (! $regular_condition_SMV_pt$))) & (! $post_condition_SMV_pt$))) -> (O[<$duration$] ((! (Y TRUE)) | $post_condition_SMV_pt$))))",
            "ptExpanded": "(H ((O[10,10] ((ReferencesReturnedFromJetson & (Z (! ReferencesReturnedFromJetson))) & (! (GroundStationCommunication & SendReferencesToGCS)))) -> (O[0,9] ((! (Y TRUE)) | (GroundStationCommunication & SendReferencesToGCS)))))",
            "CoCoSpecCode": "H((OT(10, 10, ((ReferencesReturnedFromJetson and ZtoPre(not (ReferencesReturnedFromJetson))) and not ((GroundStationCommunication and SendReferencesToGCS)))) => OT(9, 0, (not (YtoPre(true)) or (GroundStationCommunication and SendReferencesToGCS)))))",
            "ftExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X ((F[<=$duration$] $post_condition_SMV_ft$) | (F[<$duration$] LAST))))) & ($regular_condition_SMV_ft$ -> ((F[<=$duration$] $post_condition_SMV_ft$) | (F[<$duration$] LAST))))",
            "ftExpandedUnoptimized": "((LAST V (((! ReferencesReturnedFromJetson) & ((! LAST) & (X ReferencesReturnedFromJetson))) -> (X ((F[0,10] (GroundStationCommunication & SendReferencesToGCS)) | (F[0,9] LAST))))) & (ReferencesReturnedFromJetson -> ((F[0,10] (GroundStationCommunication & SendReferencesToGCS)) | (F[0,9] LAST))))",
            "ftExpanded": "((LAST V (((! ReferencesReturnedFromJetson) & ((! LAST) & (X ReferencesReturnedFromJetson))) -> (X ((F[0,10] (GroundStationCommunication & SendReferencesToGCS)) | (F[0,9] LAST))))) & (ReferencesReturnedFromJetson -> ((F[0,10] (GroundStationCommunication & SendReferencesToGCS)) | (F[0,9] LAST))))",
            "ftInfAUExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X (F[<=$duration$] $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> (F[<=$duration$] $post_condition_SMV_ft$)))",
            "ftInfAUExpanded": "((G (((! ReferencesReturnedFromJetson) & (X ReferencesReturnedFromJetson)) -> (X (F[0,10] (GroundStationCommunication & SendReferencesToGCS))))) & (ReferencesReturnedFromJetson -> (F[0,10] (GroundStationCommunication & SendReferencesToGCS))))",
            "component": "Raspberry"
        },
        "status": "",
        "_id": "cca70416-d8e6-11ef-941f-71fece653e2f"
    },
    {
        "reqid": "REQ030",
        "parent_reqid": "",
        "project": "Drone Requirements v0.4",
        "rationale": "\"Reliable communication\"\n\nGroup: Simulation\nNon-functional\nFeasible\nNeeds Further Specification\n\"Need clarification on what defines reliable.\"",
        "comments": "I think this one could well be a functional requirement and specified in FRET, if we had a metric for \"reliable\".",
        "fulltext": "",
        "semantics": {},
        "status": "",
        "_id": "cca70417-d8e6-11ef-941f-71fece653e2f"
    },
    {
        "reqid": "REQ023",
        "parent_reqid": "",
        "project": "Drone Requirements v0.4",
        "rationale": "\"True fidelity with the final embedded aircraft system\"\n\nGroup: TBD\nNon-functional\nUnfeasible\nNeeds Further Specification\n\"Assuming the user refers to simulation only.\"",
        "comments": "Non-functional requirement: Out of scope",
        "fulltext": "",
        "semantics": {},
        "status": "",
        "_id": "cca70418-d8e6-11ef-941f-71fece653e2f"
    },
    {
        "reqid": "REQ058",
        "parent_reqid": "",
        "project": "Drone Requirements v0.4",
        "rationale": "\"Monitor battery status/level/voltage of each cell\"\n\nGroup: Data Monitoring\nFunctional\nLikely Unfeasible\nNeeds Further Specification\n\"Bandwidth is too limited to transmit this.\"",
        "comments": "",
        "fulltext": "upon ControlLoopStart ActiveNucleo shall before ControlLoopFinish satisfy (MonitorBatteryStatus & SendBatteryStatusData) & (MonitorBatteryLevel & SendBatteryLevelData) & (MonitorBatteryVoltage & SendBatteryVoltageData)",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "before",
            "response": "satisfaction",
            "variables": [
                "ControlLoopStart",
                "ControlLoopFinish",
                "MonitorBatteryStatus",
                "SendBatteryStatusData",
                "MonitorBatteryLevel",
                "SendBatteryLevelData",
                "MonitorBatteryVoltage",
                "SendBatteryVoltageData"
            ],
            "qualifier_word": "upon",
            "pre_condition": "(ControlLoopStart)",
            "regular_condition": "(ControlLoopStart)",
            "conditionTextRange": [
                0,
                20
            ],
            "component_name": "ActiveNucleo",
            "componentTextRange": [
                22,
                33
            ],
            "stop_condition": "(ControlLoopFinish)",
            "timingTextRange": [
                41,
                64
            ],
            "post_condition": "(( MonitorBatteryStatus & SendBatteryStatusData ) & ( MonitorBatteryLevel & SendBatteryLevelData ) & ( MonitorBatteryVoltage & SendBatteryVoltageData ))",
            "responseTextRange": [
                66,
                217
            ],
            "diagramVariables": "TC = <b><i>(ControlLoopStart)</i></b>, SC = <b><i>(ControlLoopFinish)</i></b>, Response = <b><i>(( MonitorBatteryStatus & SendBatteryStatusData ) & ( MonitorBatteryLevel & SendBatteryLevelData ) & ( MonitorBatteryVoltage & SendBatteryVoltageData ))</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(ControlLoopStart)</i></b> is true and any point in the interval where <b><i>(ControlLoopStart)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at least once strictly before the state where the stop condition holds. If the stop condition never occurs in the interval, RES does not need to hold. If the stop condition holds at the trigger, the requirement is not satisfied.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_before_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "regular_condition_unexp_pt": "ControlLoopStart",
            "regular_condition_unexp_ft": "ControlLoopStart",
            "regular_condition_SMV_pt": "ControlLoopStart",
            "regular_condition_SMV_ft": "ControlLoopStart",
            "post_condition_unexp_pt": "(((MonitorBatteryStatus & SendBatteryStatusData) & (MonitorBatteryLevel & SendBatteryLevelData)) & (MonitorBatteryVoltage & SendBatteryVoltageData))",
            "post_condition_unexp_ft": "(((MonitorBatteryStatus & SendBatteryStatusData) & (MonitorBatteryLevel & SendBatteryLevelData)) & (MonitorBatteryVoltage & SendBatteryVoltageData))",
            "post_condition_SMV_pt": "(((MonitorBatteryStatus & SendBatteryStatusData) & (MonitorBatteryLevel & SendBatteryLevelData)) & (MonitorBatteryVoltage & SendBatteryVoltageData))",
            "post_condition_SMV_ft": "(((MonitorBatteryStatus & SendBatteryStatusData) & (MonitorBatteryLevel & SendBatteryLevelData)) & (MonitorBatteryVoltage & SendBatteryVoltageData))",
            "stop_condition_unexp_pt": "ControlLoopFinish",
            "stop_condition_unexp_ft": "ControlLoopFinish",
            "stop_condition_SMV_pt": "ControlLoopFinish",
            "stop_condition_SMV_ft": "ControlLoopFinish",
            "ft_fetched": "((LAST V (((! $regular_condition_unexp_ft$) & ((! LAST) & (X $regular_condition_unexp_ft$))) -> (X (($post_condition_unexp_ft$ | LAST) V (! $stop_condition_unexp_ft$))))) & ($regular_condition_unexp_ft$ -> (($post_condition_unexp_ft$ | LAST) V (! $stop_condition_unexp_ft$))))",
            "ft": "((LAST V (((! ControlLoopStart) & ((! LAST) & (X ControlLoopStart))) -> (X (((((MonitorBatteryStatus & SendBatteryStatusData) & (MonitorBatteryLevel & SendBatteryLevelData)) & (MonitorBatteryVoltage & SendBatteryVoltageData)) | LAST) V (! ControlLoopFinish))))) & (ControlLoopStart -> (((((MonitorBatteryStatus & SendBatteryStatusData) & (MonitorBatteryLevel & SendBatteryLevelData)) & (MonitorBatteryVoltage & SendBatteryVoltageData)) | LAST) V (! ControlLoopFinish))))",
            "pt_fetched": "(H ($stop_condition_unexp_pt$ -> ((H (! $regular_condition_unexp_pt$)) | (((! FTP) & (! ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | FTP)))) & (Y (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | FTP))))))))))",
            "pt": "(H (ControlLoopFinish -> ((H (! ControlLoopStart)) | (((! FTP) & (! (ControlLoopStart & ((Y (! ControlLoopStart)) | FTP)))) & (Y (! ((! (((MonitorBatteryStatus & SendBatteryStatusData) & (MonitorBatteryLevel & SendBatteryLevelData)) & (MonitorBatteryVoltage & SendBatteryVoltageData))) S ((! (((MonitorBatteryStatus & SendBatteryStatusData) & (MonitorBatteryLevel & SendBatteryLevelData)) & (MonitorBatteryVoltage & SendBatteryVoltageData))) & (ControlLoopStart & ((Y (! ControlLoopStart)) | FTP))))))))))",
            "ptExpanded_fetched": "(H ($stop_condition_SMV_pt$ -> ((H (! $regular_condition_SMV_pt$)) | (((Y TRUE) & (! ($regular_condition_SMV_pt$ & (Z (! $regular_condition_SMV_pt$))))) & (Y (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & (Z (! $regular_condition_SMV_pt$)))))))))))",
            "ptExpanded": "(H (ControlLoopFinish -> ((H (! ControlLoopStart)) | (((Y TRUE) & (! (ControlLoopStart & (Z (! ControlLoopStart))))) & (Y (! ((! (((MonitorBatteryStatus & SendBatteryStatusData) & (MonitorBatteryLevel & SendBatteryLevelData)) & (MonitorBatteryVoltage & SendBatteryVoltageData))) S ((! (((MonitorBatteryStatus & SendBatteryStatusData) & (MonitorBatteryLevel & SendBatteryLevelData)) & (MonitorBatteryVoltage & SendBatteryVoltageData))) & (ControlLoopStart & (Z (! ControlLoopStart)))))))))))",
            "CoCoSpecCode": "H((ControlLoopFinish => (H(not (ControlLoopStart)) or ((YtoPre(true) and not ((ControlLoopStart and ZtoPre(not (ControlLoopStart))))) and YtoPre(not (SI((ControlLoopStart and ZtoPre(not (ControlLoopStart))),not ((((MonitorBatteryStatus and SendBatteryStatusData) and (MonitorBatteryLevel and SendBatteryLevelData)) and (MonitorBatteryVoltage and SendBatteryVoltageData))))))))))",
            "ftExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X (($post_condition_SMV_ft$ | LAST) V (! $stop_condition_SMV_ft$))))) & ($regular_condition_SMV_ft$ -> (($post_condition_SMV_ft$ | LAST) V (! $stop_condition_SMV_ft$))))",
            "ftExpandedUnoptimized": "((LAST V (((! ControlLoopStart) & ((! LAST) & (X ControlLoopStart))) -> (X (((((MonitorBatteryStatus & SendBatteryStatusData) & (MonitorBatteryLevel & SendBatteryLevelData)) & (MonitorBatteryVoltage & SendBatteryVoltageData)) | LAST) V (! ControlLoopFinish))))) & (ControlLoopStart -> (((((MonitorBatteryStatus & SendBatteryStatusData) & (MonitorBatteryLevel & SendBatteryLevelData)) & (MonitorBatteryVoltage & SendBatteryVoltageData)) | LAST) V (! ControlLoopFinish))))",
            "ftExpanded": "((LAST V (((! ControlLoopStart) & ((! LAST) & (X ControlLoopStart))) -> (X (((((MonitorBatteryStatus & SendBatteryStatusData) & (MonitorBatteryLevel & SendBatteryLevelData)) & (MonitorBatteryVoltage & SendBatteryVoltageData)) | LAST) V (! ControlLoopFinish))))) & (ControlLoopStart -> (((((MonitorBatteryStatus & SendBatteryStatusData) & (MonitorBatteryLevel & SendBatteryLevelData)) & (MonitorBatteryVoltage & SendBatteryVoltageData)) | LAST) V (! ControlLoopFinish))))",
            "ftInfAUExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X ($post_condition_SMV_ft$ V (! $stop_condition_SMV_ft$))))) & ($regular_condition_SMV_ft$ -> ($post_condition_SMV_ft$ V (! $stop_condition_SMV_ft$))))",
            "ftInfAUExpanded": "((G (((! ControlLoopStart) & (X ControlLoopStart)) -> (X ((((MonitorBatteryStatus & SendBatteryStatusData) & (MonitorBatteryLevel & SendBatteryLevelData)) & (MonitorBatteryVoltage & SendBatteryVoltageData)) V (! ControlLoopFinish))))) & (ControlLoopStart -> ((((MonitorBatteryStatus & SendBatteryStatusData) & (MonitorBatteryLevel & SendBatteryLevelData)) & (MonitorBatteryVoltage & SendBatteryVoltageData)) V (! ControlLoopFinish))))",
            "component": "ActiveNucleo"
        },
        "status": "",
        "_id": "cca70419-d8e6-11ef-941f-71fece653e2f"
    },
    {
        "reqid": "REQ002",
        "parent_reqid": "",
        "project": "Drone Requirements v0.4",
        "rationale": "\"Be able to predict hardware failures\"\n\nGroup: Failure Analysis\nFunctional\nFeasibility: Unknown",
        "comments": "v0.1: I can think of a few different ways this requirements could be interpreted or made more detailed, and each would affect the formalisation differently:\n- Should the system never fail to predict a hardware failure that will happen (i.e. F (Failure) => PredictFailure)\n- Is there a probabilistic element to this?\n\nv0.2: We said in a meeting that there should be a specific component that predicts hardware failures, but I'm leaving it as System for now until we have decided on the details. ",
        "fulltext": "System shall always satisfy JetsonFailureDetectionRunning & NucleoOneFailureDetectionRunning & NucleoTwoFailureDetectionRunning & RaspberryFailureDetectionRunning",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": [
                "JetsonFailureDetectionRunning",
                "NucleoOneFailureDetectionRunning",
                "NucleoTwoFailureDetectionRunning",
                "RaspberryFailureDetectionRunning"
            ],
            "component_name": "System",
            "componentTextRange": [
                0,
                5
            ],
            "timingTextRange": [
                13,
                18
            ],
            "post_condition": "(JetsonFailureDetectionRunning & NucleoOneFailureDetectionRunning & NucleoTwoFailureDetectionRunning & RaspberryFailureDetectionRunning)",
            "responseTextRange": [
                20,
                161
            ],
            "diagramVariables": "Response = <b><i>(JetsonFailureDetectionRunning & NucleoOneFailureDetectionRunning & NucleoTwoFailureDetectionRunning & RaspberryFailureDetectionRunning)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "post_condition_unexp_pt": "(((JetsonFailureDetectionRunning & NucleoOneFailureDetectionRunning) & NucleoTwoFailureDetectionRunning) & RaspberryFailureDetectionRunning)",
            "post_condition_unexp_ft": "(((JetsonFailureDetectionRunning & NucleoOneFailureDetectionRunning) & NucleoTwoFailureDetectionRunning) & RaspberryFailureDetectionRunning)",
            "post_condition_SMV_pt": "(((JetsonFailureDetectionRunning & NucleoOneFailureDetectionRunning) & NucleoTwoFailureDetectionRunning) & RaspberryFailureDetectionRunning)",
            "post_condition_SMV_ft": "(((JetsonFailureDetectionRunning & NucleoOneFailureDetectionRunning) & NucleoTwoFailureDetectionRunning) & RaspberryFailureDetectionRunning)",
            "ft_fetched": "(LAST V $post_condition_unexp_ft$)",
            "ft": "(LAST V (((JetsonFailureDetectionRunning & NucleoOneFailureDetectionRunning) & NucleoTwoFailureDetectionRunning) & RaspberryFailureDetectionRunning))",
            "pt_fetched": "(H $post_condition_unexp_pt$)",
            "pt": "(H (((JetsonFailureDetectionRunning & NucleoOneFailureDetectionRunning) & NucleoTwoFailureDetectionRunning) & RaspberryFailureDetectionRunning))",
            "ptExpanded_fetched": "(H $post_condition_SMV_pt$)",
            "ptExpanded": "(H (((JetsonFailureDetectionRunning & NucleoOneFailureDetectionRunning) & NucleoTwoFailureDetectionRunning) & RaspberryFailureDetectionRunning))",
            "CoCoSpecCode": "H((((JetsonFailureDetectionRunning and NucleoOneFailureDetectionRunning) and NucleoTwoFailureDetectionRunning) and RaspberryFailureDetectionRunning))",
            "ftExpanded_fetched": "(LAST V $post_condition_SMV_ft$)",
            "ftExpandedUnoptimized": "(LAST V (((JetsonFailureDetectionRunning & NucleoOneFailureDetectionRunning) & NucleoTwoFailureDetectionRunning) & RaspberryFailureDetectionRunning))",
            "ftExpanded": "(LAST V (((JetsonFailureDetectionRunning & NucleoOneFailureDetectionRunning) & NucleoTwoFailureDetectionRunning) & RaspberryFailureDetectionRunning))",
            "ftInfAUExpanded_fetched": "(G $post_condition_SMV_ft$)",
            "ftInfAUExpanded": "(G (((JetsonFailureDetectionRunning & NucleoOneFailureDetectionRunning) & NucleoTwoFailureDetectionRunning) & RaspberryFailureDetectionRunning))",
            "component": "System"
        },
        "status": "",
        "_id": "cca7041a-d8e6-11ef-941f-71fece653e2f"
    },
    {
        "reqid": "REQ045",
        "parent_reqid": "",
        "project": "Drone Requirements v0.4",
        "rationale": "\"Monitor the RPM of the motors\"\n\nGroup: Data Monitoring\nFunctional\nPotentially Unfeasible\nNeeds Further Specification\n\"Assuming motors = propulsion group brushless motors.\"",
        "comments": "Going off the note, part of refining this requirement will probably be specifying exactly which motors we are monitoring",
        "fulltext": "upon ControlLoopStart ActiveNucleo shall before ControlLoopFinish satisfy (MonitorMotorRPM & SendMotorRPM)",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "before",
            "response": "satisfaction",
            "variables": [
                "ControlLoopStart",
                "ControlLoopFinish",
                "MonitorMotorRPM",
                "SendMotorRPM"
            ],
            "qualifier_word": "upon",
            "pre_condition": "(ControlLoopStart)",
            "regular_condition": "(ControlLoopStart)",
            "conditionTextRange": [
                0,
                20
            ],
            "component_name": "ActiveNucleo",
            "componentTextRange": [
                22,
                33
            ],
            "stop_condition": "(ControlLoopFinish)",
            "timingTextRange": [
                41,
                64
            ],
            "post_condition": "(( MonitorMotorRPM & SendMotorRPM ))",
            "responseTextRange": [
                66,
                105
            ],
            "diagramVariables": "TC = <b><i>(ControlLoopStart)</i></b>, SC = <b><i>(ControlLoopFinish)</i></b>, Response = <b><i>(( MonitorMotorRPM & SendMotorRPM ))</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(ControlLoopStart)</i></b> is true and any point in the interval where <b><i>(ControlLoopStart)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at least once strictly before the state where the stop condition holds. If the stop condition never occurs in the interval, RES does not need to hold. If the stop condition holds at the trigger, the requirement is not satisfied.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_before_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "regular_condition_unexp_pt": "ControlLoopStart",
            "regular_condition_unexp_ft": "ControlLoopStart",
            "regular_condition_SMV_pt": "ControlLoopStart",
            "regular_condition_SMV_ft": "ControlLoopStart",
            "post_condition_unexp_pt": "(MonitorMotorRPM & SendMotorRPM)",
            "post_condition_unexp_ft": "(MonitorMotorRPM & SendMotorRPM)",
            "post_condition_SMV_pt": "(MonitorMotorRPM & SendMotorRPM)",
            "post_condition_SMV_ft": "(MonitorMotorRPM & SendMotorRPM)",
            "stop_condition_unexp_pt": "ControlLoopFinish",
            "stop_condition_unexp_ft": "ControlLoopFinish",
            "stop_condition_SMV_pt": "ControlLoopFinish",
            "stop_condition_SMV_ft": "ControlLoopFinish",
            "ft_fetched": "((LAST V (((! $regular_condition_unexp_ft$) & ((! LAST) & (X $regular_condition_unexp_ft$))) -> (X (($post_condition_unexp_ft$ | LAST) V (! $stop_condition_unexp_ft$))))) & ($regular_condition_unexp_ft$ -> (($post_condition_unexp_ft$ | LAST) V (! $stop_condition_unexp_ft$))))",
            "ft": "((LAST V (((! ControlLoopStart) & ((! LAST) & (X ControlLoopStart))) -> (X (((MonitorMotorRPM & SendMotorRPM) | LAST) V (! ControlLoopFinish))))) & (ControlLoopStart -> (((MonitorMotorRPM & SendMotorRPM) | LAST) V (! ControlLoopFinish))))",
            "pt_fetched": "(H ($stop_condition_unexp_pt$ -> ((H (! $regular_condition_unexp_pt$)) | (((! FTP) & (! ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | FTP)))) & (Y (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | FTP))))))))))",
            "pt": "(H (ControlLoopFinish -> ((H (! ControlLoopStart)) | (((! FTP) & (! (ControlLoopStart & ((Y (! ControlLoopStart)) | FTP)))) & (Y (! ((! (MonitorMotorRPM & SendMotorRPM)) S ((! (MonitorMotorRPM & SendMotorRPM)) & (ControlLoopStart & ((Y (! ControlLoopStart)) | FTP))))))))))",
            "ptExpanded_fetched": "(H ($stop_condition_SMV_pt$ -> ((H (! $regular_condition_SMV_pt$)) | (((Y TRUE) & (! ($regular_condition_SMV_pt$ & (Z (! $regular_condition_SMV_pt$))))) & (Y (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & (Z (! $regular_condition_SMV_pt$)))))))))))",
            "ptExpanded": "(H (ControlLoopFinish -> ((H (! ControlLoopStart)) | (((Y TRUE) & (! (ControlLoopStart & (Z (! ControlLoopStart))))) & (Y (! ((! (MonitorMotorRPM & SendMotorRPM)) S ((! (MonitorMotorRPM & SendMotorRPM)) & (ControlLoopStart & (Z (! ControlLoopStart)))))))))))",
            "CoCoSpecCode": "H((ControlLoopFinish => (H(not (ControlLoopStart)) or ((YtoPre(true) and not ((ControlLoopStart and ZtoPre(not (ControlLoopStart))))) and YtoPre(not (SI((ControlLoopStart and ZtoPre(not (ControlLoopStart))),not ((MonitorMotorRPM and SendMotorRPM)))))))))",
            "ftExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X (($post_condition_SMV_ft$ | LAST) V (! $stop_condition_SMV_ft$))))) & ($regular_condition_SMV_ft$ -> (($post_condition_SMV_ft$ | LAST) V (! $stop_condition_SMV_ft$))))",
            "ftExpandedUnoptimized": "((LAST V (((! ControlLoopStart) & ((! LAST) & (X ControlLoopStart))) -> (X (((MonitorMotorRPM & SendMotorRPM) | LAST) V (! ControlLoopFinish))))) & (ControlLoopStart -> (((MonitorMotorRPM & SendMotorRPM) | LAST) V (! ControlLoopFinish))))",
            "ftExpanded": "((LAST V (((! ControlLoopStart) & ((! LAST) & (X ControlLoopStart))) -> (X (((MonitorMotorRPM & SendMotorRPM) | LAST) V (! ControlLoopFinish))))) & (ControlLoopStart -> (((MonitorMotorRPM & SendMotorRPM) | LAST) V (! ControlLoopFinish))))",
            "ftInfAUExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X ($post_condition_SMV_ft$ V (! $stop_condition_SMV_ft$))))) & ($regular_condition_SMV_ft$ -> ($post_condition_SMV_ft$ V (! $stop_condition_SMV_ft$))))",
            "ftInfAUExpanded": "((G (((! ControlLoopStart) & (X ControlLoopStart)) -> (X ((MonitorMotorRPM & SendMotorRPM) V (! ControlLoopFinish))))) & (ControlLoopStart -> ((MonitorMotorRPM & SendMotorRPM) V (! ControlLoopFinish))))",
            "component": "ActiveNucleo"
        },
        "status": "",
        "_id": "cca7041b-d8e6-11ef-941f-71fece653e2f"
    },
    {
        "reqid": "REQ047",
        "parent_reqid": "",
        "project": "Drone Requirements v0.4",
        "rationale": "\"Monitor GPS: latitude, longitude, altitude and home position\"\n\nGroup: Data Monitoring\nFunctional\nPotentially Unfeasible\nNeeds Further Specification",
        "comments": "One could refactor this with \"MonitorLatitude & MonitorLongitude & MonitorAltitude & MonitorHomePosition <=> MonitorGPS\"\n\nI feel like REQ039 is a duplicate/Sub-requirement of this one",
        "fulltext": "upon ControlLoopStart ActiveNucleo shall before ControlLoopFinish satisfy MonitorGPSLatitude & MonitorGPSLongitude & MonitorGPSAltitude & MonitorGPSHomePosition & SendGPSData",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "before",
            "response": "satisfaction",
            "variables": [
                "ControlLoopStart",
                "ControlLoopFinish",
                "MonitorGPSLatitude",
                "MonitorGPSLongitude",
                "MonitorGPSAltitude",
                "MonitorGPSHomePosition",
                "SendGPSData"
            ],
            "qualifier_word": "upon",
            "pre_condition": "(ControlLoopStart)",
            "regular_condition": "(ControlLoopStart)",
            "conditionTextRange": [
                0,
                20
            ],
            "component_name": "ActiveNucleo",
            "componentTextRange": [
                22,
                33
            ],
            "stop_condition": "(ControlLoopFinish)",
            "timingTextRange": [
                41,
                64
            ],
            "post_condition": "(MonitorGPSLatitude & MonitorGPSLongitude & MonitorGPSAltitude & MonitorGPSHomePosition & SendGPSData)",
            "responseTextRange": [
                66,
                173
            ],
            "diagramVariables": "TC = <b><i>(ControlLoopStart)</i></b>, SC = <b><i>(ControlLoopFinish)</i></b>, Response = <b><i>(MonitorGPSLatitude & MonitorGPSLongitude & MonitorGPSAltitude & MonitorGPSHomePosition & SendGPSData)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(ControlLoopStart)</i></b> is true and any point in the interval where <b><i>(ControlLoopStart)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at least once strictly before the state where the stop condition holds. If the stop condition never occurs in the interval, RES does not need to hold. If the stop condition holds at the trigger, the requirement is not satisfied.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_before_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "regular_condition_unexp_pt": "ControlLoopStart",
            "regular_condition_unexp_ft": "ControlLoopStart",
            "regular_condition_SMV_pt": "ControlLoopStart",
            "regular_condition_SMV_ft": "ControlLoopStart",
            "post_condition_unexp_pt": "((((MonitorGPSLatitude & MonitorGPSLongitude) & MonitorGPSAltitude) & MonitorGPSHomePosition) & SendGPSData)",
            "post_condition_unexp_ft": "((((MonitorGPSLatitude & MonitorGPSLongitude) & MonitorGPSAltitude) & MonitorGPSHomePosition) & SendGPSData)",
            "post_condition_SMV_pt": "((((MonitorGPSLatitude & MonitorGPSLongitude) & MonitorGPSAltitude) & MonitorGPSHomePosition) & SendGPSData)",
            "post_condition_SMV_ft": "((((MonitorGPSLatitude & MonitorGPSLongitude) & MonitorGPSAltitude) & MonitorGPSHomePosition) & SendGPSData)",
            "stop_condition_unexp_pt": "ControlLoopFinish",
            "stop_condition_unexp_ft": "ControlLoopFinish",
            "stop_condition_SMV_pt": "ControlLoopFinish",
            "stop_condition_SMV_ft": "ControlLoopFinish",
            "ft_fetched": "((LAST V (((! $regular_condition_unexp_ft$) & ((! LAST) & (X $regular_condition_unexp_ft$))) -> (X (($post_condition_unexp_ft$ | LAST) V (! $stop_condition_unexp_ft$))))) & ($regular_condition_unexp_ft$ -> (($post_condition_unexp_ft$ | LAST) V (! $stop_condition_unexp_ft$))))",
            "ft": "((LAST V (((! ControlLoopStart) & ((! LAST) & (X ControlLoopStart))) -> (X ((((((MonitorGPSLatitude & MonitorGPSLongitude) & MonitorGPSAltitude) & MonitorGPSHomePosition) & SendGPSData) | LAST) V (! ControlLoopFinish))))) & (ControlLoopStart -> ((((((MonitorGPSLatitude & MonitorGPSLongitude) & MonitorGPSAltitude) & MonitorGPSHomePosition) & SendGPSData) | LAST) V (! ControlLoopFinish))))",
            "pt_fetched": "(H ($stop_condition_unexp_pt$ -> ((H (! $regular_condition_unexp_pt$)) | (((! FTP) & (! ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | FTP)))) & (Y (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | FTP))))))))))",
            "pt": "(H (ControlLoopFinish -> ((H (! ControlLoopStart)) | (((! FTP) & (! (ControlLoopStart & ((Y (! ControlLoopStart)) | FTP)))) & (Y (! ((! ((((MonitorGPSLatitude & MonitorGPSLongitude) & MonitorGPSAltitude) & MonitorGPSHomePosition) & SendGPSData)) S ((! ((((MonitorGPSLatitude & MonitorGPSLongitude) & MonitorGPSAltitude) & MonitorGPSHomePosition) & SendGPSData)) & (ControlLoopStart & ((Y (! ControlLoopStart)) | FTP))))))))))",
            "ptExpanded_fetched": "(H ($stop_condition_SMV_pt$ -> ((H (! $regular_condition_SMV_pt$)) | (((Y TRUE) & (! ($regular_condition_SMV_pt$ & (Z (! $regular_condition_SMV_pt$))))) & (Y (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & (Z (! $regular_condition_SMV_pt$)))))))))))",
            "ptExpanded": "(H (ControlLoopFinish -> ((H (! ControlLoopStart)) | (((Y TRUE) & (! (ControlLoopStart & (Z (! ControlLoopStart))))) & (Y (! ((! ((((MonitorGPSLatitude & MonitorGPSLongitude) & MonitorGPSAltitude) & MonitorGPSHomePosition) & SendGPSData)) S ((! ((((MonitorGPSLatitude & MonitorGPSLongitude) & MonitorGPSAltitude) & MonitorGPSHomePosition) & SendGPSData)) & (ControlLoopStart & (Z (! ControlLoopStart)))))))))))",
            "CoCoSpecCode": "H((ControlLoopFinish => (H(not (ControlLoopStart)) or ((YtoPre(true) and not ((ControlLoopStart and ZtoPre(not (ControlLoopStart))))) and YtoPre(not (SI((ControlLoopStart and ZtoPre(not (ControlLoopStart))),not (((((MonitorGPSLatitude and MonitorGPSLongitude) and MonitorGPSAltitude) and MonitorGPSHomePosition) and SendGPSData)))))))))",
            "ftExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X (($post_condition_SMV_ft$ | LAST) V (! $stop_condition_SMV_ft$))))) & ($regular_condition_SMV_ft$ -> (($post_condition_SMV_ft$ | LAST) V (! $stop_condition_SMV_ft$))))",
            "ftExpandedUnoptimized": "((LAST V (((! ControlLoopStart) & ((! LAST) & (X ControlLoopStart))) -> (X ((((((MonitorGPSLatitude & MonitorGPSLongitude) & MonitorGPSAltitude) & MonitorGPSHomePosition) & SendGPSData) | LAST) V (! ControlLoopFinish))))) & (ControlLoopStart -> ((((((MonitorGPSLatitude & MonitorGPSLongitude) & MonitorGPSAltitude) & MonitorGPSHomePosition) & SendGPSData) | LAST) V (! ControlLoopFinish))))",
            "ftExpanded": "((LAST V (((! ControlLoopStart) & ((! LAST) & (X ControlLoopStart))) -> (X ((((((MonitorGPSLatitude & MonitorGPSLongitude) & MonitorGPSAltitude) & MonitorGPSHomePosition) & SendGPSData) | LAST) V (! ControlLoopFinish))))) & (ControlLoopStart -> ((((((MonitorGPSLatitude & MonitorGPSLongitude) & MonitorGPSAltitude) & MonitorGPSHomePosition) & SendGPSData) | LAST) V (! ControlLoopFinish))))",
            "ftInfAUExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X ($post_condition_SMV_ft$ V (! $stop_condition_SMV_ft$))))) & ($regular_condition_SMV_ft$ -> ($post_condition_SMV_ft$ V (! $stop_condition_SMV_ft$))))",
            "ftInfAUExpanded": "((G (((! ControlLoopStart) & (X ControlLoopStart)) -> (X (((((MonitorGPSLatitude & MonitorGPSLongitude) & MonitorGPSAltitude) & MonitorGPSHomePosition) & SendGPSData) V (! ControlLoopFinish))))) & (ControlLoopStart -> (((((MonitorGPSLatitude & MonitorGPSLongitude) & MonitorGPSAltitude) & MonitorGPSHomePosition) & SendGPSData) V (! ControlLoopFinish))))",
            "component": "ActiveNucleo"
        },
        "status": "",
        "_id": "cca7041c-d8e6-11ef-941f-71fece653e2f"
    },
    {
        "reqid": "REQ065",
        "parent_reqid": "",
        "project": "Drone Requirements v0.4",
        "rationale": "\"Monitor current of brushless, ESCs and servo motors\"\n\nGroup: Data Monitoring\nFunctional\nUnfeasible\nNeeds Further Specification\n\"We do not have sensors to measure the current of the aerodynamic servo motors.\"",
        "comments": "",
        "fulltext": "while MonitoringEnabled System shall always satisfy MonitorBrushlessCurrent & MonitorESCCurrent & MonitorServoMotorCurrent",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": [
                "MonitoringEnabled",
                "MonitorBrushlessCurrent",
                "MonitorESCCurrent",
                "MonitorServoMotorCurrent"
            ],
            "scope_mode": "(MonitoringEnabled)",
            "scopeTextRange": [
                0,
                22
            ],
            "component_name": "System",
            "componentTextRange": [
                24,
                29
            ],
            "timingTextRange": [
                37,
                42
            ],
            "post_condition": "(MonitorBrushlessCurrent & MonitorESCCurrent & MonitorServoMotorCurrent)",
            "responseTextRange": [
                44,
                121
            ],
            "diagramVariables": "M = <b><i>(MonitoringEnabled)</i></b>, Response = <b><i>(MonitorBrushlessCurrent & MonitorESCCurrent & MonitorServoMotorCurrent)</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>(MonitoringEnabled)</i></b> holds.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_null_always_satisfaction.svg",
            "scope_mode_pt": "MonitoringEnabled",
            "scope_mode_ft": "MonitoringEnabled",
            "post_condition_unexp_pt": "((MonitorBrushlessCurrent & MonitorESCCurrent) & MonitorServoMotorCurrent)",
            "post_condition_unexp_ft": "((MonitorBrushlessCurrent & MonitorESCCurrent) & MonitorServoMotorCurrent)",
            "post_condition_SMV_pt": "((MonitorBrushlessCurrent & MonitorESCCurrent) & MonitorServoMotorCurrent)",
            "post_condition_SMV_ft": "((MonitorBrushlessCurrent & MonitorESCCurrent) & MonitorServoMotorCurrent)",
            "ft_fetched": "(LAST V ($scope_mode_ft$ -> $post_condition_unexp_ft$))",
            "ft": "(LAST V (MonitoringEnabled -> ((MonitorBrushlessCurrent & MonitorESCCurrent) & MonitorServoMotorCurrent)))",
            "pt_fetched": "(H ($scope_mode_pt$ -> $post_condition_unexp_pt$))",
            "pt": "(H (MonitoringEnabled -> ((MonitorBrushlessCurrent & MonitorESCCurrent) & MonitorServoMotorCurrent)))",
            "ptExpanded_fetched": "(H ($scope_mode_pt$ -> $post_condition_SMV_pt$))",
            "ptExpanded": "(H (MonitoringEnabled -> ((MonitorBrushlessCurrent & MonitorESCCurrent) & MonitorServoMotorCurrent)))",
            "CoCoSpecCode": "H((MonitoringEnabled => ((MonitorBrushlessCurrent and MonitorESCCurrent) and MonitorServoMotorCurrent)))",
            "ftExpanded_fetched": "(LAST V ($scope_mode_ft$ -> $post_condition_SMV_ft$))",
            "ftExpandedUnoptimized": "(LAST V (MonitoringEnabled -> ((MonitorBrushlessCurrent & MonitorESCCurrent) & MonitorServoMotorCurrent)))",
            "ftExpanded": "(LAST V (MonitoringEnabled -> ((MonitorBrushlessCurrent & MonitorESCCurrent) & MonitorServoMotorCurrent)))",
            "ftInfAUExpanded_fetched": "(G ($scope_mode_ft$ -> $post_condition_SMV_ft$))",
            "ftInfAUExpanded": "(G (MonitoringEnabled -> ((MonitorBrushlessCurrent & MonitorESCCurrent) & MonitorServoMotorCurrent)))",
            "component": "System"
        },
        "status": "",
        "_id": "cca7041d-d8e6-11ef-941f-71fece653e2f"
    },
    {
        "reqid": "REQ055",
        "parent_reqid": "",
        "project": "Drone Requirements v0.4",
        "rationale": "\"Monitor temperature inside bay area\"\n\nGroup: Data Monitoring\nFunctional\nPotentially Unfeasible\nNeeds Further Specification\n\"What is bay area?\"",
        "comments": "",
        "fulltext": "upon ControlLoopStart ActiveNucleo shall before ControlLoopFinish satisfy MonitorBayAreaTemperature & SendBayAreaTemperatureData",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "before",
            "response": "satisfaction",
            "variables": [
                "ControlLoopStart",
                "ControlLoopFinish",
                "MonitorBayAreaTemperature",
                "SendBayAreaTemperatureData"
            ],
            "qualifier_word": "upon",
            "pre_condition": "(ControlLoopStart)",
            "regular_condition": "(ControlLoopStart)",
            "conditionTextRange": [
                0,
                20
            ],
            "component_name": "ActiveNucleo",
            "componentTextRange": [
                22,
                33
            ],
            "stop_condition": "(ControlLoopFinish)",
            "timingTextRange": [
                41,
                64
            ],
            "post_condition": "(MonitorBayAreaTemperature & SendBayAreaTemperatureData)",
            "responseTextRange": [
                66,
                127
            ],
            "diagramVariables": "TC = <b><i>(ControlLoopStart)</i></b>, SC = <b><i>(ControlLoopFinish)</i></b>, Response = <b><i>(MonitorBayAreaTemperature & SendBayAreaTemperatureData)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(ControlLoopStart)</i></b> is true and any point in the interval where <b><i>(ControlLoopStart)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at least once strictly before the state where the stop condition holds. If the stop condition never occurs in the interval, RES does not need to hold. If the stop condition holds at the trigger, the requirement is not satisfied.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_before_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "regular_condition_unexp_pt": "ControlLoopStart",
            "regular_condition_unexp_ft": "ControlLoopStart",
            "regular_condition_SMV_pt": "ControlLoopStart",
            "regular_condition_SMV_ft": "ControlLoopStart",
            "post_condition_unexp_pt": "(MonitorBayAreaTemperature & SendBayAreaTemperatureData)",
            "post_condition_unexp_ft": "(MonitorBayAreaTemperature & SendBayAreaTemperatureData)",
            "post_condition_SMV_pt": "(MonitorBayAreaTemperature & SendBayAreaTemperatureData)",
            "post_condition_SMV_ft": "(MonitorBayAreaTemperature & SendBayAreaTemperatureData)",
            "stop_condition_unexp_pt": "ControlLoopFinish",
            "stop_condition_unexp_ft": "ControlLoopFinish",
            "stop_condition_SMV_pt": "ControlLoopFinish",
            "stop_condition_SMV_ft": "ControlLoopFinish",
            "ft_fetched": "((LAST V (((! $regular_condition_unexp_ft$) & ((! LAST) & (X $regular_condition_unexp_ft$))) -> (X (($post_condition_unexp_ft$ | LAST) V (! $stop_condition_unexp_ft$))))) & ($regular_condition_unexp_ft$ -> (($post_condition_unexp_ft$ | LAST) V (! $stop_condition_unexp_ft$))))",
            "ft": "((LAST V (((! ControlLoopStart) & ((! LAST) & (X ControlLoopStart))) -> (X (((MonitorBayAreaTemperature & SendBayAreaTemperatureData) | LAST) V (! ControlLoopFinish))))) & (ControlLoopStart -> (((MonitorBayAreaTemperature & SendBayAreaTemperatureData) | LAST) V (! ControlLoopFinish))))",
            "pt_fetched": "(H ($stop_condition_unexp_pt$ -> ((H (! $regular_condition_unexp_pt$)) | (((! FTP) & (! ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | FTP)))) & (Y (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | FTP))))))))))",
            "pt": "(H (ControlLoopFinish -> ((H (! ControlLoopStart)) | (((! FTP) & (! (ControlLoopStart & ((Y (! ControlLoopStart)) | FTP)))) & (Y (! ((! (MonitorBayAreaTemperature & SendBayAreaTemperatureData)) S ((! (MonitorBayAreaTemperature & SendBayAreaTemperatureData)) & (ControlLoopStart & ((Y (! ControlLoopStart)) | FTP))))))))))",
            "ptExpanded_fetched": "(H ($stop_condition_SMV_pt$ -> ((H (! $regular_condition_SMV_pt$)) | (((Y TRUE) & (! ($regular_condition_SMV_pt$ & (Z (! $regular_condition_SMV_pt$))))) & (Y (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & (Z (! $regular_condition_SMV_pt$)))))))))))",
            "ptExpanded": "(H (ControlLoopFinish -> ((H (! ControlLoopStart)) | (((Y TRUE) & (! (ControlLoopStart & (Z (! ControlLoopStart))))) & (Y (! ((! (MonitorBayAreaTemperature & SendBayAreaTemperatureData)) S ((! (MonitorBayAreaTemperature & SendBayAreaTemperatureData)) & (ControlLoopStart & (Z (! ControlLoopStart)))))))))))",
            "CoCoSpecCode": "H((ControlLoopFinish => (H(not (ControlLoopStart)) or ((YtoPre(true) and not ((ControlLoopStart and ZtoPre(not (ControlLoopStart))))) and YtoPre(not (SI((ControlLoopStart and ZtoPre(not (ControlLoopStart))),not ((MonitorBayAreaTemperature and SendBayAreaTemperatureData)))))))))",
            "ftExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X (($post_condition_SMV_ft$ | LAST) V (! $stop_condition_SMV_ft$))))) & ($regular_condition_SMV_ft$ -> (($post_condition_SMV_ft$ | LAST) V (! $stop_condition_SMV_ft$))))",
            "ftExpandedUnoptimized": "((LAST V (((! ControlLoopStart) & ((! LAST) & (X ControlLoopStart))) -> (X (((MonitorBayAreaTemperature & SendBayAreaTemperatureData) | LAST) V (! ControlLoopFinish))))) & (ControlLoopStart -> (((MonitorBayAreaTemperature & SendBayAreaTemperatureData) | LAST) V (! ControlLoopFinish))))",
            "ftExpanded": "((LAST V (((! ControlLoopStart) & ((! LAST) & (X ControlLoopStart))) -> (X (((MonitorBayAreaTemperature & SendBayAreaTemperatureData) | LAST) V (! ControlLoopFinish))))) & (ControlLoopStart -> (((MonitorBayAreaTemperature & SendBayAreaTemperatureData) | LAST) V (! ControlLoopFinish))))",
            "ftInfAUExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X ($post_condition_SMV_ft$ V (! $stop_condition_SMV_ft$))))) & ($regular_condition_SMV_ft$ -> ($post_condition_SMV_ft$ V (! $stop_condition_SMV_ft$))))",
            "ftInfAUExpanded": "((G (((! ControlLoopStart) & (X ControlLoopStart)) -> (X ((MonitorBayAreaTemperature & SendBayAreaTemperatureData) V (! ControlLoopFinish))))) & (ControlLoopStart -> ((MonitorBayAreaTemperature & SendBayAreaTemperatureData) V (! ControlLoopFinish))))",
            "component": "ActiveNucleo"
        },
        "status": "",
        "_id": "cca7041e-d8e6-11ef-941f-71fece653e2f"
    },
    {
        "reqid": "REQ024",
        "parent_reqid": "",
        "project": "Drone Requirements v0.4",
        "rationale": "\"Work on any operational system\"\n\nGroup: TBD\nNon-functional\nUnfeasible\nNeeds Further Specification\n\"Unclear wich software systems the user is refering to.\"",
        "comments": "Non-functional requirement: Out of scope",
        "fulltext": "",
        "semantics": {},
        "status": "",
        "_id": "cca7041f-d8e6-11ef-941f-71fece653e2f"
    },
    {
        "reqid": "REQ012",
        "parent_reqid": "",
        "project": "Drone Requirements v0.4",
        "rationale": "\"Multiple UAVs acceptance\"\n\nGroup: TBD\nFunctional\nPotentially Unfeasible\nNeeds Further Specification",
        "comments": "Honestly I don't really know what this is supposed to mean, so I'm leaving this one blank for now",
        "fulltext": "",
        "semantics": {},
        "status": "",
        "_id": "cca70420-d8e6-11ef-941f-71fece653e2f"
    },
    {
        "reqid": "REQ059",
        "parent_reqid": "",
        "project": "Drone Requirements v0.4",
        "rationale": "\"Monitor battery discharge rate\"\n\nGroup: Data Monitoring\nFunctional\nFeasible\nNeeds Further Specification",
        "comments": "",
        "fulltext": "upon ControlLoopStart ActiveNucleo shall before ControlLoopFinish satisfy MonitorBatteryDischargeRate & SendBatteryDischargeRateData",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "before",
            "response": "satisfaction",
            "variables": [
                "ControlLoopStart",
                "ControlLoopFinish",
                "MonitorBatteryDischargeRate",
                "SendBatteryDischargeRateData"
            ],
            "qualifier_word": "upon",
            "pre_condition": "(ControlLoopStart)",
            "regular_condition": "(ControlLoopStart)",
            "conditionTextRange": [
                0,
                20
            ],
            "component_name": "ActiveNucleo",
            "componentTextRange": [
                22,
                33
            ],
            "stop_condition": "(ControlLoopFinish)",
            "timingTextRange": [
                41,
                64
            ],
            "post_condition": "(MonitorBatteryDischargeRate & SendBatteryDischargeRateData)",
            "responseTextRange": [
                66,
                131
            ],
            "diagramVariables": "TC = <b><i>(ControlLoopStart)</i></b>, SC = <b><i>(ControlLoopFinish)</i></b>, Response = <b><i>(MonitorBatteryDischargeRate & SendBatteryDischargeRateData)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(ControlLoopStart)</i></b> is true and any point in the interval where <b><i>(ControlLoopStart)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at least once strictly before the state where the stop condition holds. If the stop condition never occurs in the interval, RES does not need to hold. If the stop condition holds at the trigger, the requirement is not satisfied.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_before_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "regular_condition_unexp_pt": "ControlLoopStart",
            "regular_condition_unexp_ft": "ControlLoopStart",
            "regular_condition_SMV_pt": "ControlLoopStart",
            "regular_condition_SMV_ft": "ControlLoopStart",
            "post_condition_unexp_pt": "(MonitorBatteryDischargeRate & SendBatteryDischargeRateData)",
            "post_condition_unexp_ft": "(MonitorBatteryDischargeRate & SendBatteryDischargeRateData)",
            "post_condition_SMV_pt": "(MonitorBatteryDischargeRate & SendBatteryDischargeRateData)",
            "post_condition_SMV_ft": "(MonitorBatteryDischargeRate & SendBatteryDischargeRateData)",
            "stop_condition_unexp_pt": "ControlLoopFinish",
            "stop_condition_unexp_ft": "ControlLoopFinish",
            "stop_condition_SMV_pt": "ControlLoopFinish",
            "stop_condition_SMV_ft": "ControlLoopFinish",
            "ft_fetched": "((LAST V (((! $regular_condition_unexp_ft$) & ((! LAST) & (X $regular_condition_unexp_ft$))) -> (X (($post_condition_unexp_ft$ | LAST) V (! $stop_condition_unexp_ft$))))) & ($regular_condition_unexp_ft$ -> (($post_condition_unexp_ft$ | LAST) V (! $stop_condition_unexp_ft$))))",
            "ft": "((LAST V (((! ControlLoopStart) & ((! LAST) & (X ControlLoopStart))) -> (X (((MonitorBatteryDischargeRate & SendBatteryDischargeRateData) | LAST) V (! ControlLoopFinish))))) & (ControlLoopStart -> (((MonitorBatteryDischargeRate & SendBatteryDischargeRateData) | LAST) V (! ControlLoopFinish))))",
            "pt_fetched": "(H ($stop_condition_unexp_pt$ -> ((H (! $regular_condition_unexp_pt$)) | (((! FTP) & (! ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | FTP)))) & (Y (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | FTP))))))))))",
            "pt": "(H (ControlLoopFinish -> ((H (! ControlLoopStart)) | (((! FTP) & (! (ControlLoopStart & ((Y (! ControlLoopStart)) | FTP)))) & (Y (! ((! (MonitorBatteryDischargeRate & SendBatteryDischargeRateData)) S ((! (MonitorBatteryDischargeRate & SendBatteryDischargeRateData)) & (ControlLoopStart & ((Y (! ControlLoopStart)) | FTP))))))))))",
            "ptExpanded_fetched": "(H ($stop_condition_SMV_pt$ -> ((H (! $regular_condition_SMV_pt$)) | (((Y TRUE) & (! ($regular_condition_SMV_pt$ & (Z (! $regular_condition_SMV_pt$))))) & (Y (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & (Z (! $regular_condition_SMV_pt$)))))))))))",
            "ptExpanded": "(H (ControlLoopFinish -> ((H (! ControlLoopStart)) | (((Y TRUE) & (! (ControlLoopStart & (Z (! ControlLoopStart))))) & (Y (! ((! (MonitorBatteryDischargeRate & SendBatteryDischargeRateData)) S ((! (MonitorBatteryDischargeRate & SendBatteryDischargeRateData)) & (ControlLoopStart & (Z (! ControlLoopStart)))))))))))",
            "CoCoSpecCode": "H((ControlLoopFinish => (H(not (ControlLoopStart)) or ((YtoPre(true) and not ((ControlLoopStart and ZtoPre(not (ControlLoopStart))))) and YtoPre(not (SI((ControlLoopStart and ZtoPre(not (ControlLoopStart))),not ((MonitorBatteryDischargeRate and SendBatteryDischargeRateData)))))))))",
            "ftExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X (($post_condition_SMV_ft$ | LAST) V (! $stop_condition_SMV_ft$))))) & ($regular_condition_SMV_ft$ -> (($post_condition_SMV_ft$ | LAST) V (! $stop_condition_SMV_ft$))))",
            "ftExpandedUnoptimized": "((LAST V (((! ControlLoopStart) & ((! LAST) & (X ControlLoopStart))) -> (X (((MonitorBatteryDischargeRate & SendBatteryDischargeRateData) | LAST) V (! ControlLoopFinish))))) & (ControlLoopStart -> (((MonitorBatteryDischargeRate & SendBatteryDischargeRateData) | LAST) V (! ControlLoopFinish))))",
            "ftExpanded": "((LAST V (((! ControlLoopStart) & ((! LAST) & (X ControlLoopStart))) -> (X (((MonitorBatteryDischargeRate & SendBatteryDischargeRateData) | LAST) V (! ControlLoopFinish))))) & (ControlLoopStart -> (((MonitorBatteryDischargeRate & SendBatteryDischargeRateData) | LAST) V (! ControlLoopFinish))))",
            "ftInfAUExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X ($post_condition_SMV_ft$ V (! $stop_condition_SMV_ft$))))) & ($regular_condition_SMV_ft$ -> ($post_condition_SMV_ft$ V (! $stop_condition_SMV_ft$))))",
            "ftInfAUExpanded": "((G (((! ControlLoopStart) & (X ControlLoopStart)) -> (X ((MonitorBatteryDischargeRate & SendBatteryDischargeRateData) V (! ControlLoopFinish))))) & (ControlLoopStart -> ((MonitorBatteryDischargeRate & SendBatteryDischargeRateData) V (! ControlLoopFinish))))",
            "component": "ActiveNucleo"
        },
        "status": "",
        "_id": "cca70421-d8e6-11ef-941f-71fece653e2f"
    },
    {
        "reqid": "REQ013_1",
        "parent_reqid": "REQ013",
        "project": "Drone Requirements v0.4",
        "rationale": "",
        "comments": "",
        "fulltext": "when WaypointsReceived Raspberry shall within 10 milliseconds satisfy SendReferencesToJetson",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "within",
            "response": "satisfaction",
            "variables": [
                "WaypointsReceived",
                "SendReferencesToJetson"
            ],
            "qualifier_word": "when",
            "pre_condition": "(WaypointsReceived)",
            "regular_condition": "(WaypointsReceived)",
            "conditionTextRange": [
                0,
                21
            ],
            "component_name": "Raspberry",
            "componentTextRange": [
                23,
                31
            ],
            "duration": "10",
            "timingTextRange": [
                39,
                60
            ],
            "post_condition": "(SendReferencesToJetson)",
            "responseTextRange": [
                62,
                91
            ],
            "diagramVariables": "TC = <b><i>(WaypointsReceived)</i></b>,  n = <b><i>10</i></b>, Response = <b><i>(SendReferencesToJetson)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(WaypointsReceived)</i></b> is true and any point in the interval where <b><i>(WaypointsReceived)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some point with distance <= <b><i>10</i></b> from the trigger (i.e., at trigger, trigger+1, ..., or trigger+<b><i>10</i></b>). If the interval ends sooner than trigger+<b><i>10</i></b>, then RES need not hold.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_within_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "regular_condition_unexp_pt": "WaypointsReceived",
            "regular_condition_unexp_ft": "WaypointsReceived",
            "regular_condition_SMV_pt": "WaypointsReceived",
            "regular_condition_SMV_ft": "WaypointsReceived",
            "post_condition_unexp_pt": "SendReferencesToJetson",
            "post_condition_unexp_ft": "SendReferencesToJetson",
            "post_condition_SMV_pt": "SendReferencesToJetson",
            "post_condition_SMV_ft": "SendReferencesToJetson",
            "ft_fetched": "((LAST V (((! $regular_condition_unexp_ft$) & ((! LAST) & (X $regular_condition_unexp_ft$))) -> (X ((F[<=$duration$] $post_condition_unexp_ft$) | (F[<$duration$] LAST))))) & ($regular_condition_unexp_ft$ -> ((F[<=$duration$] $post_condition_unexp_ft$) | (F[<$duration$] LAST))))",
            "ft": "((LAST V (((! WaypointsReceived) & ((! LAST) & (X WaypointsReceived))) -> (X ((F[<=10] SendReferencesToJetson) | (F[<10] LAST))))) & (WaypointsReceived -> ((F[<=10] SendReferencesToJetson) | (F[<10] LAST))))",
            "pt_fetched": "(H ((O[=$duration$] (($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | FTP)) & (! $post_condition_unexp_pt$))) -> (O[<$duration$] (FTP | $post_condition_unexp_pt$))))",
            "pt": "(H ((O[=10] ((WaypointsReceived & ((Y (! WaypointsReceived)) | FTP)) & (! SendReferencesToJetson))) -> (O[<10] (FTP | SendReferencesToJetson))))",
            "ptExpanded_fetched": "(H ((O[=$duration$] (($regular_condition_SMV_pt$ & (Z (! $regular_condition_SMV_pt$))) & (! $post_condition_SMV_pt$))) -> (O[<$duration$] ((! (Y TRUE)) | $post_condition_SMV_pt$))))",
            "ptExpanded": "(H ((O[10,10] ((WaypointsReceived & (Z (! WaypointsReceived))) & (! SendReferencesToJetson))) -> (O[0,9] ((! (Y TRUE)) | SendReferencesToJetson))))",
            "CoCoSpecCode": "H((OT(10, 10, ((WaypointsReceived and ZtoPre(not (WaypointsReceived))) and not (SendReferencesToJetson))) => OT(9, 0, (not (YtoPre(true)) or SendReferencesToJetson))))",
            "ftExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X ((F[<=$duration$] $post_condition_SMV_ft$) | (F[<$duration$] LAST))))) & ($regular_condition_SMV_ft$ -> ((F[<=$duration$] $post_condition_SMV_ft$) | (F[<$duration$] LAST))))",
            "ftExpandedUnoptimized": "((LAST V (((! WaypointsReceived) & ((! LAST) & (X WaypointsReceived))) -> (X ((F[0,10] SendReferencesToJetson) | (F[0,9] LAST))))) & (WaypointsReceived -> ((F[0,10] SendReferencesToJetson) | (F[0,9] LAST))))",
            "ftExpanded": "((LAST V (((! WaypointsReceived) & ((! LAST) & (X WaypointsReceived))) -> (X ((F[0,10] SendReferencesToJetson) | (F[0,9] LAST))))) & (WaypointsReceived -> ((F[0,10] SendReferencesToJetson) | (F[0,9] LAST))))",
            "ftInfAUExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X (F[<=$duration$] $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> (F[<=$duration$] $post_condition_SMV_ft$)))",
            "ftInfAUExpanded": "((G (((! WaypointsReceived) & (X WaypointsReceived)) -> (X (F[0,10] SendReferencesToJetson)))) & (WaypointsReceived -> (F[0,10] SendReferencesToJetson)))",
            "component": "Raspberry"
        },
        "status": "",
        "_id": "cca70422-d8e6-11ef-941f-71fece653e2f"
    },
    {
        "reqid": "REQ036",
        "parent_reqid": "",
        "project": "Drone Requirements v0.4",
        "rationale": "\"Monitor tilting mechanism servo motors angular speed\"\n\nGroup: Data Monitoring\nFunctional\nPotentially Unfeasible\nNeeds Further Specification\n\"Need to check with Richard if this measurement is provided by the servo controllers.\"",
        "comments": "Going off the note left on this one, we would be able to refine this by saying something like \"the servo controllers will always provide angular speed data\" and the controller can always receive it",
        "fulltext": "upon ControlLoopStart ActiveNucleo shall before ControlLoopFinish satisfy (MonitorServoMotors & SendServoMotorsData)",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "before",
            "response": "satisfaction",
            "variables": [
                "ControlLoopStart",
                "ControlLoopFinish",
                "MonitorServoMotors",
                "SendServoMotorsData"
            ],
            "qualifier_word": "upon",
            "pre_condition": "(ControlLoopStart)",
            "regular_condition": "(ControlLoopStart)",
            "conditionTextRange": [
                0,
                20
            ],
            "component_name": "ActiveNucleo",
            "componentTextRange": [
                22,
                33
            ],
            "stop_condition": "(ControlLoopFinish)",
            "timingTextRange": [
                41,
                64
            ],
            "post_condition": "(( MonitorServoMotors & SendServoMotorsData ))",
            "responseTextRange": [
                66,
                115
            ],
            "diagramVariables": "TC = <b><i>(ControlLoopStart)</i></b>, SC = <b><i>(ControlLoopFinish)</i></b>, Response = <b><i>(( MonitorServoMotors & SendServoMotorsData ))</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(ControlLoopStart)</i></b> is true and any point in the interval where <b><i>(ControlLoopStart)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at least once strictly before the state where the stop condition holds. If the stop condition never occurs in the interval, RES does not need to hold. If the stop condition holds at the trigger, the requirement is not satisfied.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_before_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "regular_condition_unexp_pt": "ControlLoopStart",
            "regular_condition_unexp_ft": "ControlLoopStart",
            "regular_condition_SMV_pt": "ControlLoopStart",
            "regular_condition_SMV_ft": "ControlLoopStart",
            "post_condition_unexp_pt": "(MonitorServoMotors & SendServoMotorsData)",
            "post_condition_unexp_ft": "(MonitorServoMotors & SendServoMotorsData)",
            "post_condition_SMV_pt": "(MonitorServoMotors & SendServoMotorsData)",
            "post_condition_SMV_ft": "(MonitorServoMotors & SendServoMotorsData)",
            "stop_condition_unexp_pt": "ControlLoopFinish",
            "stop_condition_unexp_ft": "ControlLoopFinish",
            "stop_condition_SMV_pt": "ControlLoopFinish",
            "stop_condition_SMV_ft": "ControlLoopFinish",
            "ft_fetched": "((LAST V (((! $regular_condition_unexp_ft$) & ((! LAST) & (X $regular_condition_unexp_ft$))) -> (X (($post_condition_unexp_ft$ | LAST) V (! $stop_condition_unexp_ft$))))) & ($regular_condition_unexp_ft$ -> (($post_condition_unexp_ft$ | LAST) V (! $stop_condition_unexp_ft$))))",
            "ft": "((LAST V (((! ControlLoopStart) & ((! LAST) & (X ControlLoopStart))) -> (X (((MonitorServoMotors & SendServoMotorsData) | LAST) V (! ControlLoopFinish))))) & (ControlLoopStart -> (((MonitorServoMotors & SendServoMotorsData) | LAST) V (! ControlLoopFinish))))",
            "pt_fetched": "(H ($stop_condition_unexp_pt$ -> ((H (! $regular_condition_unexp_pt$)) | (((! FTP) & (! ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | FTP)))) & (Y (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | FTP))))))))))",
            "pt": "(H (ControlLoopFinish -> ((H (! ControlLoopStart)) | (((! FTP) & (! (ControlLoopStart & ((Y (! ControlLoopStart)) | FTP)))) & (Y (! ((! (MonitorServoMotors & SendServoMotorsData)) S ((! (MonitorServoMotors & SendServoMotorsData)) & (ControlLoopStart & ((Y (! ControlLoopStart)) | FTP))))))))))",
            "ptExpanded_fetched": "(H ($stop_condition_SMV_pt$ -> ((H (! $regular_condition_SMV_pt$)) | (((Y TRUE) & (! ($regular_condition_SMV_pt$ & (Z (! $regular_condition_SMV_pt$))))) & (Y (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & (Z (! $regular_condition_SMV_pt$)))))))))))",
            "ptExpanded": "(H (ControlLoopFinish -> ((H (! ControlLoopStart)) | (((Y TRUE) & (! (ControlLoopStart & (Z (! ControlLoopStart))))) & (Y (! ((! (MonitorServoMotors & SendServoMotorsData)) S ((! (MonitorServoMotors & SendServoMotorsData)) & (ControlLoopStart & (Z (! ControlLoopStart)))))))))))",
            "CoCoSpecCode": "H((ControlLoopFinish => (H(not (ControlLoopStart)) or ((YtoPre(true) and not ((ControlLoopStart and ZtoPre(not (ControlLoopStart))))) and YtoPre(not (SI((ControlLoopStart and ZtoPre(not (ControlLoopStart))),not ((MonitorServoMotors and SendServoMotorsData)))))))))",
            "ftExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X (($post_condition_SMV_ft$ | LAST) V (! $stop_condition_SMV_ft$))))) & ($regular_condition_SMV_ft$ -> (($post_condition_SMV_ft$ | LAST) V (! $stop_condition_SMV_ft$))))",
            "ftExpandedUnoptimized": "((LAST V (((! ControlLoopStart) & ((! LAST) & (X ControlLoopStart))) -> (X (((MonitorServoMotors & SendServoMotorsData) | LAST) V (! ControlLoopFinish))))) & (ControlLoopStart -> (((MonitorServoMotors & SendServoMotorsData) | LAST) V (! ControlLoopFinish))))",
            "ftExpanded": "((LAST V (((! ControlLoopStart) & ((! LAST) & (X ControlLoopStart))) -> (X (((MonitorServoMotors & SendServoMotorsData) | LAST) V (! ControlLoopFinish))))) & (ControlLoopStart -> (((MonitorServoMotors & SendServoMotorsData) | LAST) V (! ControlLoopFinish))))",
            "ftInfAUExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X ($post_condition_SMV_ft$ V (! $stop_condition_SMV_ft$))))) & ($regular_condition_SMV_ft$ -> ($post_condition_SMV_ft$ V (! $stop_condition_SMV_ft$))))",
            "ftInfAUExpanded": "((G (((! ControlLoopStart) & (X ControlLoopStart)) -> (X ((MonitorServoMotors & SendServoMotorsData) V (! ControlLoopFinish))))) & (ControlLoopStart -> ((MonitorServoMotors & SendServoMotorsData) V (! ControlLoopFinish))))",
            "component": "ActiveNucleo"
        },
        "status": "",
        "_id": "cca70423-d8e6-11ef-941f-71fece653e2f"
    },
    {
        "reqid": "REQ009",
        "parent_reqid": "",
        "project": "Drone Requirements v0.4",
        "rationale": "\"Controller Performance evaluation\"\n\nGroup: Monitoring\nFunctional\nFeasible\nNeeds Further Specification",
        "comments": "This one could definitely do with more detail: how often should be performance be evaluted? On what metrics?\n\nv0.2: Added scope and condition to incorporate the simulation mode",
        "fulltext": "after SimulationMode when SimulationDataSaved System shall satisfy EvaluateControllerPerformance",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "after",
                "exclusive": false,
                "required": false
            },
            "condition": "regular",
            "timing": "null",
            "response": "satisfaction",
            "variables": [
                "SimulationMode",
                "SimulationDataSaved",
                "EvaluateControllerPerformance"
            ],
            "scope_mode": "SimulationMode",
            "scopeTextRange": [
                0,
                19
            ],
            "qualifier_word": "when",
            "pre_condition": "(SimulationDataSaved)",
            "regular_condition": "(SimulationDataSaved)",
            "conditionTextRange": [
                21,
                44
            ],
            "component_name": "System",
            "componentTextRange": [
                46,
                51
            ],
            "post_condition": "(EvaluateControllerPerformance)",
            "responseTextRange": [
                59,
                95
            ],
            "diagramVariables": "M = <b><i>SimulationMode</i></b>, TC = <b><i>(SimulationDataSaved)</i></b>, Response = <b><i>(EvaluateControllerPerformance)</i></b>.",
            "description": "ENFORCED: in the interval (if defined) starting strictly after the first <b><i>SimulationMode</i></b> interval and spanning to the end of the execution.\nTRIGGER: first point in the interval if <b><i>(SimulationDataSaved)</i></b> is true and any point in the interval where <b><i>(SimulationDataSaved)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/after_regular_null_satisfaction.svg",
            "scope_mode_pt": "SimulationMode",
            "scope_mode_ft": "SimulationMode",
            "regular_condition_unexp_pt": "SimulationDataSaved",
            "regular_condition_unexp_ft": "SimulationDataSaved",
            "regular_condition_SMV_pt": "SimulationDataSaved",
            "regular_condition_SMV_ft": "SimulationDataSaved",
            "post_condition_unexp_pt": "EvaluateControllerPerformance",
            "post_condition_unexp_ft": "EvaluateControllerPerformance",
            "post_condition_SMV_pt": "EvaluateControllerPerformance",
            "post_condition_SMV_ft": "EvaluateControllerPerformance",
            "ft_fetched": "(((! FLin_$scope_mode_ft$) U (FLin_$scope_mode_ft$ & (X ((LAST V (((! $regular_condition_unexp_ft$) & ((! LAST) & (X $regular_condition_unexp_ft$))) -> (X ((! LAST) U $post_condition_unexp_ft$)))) & ($regular_condition_unexp_ft$ -> ((! LAST) U $post_condition_unexp_ft$)))))) | (LAST V (! FLin_$scope_mode_ft$)))",
            "ft": "(((! FLin_SimulationMode) U (FLin_SimulationMode & (X ((LAST V (((! SimulationDataSaved) & ((! LAST) & (X SimulationDataSaved))) -> (X ((! LAST) U EvaluateControllerPerformance)))) & (SimulationDataSaved -> ((! LAST) U EvaluateControllerPerformance)))))) | (LAST V (! FLin_SimulationMode)))",
            "pt_fetched": "((O FLin_$scope_mode_pt$) -> (((! $regular_condition_unexp_pt$) S ((! $regular_condition_unexp_pt$) & FLin_$scope_mode_pt$)) | (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | FLin_$scope_mode_pt$)))))))",
            "pt": "((O FLin_SimulationMode) -> (((! SimulationDataSaved) S ((! SimulationDataSaved) & FLin_SimulationMode)) | (! ((! EvaluateControllerPerformance) S ((! EvaluateControllerPerformance) & (SimulationDataSaved & ((Y (! SimulationDataSaved)) | FLin_SimulationMode)))))))",
            "ptExpanded_fetched": "((O (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) & (Y (H (! ((! $scope_mode_pt$) & (Y $scope_mode_pt$))))))) -> (((! $regular_condition_SMV_pt$) S ((! $regular_condition_SMV_pt$) & (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) & (Y (H (! ((! $scope_mode_pt$) & (Y $scope_mode_pt$)))))))) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) & (Y (H (! ((! $scope_mode_pt$) & (Y $scope_mode_pt$)))))))))))))",
            "ptExpanded": "((O (((! SimulationMode) & (Y SimulationMode)) & (Y (H (! ((! SimulationMode) & (Y SimulationMode))))))) -> (((! SimulationDataSaved) S ((! SimulationDataSaved) & (((! SimulationMode) & (Y SimulationMode)) & (Y (H (! ((! SimulationMode) & (Y SimulationMode)))))))) | (! ((! EvaluateControllerPerformance) S ((! EvaluateControllerPerformance) & (SimulationDataSaved & ((Y (! SimulationDataSaved)) | (((! SimulationMode) & (Y SimulationMode)) & (Y (H (! ((! SimulationMode) & (Y SimulationMode)))))))))))))",
            "CoCoSpecCode": "(O(((not (SimulationMode) and YtoPre(SimulationMode)) and YtoPre(H(not ((not (SimulationMode) and YtoPre(SimulationMode))))))) => (SI(((not (SimulationMode) and YtoPre(SimulationMode)) and YtoPre(H(not ((not (SimulationMode) and YtoPre(SimulationMode)))))),not (SimulationDataSaved)) or not (SI((SimulationDataSaved and (YtoPre(not (SimulationDataSaved)) or ((not (SimulationMode) and YtoPre(SimulationMode)) and YtoPre(H(not ((not (SimulationMode) and YtoPre(SimulationMode)))))))),not (EvaluateControllerPerformance)))))",
            "ftExpanded_fetched": "(((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) & (X ((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X ((! LAST) U $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> ((! LAST) U $post_condition_SMV_ft$)))))) | (LAST V (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))",
            "ftExpandedUnoptimized": "(((! ((SimulationMode & (! LAST)) & (X (! SimulationMode)))) U (((SimulationMode & (! LAST)) & (X (! SimulationMode))) & (X ((LAST V (((! SimulationDataSaved) & ((! LAST) & (X SimulationDataSaved))) -> (X ((! LAST) U EvaluateControllerPerformance)))) & (SimulationDataSaved -> ((! LAST) U EvaluateControllerPerformance)))))) | (LAST V (! ((SimulationMode & (! LAST)) & (X (! SimulationMode))))))",
            "ftExpanded": "(((! ((SimulationMode & (! LAST)) & (X (! SimulationMode)))) U (((SimulationMode & (! LAST)) & (X (! SimulationMode))) & (X ((LAST V (((! SimulationDataSaved) & ((! LAST) & (X SimulationDataSaved))) -> (X ((! LAST) U EvaluateControllerPerformance)))) & (SimulationDataSaved -> ((! LAST) U EvaluateControllerPerformance)))))) | (LAST V (! ((SimulationMode & (! LAST)) & (X (! SimulationMode))))))",
            "ftInfAUExpanded_fetched": "(((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) & (X ((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X (F $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> (F $post_condition_SMV_ft$)))))) | (G (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))",
            "ftInfAUExpanded": "(((! (SimulationMode & (X (! SimulationMode)))) U ((SimulationMode & (X (! SimulationMode))) & (X ((G (((! SimulationDataSaved) & (X SimulationDataSaved)) -> (X (F EvaluateControllerPerformance)))) & (SimulationDataSaved -> (F EvaluateControllerPerformance)))))) | (G (! (SimulationMode & (X (! SimulationMode))))))",
            "component": "System"
        },
        "status": "",
        "_id": "cca70424-d8e6-11ef-941f-71fece653e2f"
    },
    {
        "reqid": "REQ066",
        "parent_reqid": "",
        "project": "Drone Requirements v0.4",
        "rationale": "\"Servo Motors Individual Angle\"\n\nGroup: Data Monitoring\nFunctional\nPotentially Unfeasible\nNeeds Further Specification\n\"Duplicate of REQ037\"\n\"It is only possible to show the commanded position of the aerodynamic surface servos, full feedback is not available.\"",
        "comments": "",
        "fulltext": "",
        "semantics": {},
        "status": "",
        "_id": "cca70425-d8e6-11ef-941f-71fece653e2f"
    },
    {
        "reqid": "REQ060",
        "parent_reqid": "",
        "project": "Drone Requirements v0.4",
        "rationale": "\"Monitor current consumption in each voltage bus\"\n\nGroup: Data Monitoring\nFunctional\nLikely Unfeasible\nNeeds Further Specification\n\"I don't believe we have sensors for this.\"",
        "comments": "",
        "fulltext": "upon ControlLoopStart ActiveNucleo shall before ControlLoopFinish satisfy MonitorVoltageBusConsumption & SendVoltageBusConsumptionData",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "before",
            "response": "satisfaction",
            "variables": [
                "ControlLoopStart",
                "ControlLoopFinish",
                "MonitorVoltageBusConsumption",
                "SendVoltageBusConsumptionData"
            ],
            "qualifier_word": "upon",
            "pre_condition": "(ControlLoopStart)",
            "regular_condition": "(ControlLoopStart)",
            "conditionTextRange": [
                0,
                20
            ],
            "component_name": "ActiveNucleo",
            "componentTextRange": [
                22,
                33
            ],
            "stop_condition": "(ControlLoopFinish)",
            "timingTextRange": [
                41,
                64
            ],
            "post_condition": "(MonitorVoltageBusConsumption & SendVoltageBusConsumptionData)",
            "responseTextRange": [
                66,
                133
            ],
            "diagramVariables": "TC = <b><i>(ControlLoopStart)</i></b>, SC = <b><i>(ControlLoopFinish)</i></b>, Response = <b><i>(MonitorVoltageBusConsumption & SendVoltageBusConsumptionData)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(ControlLoopStart)</i></b> is true and any point in the interval where <b><i>(ControlLoopStart)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at least once strictly before the state where the stop condition holds. If the stop condition never occurs in the interval, RES does not need to hold. If the stop condition holds at the trigger, the requirement is not satisfied.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_before_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "regular_condition_unexp_pt": "ControlLoopStart",
            "regular_condition_unexp_ft": "ControlLoopStart",
            "regular_condition_SMV_pt": "ControlLoopStart",
            "regular_condition_SMV_ft": "ControlLoopStart",
            "post_condition_unexp_pt": "(MonitorVoltageBusConsumption & SendVoltageBusConsumptionData)",
            "post_condition_unexp_ft": "(MonitorVoltageBusConsumption & SendVoltageBusConsumptionData)",
            "post_condition_SMV_pt": "(MonitorVoltageBusConsumption & SendVoltageBusConsumptionData)",
            "post_condition_SMV_ft": "(MonitorVoltageBusConsumption & SendVoltageBusConsumptionData)",
            "stop_condition_unexp_pt": "ControlLoopFinish",
            "stop_condition_unexp_ft": "ControlLoopFinish",
            "stop_condition_SMV_pt": "ControlLoopFinish",
            "stop_condition_SMV_ft": "ControlLoopFinish",
            "ft_fetched": "((LAST V (((! $regular_condition_unexp_ft$) & ((! LAST) & (X $regular_condition_unexp_ft$))) -> (X (($post_condition_unexp_ft$ | LAST) V (! $stop_condition_unexp_ft$))))) & ($regular_condition_unexp_ft$ -> (($post_condition_unexp_ft$ | LAST) V (! $stop_condition_unexp_ft$))))",
            "ft": "((LAST V (((! ControlLoopStart) & ((! LAST) & (X ControlLoopStart))) -> (X (((MonitorVoltageBusConsumption & SendVoltageBusConsumptionData) | LAST) V (! ControlLoopFinish))))) & (ControlLoopStart -> (((MonitorVoltageBusConsumption & SendVoltageBusConsumptionData) | LAST) V (! ControlLoopFinish))))",
            "pt_fetched": "(H ($stop_condition_unexp_pt$ -> ((H (! $regular_condition_unexp_pt$)) | (((! FTP) & (! ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | FTP)))) & (Y (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | FTP))))))))))",
            "pt": "(H (ControlLoopFinish -> ((H (! ControlLoopStart)) | (((! FTP) & (! (ControlLoopStart & ((Y (! ControlLoopStart)) | FTP)))) & (Y (! ((! (MonitorVoltageBusConsumption & SendVoltageBusConsumptionData)) S ((! (MonitorVoltageBusConsumption & SendVoltageBusConsumptionData)) & (ControlLoopStart & ((Y (! ControlLoopStart)) | FTP))))))))))",
            "ptExpanded_fetched": "(H ($stop_condition_SMV_pt$ -> ((H (! $regular_condition_SMV_pt$)) | (((Y TRUE) & (! ($regular_condition_SMV_pt$ & (Z (! $regular_condition_SMV_pt$))))) & (Y (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & (Z (! $regular_condition_SMV_pt$)))))))))))",
            "ptExpanded": "(H (ControlLoopFinish -> ((H (! ControlLoopStart)) | (((Y TRUE) & (! (ControlLoopStart & (Z (! ControlLoopStart))))) & (Y (! ((! (MonitorVoltageBusConsumption & SendVoltageBusConsumptionData)) S ((! (MonitorVoltageBusConsumption & SendVoltageBusConsumptionData)) & (ControlLoopStart & (Z (! ControlLoopStart)))))))))))",
            "CoCoSpecCode": "H((ControlLoopFinish => (H(not (ControlLoopStart)) or ((YtoPre(true) and not ((ControlLoopStart and ZtoPre(not (ControlLoopStart))))) and YtoPre(not (SI((ControlLoopStart and ZtoPre(not (ControlLoopStart))),not ((MonitorVoltageBusConsumption and SendVoltageBusConsumptionData)))))))))",
            "ftExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X (($post_condition_SMV_ft$ | LAST) V (! $stop_condition_SMV_ft$))))) & ($regular_condition_SMV_ft$ -> (($post_condition_SMV_ft$ | LAST) V (! $stop_condition_SMV_ft$))))",
            "ftExpandedUnoptimized": "((LAST V (((! ControlLoopStart) & ((! LAST) & (X ControlLoopStart))) -> (X (((MonitorVoltageBusConsumption & SendVoltageBusConsumptionData) | LAST) V (! ControlLoopFinish))))) & (ControlLoopStart -> (((MonitorVoltageBusConsumption & SendVoltageBusConsumptionData) | LAST) V (! ControlLoopFinish))))",
            "ftExpanded": "((LAST V (((! ControlLoopStart) & ((! LAST) & (X ControlLoopStart))) -> (X (((MonitorVoltageBusConsumption & SendVoltageBusConsumptionData) | LAST) V (! ControlLoopFinish))))) & (ControlLoopStart -> (((MonitorVoltageBusConsumption & SendVoltageBusConsumptionData) | LAST) V (! ControlLoopFinish))))",
            "ftInfAUExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X ($post_condition_SMV_ft$ V (! $stop_condition_SMV_ft$))))) & ($regular_condition_SMV_ft$ -> ($post_condition_SMV_ft$ V (! $stop_condition_SMV_ft$))))",
            "ftInfAUExpanded": "((G (((! ControlLoopStart) & (X ControlLoopStart)) -> (X ((MonitorVoltageBusConsumption & SendVoltageBusConsumptionData) V (! ControlLoopFinish))))) & (ControlLoopStart -> ((MonitorVoltageBusConsumption & SendVoltageBusConsumptionData) V (! ControlLoopFinish))))",
            "component": "ActiveNucleo"
        },
        "status": "",
        "_id": "cca70426-d8e6-11ef-941f-71fece653e2f"
    },
    {
        "reqid": "REQ004",
        "parent_reqid": "",
        "project": "Drone Requirements v0.4",
        "rationale": "\"Show which nucleo is under control;\"\n\nGroup: Monitoring\nFunctional\nFeasible\nDetailing level: Satisfactory",
        "comments": "v0.1: The system has two nucleos according to the diagram in the slides, so I made this relatively detailed.\n\nThis requirement might benefit from a \"GUI\" or similar component.\n\nOne could also capture this behaviour with a separate 'Condition then Response' requirement for each Nucleo; this might read better but creates more requirements. Alternatively, one might want to refactor this requirement\n\nv0.2:\n\nv0.4: This requirement now specifically represents a message being sent to the Ground Control Station about which Nucleo is in control; as such, I have written it as the Raspberry sending such a message periodically",
        "fulltext": "upon ControlLoopStart Raspberry shall before ControlLoopFinish satisfy (NucleoOneControl => SendNucleoOneControlMessage) & (NucleoTwoControl => SendNucleoTwoControlMessage)",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "before",
            "response": "satisfaction",
            "variables": [
                "ControlLoopStart",
                "ControlLoopFinish",
                "NucleoOneControl",
                "SendNucleoOneControlMessage",
                "NucleoTwoControl",
                "SendNucleoTwoControlMessage"
            ],
            "qualifier_word": "upon",
            "pre_condition": "(ControlLoopStart)",
            "regular_condition": "(ControlLoopStart)",
            "conditionTextRange": [
                0,
                20
            ],
            "component_name": "Raspberry",
            "componentTextRange": [
                22,
                30
            ],
            "stop_condition": "(ControlLoopFinish)",
            "timingTextRange": [
                38,
                61
            ],
            "post_condition": "(( NucleoOneControl => SendNucleoOneControlMessage ) & ( NucleoTwoControl => SendNucleoTwoControlMessage ))",
            "responseTextRange": [
                63,
                171
            ],
            "diagramVariables": "TC = <b><i>(ControlLoopStart)</i></b>, SC = <b><i>(ControlLoopFinish)</i></b>, Response = <b><i>(( NucleoOneControl => SendNucleoOneControlMessage ) & ( NucleoTwoControl => SendNucleoTwoControlMessage ))</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(ControlLoopStart)</i></b> is true and any point in the interval where <b><i>(ControlLoopStart)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at least once strictly before the state where the stop condition holds. If the stop condition never occurs in the interval, RES does not need to hold. If the stop condition holds at the trigger, the requirement is not satisfied.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_before_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "regular_condition_unexp_pt": "ControlLoopStart",
            "regular_condition_unexp_ft": "ControlLoopStart",
            "regular_condition_SMV_pt": "ControlLoopStart",
            "regular_condition_SMV_ft": "ControlLoopStart",
            "post_condition_unexp_pt": "((NucleoOneControl -> SendNucleoOneControlMessage) & (NucleoTwoControl -> SendNucleoTwoControlMessage))",
            "post_condition_unexp_ft": "((NucleoOneControl -> SendNucleoOneControlMessage) & (NucleoTwoControl -> SendNucleoTwoControlMessage))",
            "post_condition_SMV_pt": "((NucleoOneControl -> SendNucleoOneControlMessage) & (NucleoTwoControl -> SendNucleoTwoControlMessage))",
            "post_condition_SMV_ft": "((NucleoOneControl -> SendNucleoOneControlMessage) & (NucleoTwoControl -> SendNucleoTwoControlMessage))",
            "stop_condition_unexp_pt": "ControlLoopFinish",
            "stop_condition_unexp_ft": "ControlLoopFinish",
            "stop_condition_SMV_pt": "ControlLoopFinish",
            "stop_condition_SMV_ft": "ControlLoopFinish",
            "ft_fetched": "((LAST V (((! $regular_condition_unexp_ft$) & ((! LAST) & (X $regular_condition_unexp_ft$))) -> (X (($post_condition_unexp_ft$ | LAST) V (! $stop_condition_unexp_ft$))))) & ($regular_condition_unexp_ft$ -> (($post_condition_unexp_ft$ | LAST) V (! $stop_condition_unexp_ft$))))",
            "ft": "((LAST V (((! ControlLoopStart) & ((! LAST) & (X ControlLoopStart))) -> (X ((((NucleoOneControl -> SendNucleoOneControlMessage) & (NucleoTwoControl -> SendNucleoTwoControlMessage)) | LAST) V (! ControlLoopFinish))))) & (ControlLoopStart -> ((((NucleoOneControl -> SendNucleoOneControlMessage) & (NucleoTwoControl -> SendNucleoTwoControlMessage)) | LAST) V (! ControlLoopFinish))))",
            "pt_fetched": "(H ($stop_condition_unexp_pt$ -> ((H (! $regular_condition_unexp_pt$)) | (((! FTP) & (! ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | FTP)))) & (Y (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | FTP))))))))))",
            "pt": "(H (ControlLoopFinish -> ((H (! ControlLoopStart)) | (((! FTP) & (! (ControlLoopStart & ((Y (! ControlLoopStart)) | FTP)))) & (Y (! ((! ((NucleoOneControl -> SendNucleoOneControlMessage) & (NucleoTwoControl -> SendNucleoTwoControlMessage))) S ((! ((NucleoOneControl -> SendNucleoOneControlMessage) & (NucleoTwoControl -> SendNucleoTwoControlMessage))) & (ControlLoopStart & ((Y (! ControlLoopStart)) | FTP))))))))))",
            "ptExpanded_fetched": "(H ($stop_condition_SMV_pt$ -> ((H (! $regular_condition_SMV_pt$)) | (((Y TRUE) & (! ($regular_condition_SMV_pt$ & (Z (! $regular_condition_SMV_pt$))))) & (Y (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & (Z (! $regular_condition_SMV_pt$)))))))))))",
            "ptExpanded": "(H (ControlLoopFinish -> ((H (! ControlLoopStart)) | (((Y TRUE) & (! (ControlLoopStart & (Z (! ControlLoopStart))))) & (Y (! ((! ((NucleoOneControl -> SendNucleoOneControlMessage) & (NucleoTwoControl -> SendNucleoTwoControlMessage))) S ((! ((NucleoOneControl -> SendNucleoOneControlMessage) & (NucleoTwoControl -> SendNucleoTwoControlMessage))) & (ControlLoopStart & (Z (! ControlLoopStart)))))))))))",
            "CoCoSpecCode": "H((ControlLoopFinish => (H(not (ControlLoopStart)) or ((YtoPre(true) and not ((ControlLoopStart and ZtoPre(not (ControlLoopStart))))) and YtoPre(not (SI((ControlLoopStart and ZtoPre(not (ControlLoopStart))),not (((NucleoOneControl => SendNucleoOneControlMessage) and (NucleoTwoControl => SendNucleoTwoControlMessage))))))))))",
            "ftExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X (($post_condition_SMV_ft$ | LAST) V (! $stop_condition_SMV_ft$))))) & ($regular_condition_SMV_ft$ -> (($post_condition_SMV_ft$ | LAST) V (! $stop_condition_SMV_ft$))))",
            "ftExpandedUnoptimized": "((LAST V (((! ControlLoopStart) & ((! LAST) & (X ControlLoopStart))) -> (X ((((NucleoOneControl -> SendNucleoOneControlMessage) & (NucleoTwoControl -> SendNucleoTwoControlMessage)) | LAST) V (! ControlLoopFinish))))) & (ControlLoopStart -> ((((NucleoOneControl -> SendNucleoOneControlMessage) & (NucleoTwoControl -> SendNucleoTwoControlMessage)) | LAST) V (! ControlLoopFinish))))",
            "ftExpanded": "((LAST V (((! ControlLoopStart) & ((! LAST) & (X ControlLoopStart))) -> (X ((((NucleoOneControl -> SendNucleoOneControlMessage) & (NucleoTwoControl -> SendNucleoTwoControlMessage)) | LAST) V (! ControlLoopFinish))))) & (ControlLoopStart -> ((((NucleoOneControl -> SendNucleoOneControlMessage) & (NucleoTwoControl -> SendNucleoTwoControlMessage)) | LAST) V (! ControlLoopFinish))))",
            "ftInfAUExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X ($post_condition_SMV_ft$ V (! $stop_condition_SMV_ft$))))) & ($regular_condition_SMV_ft$ -> ($post_condition_SMV_ft$ V (! $stop_condition_SMV_ft$))))",
            "ftInfAUExpanded": "((G (((! ControlLoopStart) & (X ControlLoopStart)) -> (X (((NucleoOneControl -> SendNucleoOneControlMessage) & (NucleoTwoControl -> SendNucleoTwoControlMessage)) V (! ControlLoopFinish))))) & (ControlLoopStart -> (((NucleoOneControl -> SendNucleoOneControlMessage) & (NucleoTwoControl -> SendNucleoTwoControlMessage)) V (! ControlLoopFinish))))",
            "component": "Raspberry"
        },
        "status": "",
        "_id": "cca70427-d8e6-11ef-941f-71fece653e2f"
    },
    {
        "reqid": "REQ040",
        "parent_reqid": "",
        "project": "Drone Requirements v0.4",
        "rationale": "\"Monitor attitude (row, pitch and yaw rates - IMU)\"\n\nGroup: Data Monitoring\nFunctional\nPotentially Unfeasible\nNeeds Further Specification",
        "comments": "IMU = Inertial Measurement Unit\n\nSimilar to REQ036, this requirement could be specified in terms of the IMU providing the readings accurately and the controller receiving them",
        "fulltext": "upon ControlLoopStart ActiveNucleo shall before ControlLoopFinish satisfy (MonitorRow & SendRowData) & (MonitorPitch & SendPitchData) & (MonitorYaw & SendYawData)",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "before",
            "response": "satisfaction",
            "variables": [
                "ControlLoopStart",
                "ControlLoopFinish",
                "MonitorRow",
                "SendRowData",
                "MonitorPitch",
                "SendPitchData",
                "MonitorYaw",
                "SendYawData"
            ],
            "qualifier_word": "upon",
            "pre_condition": "(ControlLoopStart)",
            "regular_condition": "(ControlLoopStart)",
            "conditionTextRange": [
                0,
                20
            ],
            "component_name": "ActiveNucleo",
            "componentTextRange": [
                22,
                33
            ],
            "stop_condition": "(ControlLoopFinish)",
            "timingTextRange": [
                41,
                64
            ],
            "post_condition": "(( MonitorRow & SendRowData ) & ( MonitorPitch & SendPitchData ) & ( MonitorYaw & SendYawData ))",
            "responseTextRange": [
                66,
                161
            ],
            "diagramVariables": "TC = <b><i>(ControlLoopStart)</i></b>, SC = <b><i>(ControlLoopFinish)</i></b>, Response = <b><i>(( MonitorRow & SendRowData ) & ( MonitorPitch & SendPitchData ) & ( MonitorYaw & SendYawData ))</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(ControlLoopStart)</i></b> is true and any point in the interval where <b><i>(ControlLoopStart)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at least once strictly before the state where the stop condition holds. If the stop condition never occurs in the interval, RES does not need to hold. If the stop condition holds at the trigger, the requirement is not satisfied.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_before_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "regular_condition_unexp_pt": "ControlLoopStart",
            "regular_condition_unexp_ft": "ControlLoopStart",
            "regular_condition_SMV_pt": "ControlLoopStart",
            "regular_condition_SMV_ft": "ControlLoopStart",
            "post_condition_unexp_pt": "(((MonitorRow & SendRowData) & (MonitorPitch & SendPitchData)) & (MonitorYaw & SendYawData))",
            "post_condition_unexp_ft": "(((MonitorRow & SendRowData) & (MonitorPitch & SendPitchData)) & (MonitorYaw & SendYawData))",
            "post_condition_SMV_pt": "(((MonitorRow & SendRowData) & (MonitorPitch & SendPitchData)) & (MonitorYaw & SendYawData))",
            "post_condition_SMV_ft": "(((MonitorRow & SendRowData) & (MonitorPitch & SendPitchData)) & (MonitorYaw & SendYawData))",
            "stop_condition_unexp_pt": "ControlLoopFinish",
            "stop_condition_unexp_ft": "ControlLoopFinish",
            "stop_condition_SMV_pt": "ControlLoopFinish",
            "stop_condition_SMV_ft": "ControlLoopFinish",
            "ft_fetched": "((LAST V (((! $regular_condition_unexp_ft$) & ((! LAST) & (X $regular_condition_unexp_ft$))) -> (X (($post_condition_unexp_ft$ | LAST) V (! $stop_condition_unexp_ft$))))) & ($regular_condition_unexp_ft$ -> (($post_condition_unexp_ft$ | LAST) V (! $stop_condition_unexp_ft$))))",
            "ft": "((LAST V (((! ControlLoopStart) & ((! LAST) & (X ControlLoopStart))) -> (X (((((MonitorRow & SendRowData) & (MonitorPitch & SendPitchData)) & (MonitorYaw & SendYawData)) | LAST) V (! ControlLoopFinish))))) & (ControlLoopStart -> (((((MonitorRow & SendRowData) & (MonitorPitch & SendPitchData)) & (MonitorYaw & SendYawData)) | LAST) V (! ControlLoopFinish))))",
            "pt_fetched": "(H ($stop_condition_unexp_pt$ -> ((H (! $regular_condition_unexp_pt$)) | (((! FTP) & (! ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | FTP)))) & (Y (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | FTP))))))))))",
            "pt": "(H (ControlLoopFinish -> ((H (! ControlLoopStart)) | (((! FTP) & (! (ControlLoopStart & ((Y (! ControlLoopStart)) | FTP)))) & (Y (! ((! (((MonitorRow & SendRowData) & (MonitorPitch & SendPitchData)) & (MonitorYaw & SendYawData))) S ((! (((MonitorRow & SendRowData) & (MonitorPitch & SendPitchData)) & (MonitorYaw & SendYawData))) & (ControlLoopStart & ((Y (! ControlLoopStart)) | FTP))))))))))",
            "ptExpanded_fetched": "(H ($stop_condition_SMV_pt$ -> ((H (! $regular_condition_SMV_pt$)) | (((Y TRUE) & (! ($regular_condition_SMV_pt$ & (Z (! $regular_condition_SMV_pt$))))) & (Y (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & (Z (! $regular_condition_SMV_pt$)))))))))))",
            "ptExpanded": "(H (ControlLoopFinish -> ((H (! ControlLoopStart)) | (((Y TRUE) & (! (ControlLoopStart & (Z (! ControlLoopStart))))) & (Y (! ((! (((MonitorRow & SendRowData) & (MonitorPitch & SendPitchData)) & (MonitorYaw & SendYawData))) S ((! (((MonitorRow & SendRowData) & (MonitorPitch & SendPitchData)) & (MonitorYaw & SendYawData))) & (ControlLoopStart & (Z (! ControlLoopStart)))))))))))",
            "CoCoSpecCode": "H((ControlLoopFinish => (H(not (ControlLoopStart)) or ((YtoPre(true) and not ((ControlLoopStart and ZtoPre(not (ControlLoopStart))))) and YtoPre(not (SI((ControlLoopStart and ZtoPre(not (ControlLoopStart))),not ((((MonitorRow and SendRowData) and (MonitorPitch and SendPitchData)) and (MonitorYaw and SendYawData))))))))))",
            "ftExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X (($post_condition_SMV_ft$ | LAST) V (! $stop_condition_SMV_ft$))))) & ($regular_condition_SMV_ft$ -> (($post_condition_SMV_ft$ | LAST) V (! $stop_condition_SMV_ft$))))",
            "ftExpandedUnoptimized": "((LAST V (((! ControlLoopStart) & ((! LAST) & (X ControlLoopStart))) -> (X (((((MonitorRow & SendRowData) & (MonitorPitch & SendPitchData)) & (MonitorYaw & SendYawData)) | LAST) V (! ControlLoopFinish))))) & (ControlLoopStart -> (((((MonitorRow & SendRowData) & (MonitorPitch & SendPitchData)) & (MonitorYaw & SendYawData)) | LAST) V (! ControlLoopFinish))))",
            "ftExpanded": "((LAST V (((! ControlLoopStart) & ((! LAST) & (X ControlLoopStart))) -> (X (((((MonitorRow & SendRowData) & (MonitorPitch & SendPitchData)) & (MonitorYaw & SendYawData)) | LAST) V (! ControlLoopFinish))))) & (ControlLoopStart -> (((((MonitorRow & SendRowData) & (MonitorPitch & SendPitchData)) & (MonitorYaw & SendYawData)) | LAST) V (! ControlLoopFinish))))",
            "ftInfAUExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X ($post_condition_SMV_ft$ V (! $stop_condition_SMV_ft$))))) & ($regular_condition_SMV_ft$ -> ($post_condition_SMV_ft$ V (! $stop_condition_SMV_ft$))))",
            "ftInfAUExpanded": "((G (((! ControlLoopStart) & (X ControlLoopStart)) -> (X ((((MonitorRow & SendRowData) & (MonitorPitch & SendPitchData)) & (MonitorYaw & SendYawData)) V (! ControlLoopFinish))))) & (ControlLoopStart -> ((((MonitorRow & SendRowData) & (MonitorPitch & SendPitchData)) & (MonitorYaw & SendYawData)) V (! ControlLoopFinish))))",
            "component": "ActiveNucleo"
        },
        "status": "",
        "_id": "cca70428-d8e6-11ef-941f-71fece653e2f"
    },
    {
        "reqid": "REQ016",
        "parent_reqid": "",
        "project": "Drone Requirements v0.4",
        "rationale": "\"Run each simulation loop within 10ms\"\n\nGroup: Simulation\nFunctional\nFeasible\nDetailing Level: Satisfactory\n",
        "comments": "v0.2: As discussed previously, this timing requirement may also apply to the system while it's running in the real world, but I'm unsure if this requirement should be changed to cover that or if a new requirement should be added",
        "fulltext": "in SimulationMode upon SimulationLoopStart System shall within 10 milliseconds satisfy SimulationLoopFinish",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "regular",
            "timing": "within",
            "response": "satisfaction",
            "variables": [
                "SimulationMode",
                "SimulationLoopStart",
                "SimulationLoopFinish"
            ],
            "scope_mode": "SimulationMode",
            "scopeTextRange": [
                0,
                16
            ],
            "qualifier_word": "upon",
            "pre_condition": "(SimulationLoopStart)",
            "regular_condition": "(SimulationLoopStart)",
            "conditionTextRange": [
                18,
                41
            ],
            "component_name": "System",
            "componentTextRange": [
                43,
                48
            ],
            "duration": "10",
            "timingTextRange": [
                56,
                77
            ],
            "post_condition": "(SimulationLoopFinish)",
            "responseTextRange": [
                79,
                106
            ],
            "diagramVariables": "M = <b><i>SimulationMode</i></b>, TC = <b><i>(SimulationLoopStart)</i></b>,  n = <b><i>10</i></b>, Response = <b><i>(SimulationLoopFinish)</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>SimulationMode</i></b> holds.\nTRIGGER: first point in the interval if <b><i>(SimulationLoopStart)</i></b> is true and any point in the interval where <b><i>(SimulationLoopStart)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some point with distance <= <b><i>10</i></b> from the trigger (i.e., at trigger, trigger+1, ..., or trigger+<b><i>10</i></b>). If the interval ends sooner than trigger+<b><i>10</i></b>, then RES need not hold.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_regular_within_satisfaction.svg",
            "scope_mode_pt": "SimulationMode",
            "scope_mode_ft": "SimulationMode",
            "regular_condition_unexp_pt": "SimulationLoopStart",
            "regular_condition_unexp_ft": "SimulationLoopStart",
            "regular_condition_SMV_pt": "SimulationLoopStart",
            "regular_condition_SMV_ft": "SimulationLoopStart",
            "post_condition_unexp_pt": "SimulationLoopFinish",
            "post_condition_unexp_ft": "SimulationLoopFinish",
            "post_condition_SMV_pt": "SimulationLoopFinish",
            "post_condition_SMV_ft": "SimulationLoopFinish",
            "ft_fetched": "((LAST V ((! (Fin_$scope_mode_ft$ & (! LAST))) | (X (((Lin_$scope_mode_ft$ | LAST) V (((! $regular_condition_unexp_ft$) & ((! LAST) & ((X $regular_condition_unexp_ft$) & (! (Lin_$scope_mode_ft$ | LAST))))) -> ((X ((F[<=$duration$] $post_condition_unexp_ft$) | (F[<$duration$] (Lin_$scope_mode_ft$ | LAST)))) & (! (Lin_$scope_mode_ft$ | LAST))))) & ($regular_condition_unexp_ft$ -> ((F[<=$duration$] $post_condition_unexp_ft$) | (F[<$duration$] (Lin_$scope_mode_ft$ | LAST)))))))) & ($scope_mode_ft$ -> (((Lin_$scope_mode_ft$ | LAST) V (((! $regular_condition_unexp_ft$) & ((! LAST) & ((X $regular_condition_unexp_ft$) & (! (Lin_$scope_mode_ft$ | LAST))))) -> ((X ((F[<=$duration$] $post_condition_unexp_ft$) | (F[<$duration$] (Lin_$scope_mode_ft$ | LAST)))) & (! (Lin_$scope_mode_ft$ | LAST))))) & ($regular_condition_unexp_ft$ -> ((F[<=$duration$] $post_condition_unexp_ft$) | (F[<$duration$] (Lin_$scope_mode_ft$ | LAST)))))))",
            "ft": "((LAST V ((! (Fin_SimulationMode & (! LAST))) | (X (((Lin_SimulationMode | LAST) V (((! SimulationLoopStart) & ((! LAST) & ((X SimulationLoopStart) & (! (Lin_SimulationMode | LAST))))) -> ((X ((F[<=10] SimulationLoopFinish) | (F[<10] (Lin_SimulationMode | LAST)))) & (! (Lin_SimulationMode | LAST))))) & (SimulationLoopStart -> ((F[<=10] SimulationLoopFinish) | (F[<10] (Lin_SimulationMode | LAST)))))))) & (SimulationMode -> (((Lin_SimulationMode | LAST) V (((! SimulationLoopStart) & ((! LAST) & ((X SimulationLoopStart) & (! (Lin_SimulationMode | LAST))))) -> ((X ((F[<=10] SimulationLoopFinish) | (F[<10] (Lin_SimulationMode | LAST)))) & (! (Lin_SimulationMode | LAST))))) & (SimulationLoopStart -> ((F[<=10] SimulationLoopFinish) | (F[<10] (Lin_SimulationMode | LAST)))))))",
            "pt_fetched": "((H (Lin_$scope_mode_pt$ -> (Y (((O[=$duration$] (($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | Fin_$scope_mode_pt$)) & (! $post_condition_unexp_pt$))) -> (O[<$duration$] (Fin_$scope_mode_pt$ | $post_condition_unexp_pt$))) S (((O[=$duration$] (($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | Fin_$scope_mode_pt$)) & (! $post_condition_unexp_pt$))) -> (O[<$duration$] (Fin_$scope_mode_pt$ | $post_condition_unexp_pt$))) & Fin_$scope_mode_pt$))))) & (((! Lin_$scope_mode_pt$) S ((! Lin_$scope_mode_pt$) & Fin_$scope_mode_pt$)) -> (((O[=$duration$] (($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | Fin_$scope_mode_pt$)) & (! $post_condition_unexp_pt$))) -> (O[<$duration$] (Fin_$scope_mode_pt$ | $post_condition_unexp_pt$))) S (((O[=$duration$] (($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | Fin_$scope_mode_pt$)) & (! $post_condition_unexp_pt$))) -> (O[<$duration$] (Fin_$scope_mode_pt$ | $post_condition_unexp_pt$))) & Fin_$scope_mode_pt$))))",
            "pt": "((H (Lin_SimulationMode -> (Y (((O[=10] ((SimulationLoopStart & ((Y (! SimulationLoopStart)) | Fin_SimulationMode)) & (! SimulationLoopFinish))) -> (O[<10] (Fin_SimulationMode | SimulationLoopFinish))) S (((O[=10] ((SimulationLoopStart & ((Y (! SimulationLoopStart)) | Fin_SimulationMode)) & (! SimulationLoopFinish))) -> (O[<10] (Fin_SimulationMode | SimulationLoopFinish))) & Fin_SimulationMode))))) & (((! Lin_SimulationMode) S ((! Lin_SimulationMode) & Fin_SimulationMode)) -> (((O[=10] ((SimulationLoopStart & ((Y (! SimulationLoopStart)) | Fin_SimulationMode)) & (! SimulationLoopFinish))) -> (O[<10] (Fin_SimulationMode | SimulationLoopFinish))) S (((O[=10] ((SimulationLoopStart & ((Y (! SimulationLoopStart)) | Fin_SimulationMode)) & (! SimulationLoopFinish))) -> (O[<10] (Fin_SimulationMode | SimulationLoopFinish))) & Fin_SimulationMode))))",
            "ptExpanded_fetched": "((H (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) -> (Y (((O[=$duration$] (($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | ($scope_mode_pt$ & (Z (! $scope_mode_pt$))))) & (! $post_condition_SMV_pt$))) -> (O[<$duration$] (($scope_mode_pt$ & (Z (! $scope_mode_pt$))) | $post_condition_SMV_pt$))) S (((O[=$duration$] (($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | ($scope_mode_pt$ & (Z (! $scope_mode_pt$))))) & (! $post_condition_SMV_pt$))) -> (O[<$duration$] (($scope_mode_pt$ & (Z (! $scope_mode_pt$))) | $post_condition_SMV_pt$))) & ($scope_mode_pt$ & (Z (! $scope_mode_pt$)))))))) & (((! ((! $scope_mode_pt$) & (Y $scope_mode_pt$))) S ((! ((! $scope_mode_pt$) & (Y $scope_mode_pt$))) & ($scope_mode_pt$ & (Z (! $scope_mode_pt$))))) -> (((O[=$duration$] (($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | ($scope_mode_pt$ & (Z (! $scope_mode_pt$))))) & (! $post_condition_SMV_pt$))) -> (O[<$duration$] (($scope_mode_pt$ & (Z (! $scope_mode_pt$))) | $post_condition_SMV_pt$))) S (((O[=$duration$] (($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | ($scope_mode_pt$ & (Z (! $scope_mode_pt$))))) & (! $post_condition_SMV_pt$))) -> (O[<$duration$] (($scope_mode_pt$ & (Z (! $scope_mode_pt$))) | $post_condition_SMV_pt$))) & ($scope_mode_pt$ & (Z (! $scope_mode_pt$)))))))",
            "ptExpanded": "((H (((! SimulationMode) & (Y SimulationMode)) -> (Y (((O[10,10] ((SimulationLoopStart & ((Y (! SimulationLoopStart)) | (SimulationMode & (Z (! SimulationMode))))) & (! SimulationLoopFinish))) -> (O[0,9] ((SimulationMode & (Z (! SimulationMode))) | SimulationLoopFinish))) S (((O[10,10] ((SimulationLoopStart & ((Y (! SimulationLoopStart)) | (SimulationMode & (Z (! SimulationMode))))) & (! SimulationLoopFinish))) -> (O[0,9] ((SimulationMode & (Z (! SimulationMode))) | SimulationLoopFinish))) & (SimulationMode & (Z (! SimulationMode)))))))) & (((! ((! SimulationMode) & (Y SimulationMode))) S ((! ((! SimulationMode) & (Y SimulationMode))) & (SimulationMode & (Z (! SimulationMode))))) -> (((O[10,10] ((SimulationLoopStart & ((Y (! SimulationLoopStart)) | (SimulationMode & (Z (! SimulationMode))))) & (! SimulationLoopFinish))) -> (O[0,9] ((SimulationMode & (Z (! SimulationMode))) | SimulationLoopFinish))) S (((O[10,10] ((SimulationLoopStart & ((Y (! SimulationLoopStart)) | (SimulationMode & (Z (! SimulationMode))))) & (! SimulationLoopFinish))) -> (O[0,9] ((SimulationMode & (Z (! SimulationMode))) | SimulationLoopFinish))) & (SimulationMode & (Z (! SimulationMode)))))))",
            "CoCoSpecCode": "(H(((not (SimulationMode) and YtoPre(SimulationMode)) => YtoPre(SI((SimulationMode and ZtoPre(not (SimulationMode))),(OT(10, 10, ((SimulationLoopStart and (YtoPre(not (SimulationLoopStart)) or (SimulationMode and ZtoPre(not (SimulationMode))))) and not (SimulationLoopFinish))) => OT(9, 0, ((SimulationMode and ZtoPre(not (SimulationMode))) or SimulationLoopFinish))))))) and (SI((SimulationMode and ZtoPre(not (SimulationMode))),not ((not (SimulationMode) and YtoPre(SimulationMode)))) => SI((SimulationMode and ZtoPre(not (SimulationMode))),(OT(10, 10, ((SimulationLoopStart and (YtoPre(not (SimulationLoopStart)) or (SimulationMode and ZtoPre(not (SimulationMode))))) and not (SimulationLoopFinish))) => OT(9, 0, ((SimulationMode and ZtoPre(not (SimulationMode))) or SimulationLoopFinish))))))",
            "ftExpanded_fetched": "((LAST V ((! ((((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$)) & (! LAST))) | (X ((((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST) V (((! $regular_condition_SMV_ft$) & ((! LAST) & ((X $regular_condition_SMV_ft$) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))))) -> ((X ((F[<=$duration$] $post_condition_SMV_ft$) | (F[<$duration$] ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)))) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))))) & ($regular_condition_SMV_ft$ -> ((F[<=$duration$] $post_condition_SMV_ft$) | (F[<$duration$] ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)))))))) & ($scope_mode_ft$ -> ((((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST) V (((! $regular_condition_SMV_ft$) & ((! LAST) & ((X $regular_condition_SMV_ft$) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))))) -> ((X ((F[<=$duration$] $post_condition_SMV_ft$) | (F[<$duration$] ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)))) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))))) & ($regular_condition_SMV_ft$ -> ((F[<=$duration$] $post_condition_SMV_ft$) | (F[<$duration$] ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)))))))",
            "ftExpandedUnoptimized": "((LAST V ((! ((((! SimulationMode) & (! LAST)) & (X SimulationMode)) & (! LAST))) | (X (((((SimulationMode & (! LAST)) & (X (! SimulationMode))) | LAST) V (((! SimulationLoopStart) & ((! LAST) & ((X SimulationLoopStart) & (! (((SimulationMode & (! LAST)) & (X (! SimulationMode))) | LAST))))) -> ((X ((F[0,10] SimulationLoopFinish) | (F[0,9] (((SimulationMode & (! LAST)) & (X (! SimulationMode))) | LAST)))) & (! (((SimulationMode & (! LAST)) & (X (! SimulationMode))) | LAST))))) & (SimulationLoopStart -> ((F[0,10] SimulationLoopFinish) | (F[0,9] (((SimulationMode & (! LAST)) & (X (! SimulationMode))) | LAST)))))))) & (SimulationMode -> (((((SimulationMode & (! LAST)) & (X (! SimulationMode))) | LAST) V (((! SimulationLoopStart) & ((! LAST) & ((X SimulationLoopStart) & (! (((SimulationMode & (! LAST)) & (X (! SimulationMode))) | LAST))))) -> ((X ((F[0,10] SimulationLoopFinish) | (F[0,9] (((SimulationMode & (! LAST)) & (X (! SimulationMode))) | LAST)))) & (! (((SimulationMode & (! LAST)) & (X (! SimulationMode))) | LAST))))) & (SimulationLoopStart -> ((F[0,10] SimulationLoopFinish) | (F[0,9] (((SimulationMode & (! LAST)) & (X (! SimulationMode))) | LAST)))))))",
            "ftExpanded": "((LAST V ((! ((((! SimulationMode) & (! LAST)) & (X SimulationMode)) & (! LAST))) | (X (((((SimulationMode & (! LAST)) & (X (! SimulationMode))) | LAST) V (((! SimulationLoopStart) & ((! LAST) & ((X SimulationLoopStart) & (! (((SimulationMode & (! LAST)) & (X (! SimulationMode))) | LAST))))) -> ((X ((F[0,10] SimulationLoopFinish) | (F[0,9] (((SimulationMode & (! LAST)) & (X (! SimulationMode))) | LAST)))) & (! (((SimulationMode & (! LAST)) & (X (! SimulationMode))) | LAST))))) & (SimulationLoopStart -> ((F[0,10] SimulationLoopFinish) | (F[0,9] (((SimulationMode & (! LAST)) & (X (! SimulationMode))) | LAST)))))))) & (SimulationMode -> (((((SimulationMode & (! LAST)) & (X (! SimulationMode))) | LAST) V (((! SimulationLoopStart) & ((! LAST) & ((X SimulationLoopStart) & (! (((SimulationMode & (! LAST)) & (X (! SimulationMode))) | LAST))))) -> ((X ((F[0,10] SimulationLoopFinish) | (F[0,9] (((SimulationMode & (! LAST)) & (X (! SimulationMode))) | LAST)))) & (! (((SimulationMode & (! LAST)) & (X (! SimulationMode))) | LAST))))) & (SimulationLoopStart -> ((F[0,10] SimulationLoopFinish) | (F[0,9] (((SimulationMode & (! LAST)) & (X (! SimulationMode))) | LAST)))))))",
            "ftInfAUExpanded_fetched": "((G ((! (((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$))) | (X (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))))) -> ((X ((F[<=$duration$] $post_condition_SMV_ft$) | (F[<$duration$] (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))))) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((F[<=$duration$] $post_condition_SMV_ft$) | (F[<$duration$] (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))))))))) & ($scope_mode_ft$ -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))))) -> ((X ((F[<=$duration$] $post_condition_SMV_ft$) | (F[<$duration$] (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))))) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((F[<=$duration$] $post_condition_SMV_ft$) | (F[<$duration$] (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))))))))",
            "ftInfAUExpanded": "((G ((! ((! SimulationMode) & (X SimulationMode))) | (X (((SimulationMode & (X (! SimulationMode))) V (((! SimulationLoopStart) & ((X SimulationLoopStart) & (! (SimulationMode & (X (! SimulationMode)))))) -> ((X ((F[0,10] SimulationLoopFinish) | (F[0,9] (SimulationMode & (X (! SimulationMode)))))) & (! (SimulationMode & (X (! SimulationMode))))))) & (SimulationLoopStart -> ((F[0,10] SimulationLoopFinish) | (F[0,9] (SimulationMode & (X (! SimulationMode)))))))))) & (SimulationMode -> (((SimulationMode & (X (! SimulationMode))) V (((! SimulationLoopStart) & ((X SimulationLoopStart) & (! (SimulationMode & (X (! SimulationMode)))))) -> ((X ((F[0,10] SimulationLoopFinish) | (F[0,9] (SimulationMode & (X (! SimulationMode)))))) & (! (SimulationMode & (X (! SimulationMode))))))) & (SimulationLoopStart -> ((F[0,10] SimulationLoopFinish) | (F[0,9] (SimulationMode & (X (! SimulationMode)))))))))",
            "component": "System"
        },
        "status": "",
        "_id": "cca70429-d8e6-11ef-941f-71fece653e2f"
    },
    {
        "reqid": "REQ037",
        "parent_reqid": "",
        "project": "Drone Requirements v0.4",
        "rationale": "\"Monitor tilt angles\"\n\nGroup: Data Monitoring\nFunctional\nFeasible\nNeeds Further Specification",
        "comments": "",
        "fulltext": "upon ControlLoopStart ActiveNucleo shall before ControlLoopFinish satisfy (MonitorTiltAngles & SendTiltAngleData)",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "before",
            "response": "satisfaction",
            "variables": [
                "ControlLoopStart",
                "ControlLoopFinish",
                "MonitorTiltAngles",
                "SendTiltAngleData"
            ],
            "qualifier_word": "upon",
            "pre_condition": "(ControlLoopStart)",
            "regular_condition": "(ControlLoopStart)",
            "conditionTextRange": [
                0,
                20
            ],
            "component_name": "ActiveNucleo",
            "componentTextRange": [
                22,
                33
            ],
            "stop_condition": "(ControlLoopFinish)",
            "timingTextRange": [
                41,
                64
            ],
            "post_condition": "(( MonitorTiltAngles & SendTiltAngleData ))",
            "responseTextRange": [
                66,
                112
            ],
            "diagramVariables": "TC = <b><i>(ControlLoopStart)</i></b>, SC = <b><i>(ControlLoopFinish)</i></b>, Response = <b><i>(( MonitorTiltAngles & SendTiltAngleData ))</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(ControlLoopStart)</i></b> is true and any point in the interval where <b><i>(ControlLoopStart)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at least once strictly before the state where the stop condition holds. If the stop condition never occurs in the interval, RES does not need to hold. If the stop condition holds at the trigger, the requirement is not satisfied.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_before_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "regular_condition_unexp_pt": "ControlLoopStart",
            "regular_condition_unexp_ft": "ControlLoopStart",
            "regular_condition_SMV_pt": "ControlLoopStart",
            "regular_condition_SMV_ft": "ControlLoopStart",
            "post_condition_unexp_pt": "(MonitorTiltAngles & SendTiltAngleData)",
            "post_condition_unexp_ft": "(MonitorTiltAngles & SendTiltAngleData)",
            "post_condition_SMV_pt": "(MonitorTiltAngles & SendTiltAngleData)",
            "post_condition_SMV_ft": "(MonitorTiltAngles & SendTiltAngleData)",
            "stop_condition_unexp_pt": "ControlLoopFinish",
            "stop_condition_unexp_ft": "ControlLoopFinish",
            "stop_condition_SMV_pt": "ControlLoopFinish",
            "stop_condition_SMV_ft": "ControlLoopFinish",
            "ft_fetched": "((LAST V (((! $regular_condition_unexp_ft$) & ((! LAST) & (X $regular_condition_unexp_ft$))) -> (X (($post_condition_unexp_ft$ | LAST) V (! $stop_condition_unexp_ft$))))) & ($regular_condition_unexp_ft$ -> (($post_condition_unexp_ft$ | LAST) V (! $stop_condition_unexp_ft$))))",
            "ft": "((LAST V (((! ControlLoopStart) & ((! LAST) & (X ControlLoopStart))) -> (X (((MonitorTiltAngles & SendTiltAngleData) | LAST) V (! ControlLoopFinish))))) & (ControlLoopStart -> (((MonitorTiltAngles & SendTiltAngleData) | LAST) V (! ControlLoopFinish))))",
            "pt_fetched": "(H ($stop_condition_unexp_pt$ -> ((H (! $regular_condition_unexp_pt$)) | (((! FTP) & (! ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | FTP)))) & (Y (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | FTP))))))))))",
            "pt": "(H (ControlLoopFinish -> ((H (! ControlLoopStart)) | (((! FTP) & (! (ControlLoopStart & ((Y (! ControlLoopStart)) | FTP)))) & (Y (! ((! (MonitorTiltAngles & SendTiltAngleData)) S ((! (MonitorTiltAngles & SendTiltAngleData)) & (ControlLoopStart & ((Y (! ControlLoopStart)) | FTP))))))))))",
            "ptExpanded_fetched": "(H ($stop_condition_SMV_pt$ -> ((H (! $regular_condition_SMV_pt$)) | (((Y TRUE) & (! ($regular_condition_SMV_pt$ & (Z (! $regular_condition_SMV_pt$))))) & (Y (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & (Z (! $regular_condition_SMV_pt$)))))))))))",
            "ptExpanded": "(H (ControlLoopFinish -> ((H (! ControlLoopStart)) | (((Y TRUE) & (! (ControlLoopStart & (Z (! ControlLoopStart))))) & (Y (! ((! (MonitorTiltAngles & SendTiltAngleData)) S ((! (MonitorTiltAngles & SendTiltAngleData)) & (ControlLoopStart & (Z (! ControlLoopStart)))))))))))",
            "CoCoSpecCode": "H((ControlLoopFinish => (H(not (ControlLoopStart)) or ((YtoPre(true) and not ((ControlLoopStart and ZtoPre(not (ControlLoopStart))))) and YtoPre(not (SI((ControlLoopStart and ZtoPre(not (ControlLoopStart))),not ((MonitorTiltAngles and SendTiltAngleData)))))))))",
            "ftExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X (($post_condition_SMV_ft$ | LAST) V (! $stop_condition_SMV_ft$))))) & ($regular_condition_SMV_ft$ -> (($post_condition_SMV_ft$ | LAST) V (! $stop_condition_SMV_ft$))))",
            "ftExpandedUnoptimized": "((LAST V (((! ControlLoopStart) & ((! LAST) & (X ControlLoopStart))) -> (X (((MonitorTiltAngles & SendTiltAngleData) | LAST) V (! ControlLoopFinish))))) & (ControlLoopStart -> (((MonitorTiltAngles & SendTiltAngleData) | LAST) V (! ControlLoopFinish))))",
            "ftExpanded": "((LAST V (((! ControlLoopStart) & ((! LAST) & (X ControlLoopStart))) -> (X (((MonitorTiltAngles & SendTiltAngleData) | LAST) V (! ControlLoopFinish))))) & (ControlLoopStart -> (((MonitorTiltAngles & SendTiltAngleData) | LAST) V (! ControlLoopFinish))))",
            "ftInfAUExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X ($post_condition_SMV_ft$ V (! $stop_condition_SMV_ft$))))) & ($regular_condition_SMV_ft$ -> ($post_condition_SMV_ft$ V (! $stop_condition_SMV_ft$))))",
            "ftInfAUExpanded": "((G (((! ControlLoopStart) & (X ControlLoopStart)) -> (X ((MonitorTiltAngles & SendTiltAngleData) V (! ControlLoopFinish))))) & (ControlLoopStart -> ((MonitorTiltAngles & SendTiltAngleData) V (! ControlLoopFinish))))",
            "component": "ActiveNucleo"
        },
        "status": "",
        "_id": "cca7042a-d8e6-11ef-941f-71fece653e2f"
    },
    {
        "reqid": "REQ031",
        "parent_reqid": "",
        "project": "Drone Requirements v0.4",
        "rationale": "\"Run at least in soft real time\"\n\nGroup: Time Requirements\nNon-functional\nFeasible\nNeeds Further Specification",
        "comments": "I feel like this *could* be formalised if we had some metrics, but it would probably end up very complex.",
        "fulltext": "",
        "semantics": {},
        "status": "",
        "_id": "cca7042b-d8e6-11ef-941f-71fece653e2f"
    },
    {
        "reqid": "REQ025",
        "parent_reqid": "",
        "project": "Drone Requirements v0.4",
        "rationale": "\"The input/output data in the class controller must be pre-processed\"\n\nGroup: TBD\nNon-functional\nPotentially Unfeasible\nNeeds Further Specification\n\"What does the user means by pre-processing? And how should be the output be pre-processed?\"\n",
        "comments": "Non-functional requirement: Out of scope",
        "fulltext": "",
        "semantics": {},
        "status": "",
        "_id": "cca7042c-d8e6-11ef-941f-71fece653e2f"
    },
    {
        "reqid": "REQ001",
        "parent_reqid": "",
        "project": "Drone Requirements v0.4",
        "rationale": "\"Allow failure simulations between nucleo/jetson and nucleo/nucleo\"\n\nGroup: Failure Analysis\nFunctional\nNeeds Further Specification",
        "comments": "I'm not entirely sure on what \"failure simulations *between*\" components means. Also I think we might want to put a trigger in here, like \"if FailureSimulation\" to make it optional for the simulation\n\nv0.4: \"in SimulationMode whenever SimulateFailureTransitions System shall eventually satisfy JetsonFailureTransitionToNucleo | NucleoFailureSwitchActiveNucleo\"\nThis requirement outlines that the simulation mode should be able to simulate a situation where control should switch, and the system should successfully switch",
        "fulltext": "in SimulationMode whenever SimulateFailureTransitions System shall eventually satisfy JetsonFailureTransitionToNucleo | NucleoFailureSwitchActiveNucleo",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "noTrigger",
            "timing": "eventually",
            "response": "satisfaction",
            "variables": [
                "SimulationMode",
                "SimulateFailureTransitions",
                "JetsonFailureTransitionToNucleo",
                "NucleoFailureSwitchActiveNucleo"
            ],
            "scope_mode": "SimulationMode",
            "scopeTextRange": [
                0,
                16
            ],
            "qualifier_word": "whenever",
            "pre_condition": "(SimulateFailureTransitions)",
            "regular_condition": "(SimulateFailureTransitions)",
            "conditionTextRange": [
                18,
                52
            ],
            "component_name": "System",
            "componentTextRange": [
                54,
                59
            ],
            "timingTextRange": [
                67,
                76
            ],
            "post_condition": "(JetsonFailureTransitionToNucleo | NucleoFailureSwitchActiveNucleo)",
            "responseTextRange": [
                78,
                150
            ],
            "diagramVariables": "M = <b><i>SimulationMode</i></b>, CC = <b><i>(SimulateFailureTransitions)</i></b>, Response = <b><i>(JetsonFailureTransitionToNucleo | NucleoFailureSwitchActiveNucleo)</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>SimulationMode</i></b> holds.\nTRIGGER: every point in the interval where <b><i>(SimulateFailureTransitions)</i></b> is true.\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_noTrigger_eventually_satisfaction.svg",
            "scope_mode_pt": "SimulationMode",
            "scope_mode_ft": "SimulationMode",
            "regular_condition_unexp_pt": "SimulateFailureTransitions",
            "regular_condition_unexp_ft": "SimulateFailureTransitions",
            "regular_condition_SMV_pt": "SimulateFailureTransitions",
            "regular_condition_SMV_ft": "SimulateFailureTransitions",
            "post_condition_unexp_pt": "(JetsonFailureTransitionToNucleo | NucleoFailureSwitchActiveNucleo)",
            "post_condition_unexp_ft": "(JetsonFailureTransitionToNucleo | NucleoFailureSwitchActiveNucleo)",
            "post_condition_SMV_pt": "(JetsonFailureTransitionToNucleo | NucleoFailureSwitchActiveNucleo)",
            "post_condition_SMV_ft": "(JetsonFailureTransitionToNucleo | NucleoFailureSwitchActiveNucleo)",
            "ft_fetched": "((LAST V ((! (Fin_$scope_mode_ft$ & (! LAST))) | (X ((Lin_$scope_mode_ft$ | LAST) V ($regular_condition_unexp_ft$ -> ((! (Lin_$scope_mode_ft$ | LAST)) U $post_condition_unexp_ft$)))))) & ($scope_mode_ft$ -> ((Lin_$scope_mode_ft$ | LAST) V ($regular_condition_unexp_ft$ -> ((! (Lin_$scope_mode_ft$ | LAST)) U $post_condition_unexp_ft$)))))",
            "ft": "((LAST V ((! (Fin_SimulationMode & (! LAST))) | (X ((Lin_SimulationMode | LAST) V (SimulateFailureTransitions -> ((! (Lin_SimulationMode | LAST)) U (JetsonFailureTransitionToNucleo | NucleoFailureSwitchActiveNucleo))))))) & (SimulationMode -> ((Lin_SimulationMode | LAST) V (SimulateFailureTransitions -> ((! (Lin_SimulationMode | LAST)) U (JetsonFailureTransitionToNucleo | NucleoFailureSwitchActiveNucleo))))))",
            "pt_fetched": "((H (Lin_$scope_mode_pt$ -> (Y (((! $regular_condition_unexp_pt$) S ((! $regular_condition_unexp_pt$) & Fin_$scope_mode_pt$)) | (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & $regular_condition_unexp_pt$))))))) & (((! Lin_$scope_mode_pt$) S ((! Lin_$scope_mode_pt$) & Fin_$scope_mode_pt$)) -> (((! $regular_condition_unexp_pt$) S ((! $regular_condition_unexp_pt$) & Fin_$scope_mode_pt$)) | (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & $regular_condition_unexp_pt$))))))",
            "pt": "((H (Lin_SimulationMode -> (Y (((! SimulateFailureTransitions) S ((! SimulateFailureTransitions) & Fin_SimulationMode)) | (! ((! (JetsonFailureTransitionToNucleo | NucleoFailureSwitchActiveNucleo)) S ((! (JetsonFailureTransitionToNucleo | NucleoFailureSwitchActiveNucleo)) & SimulateFailureTransitions))))))) & (((! Lin_SimulationMode) S ((! Lin_SimulationMode) & Fin_SimulationMode)) -> (((! SimulateFailureTransitions) S ((! SimulateFailureTransitions) & Fin_SimulationMode)) | (! ((! (JetsonFailureTransitionToNucleo | NucleoFailureSwitchActiveNucleo)) S ((! (JetsonFailureTransitionToNucleo | NucleoFailureSwitchActiveNucleo)) & SimulateFailureTransitions))))))",
            "ptExpanded_fetched": "((H (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) -> (Y (((! $regular_condition_SMV_pt$) S ((! $regular_condition_SMV_pt$) & ($scope_mode_pt$ & (Z (! $scope_mode_pt$))))) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & $regular_condition_SMV_pt$))))))) & (((! ((! $scope_mode_pt$) & (Y $scope_mode_pt$))) S ((! ((! $scope_mode_pt$) & (Y $scope_mode_pt$))) & ($scope_mode_pt$ & (Z (! $scope_mode_pt$))))) -> (((! $regular_condition_SMV_pt$) S ((! $regular_condition_SMV_pt$) & ($scope_mode_pt$ & (Z (! $scope_mode_pt$))))) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & $regular_condition_SMV_pt$))))))",
            "ptExpanded": "((H (((! SimulationMode) & (Y SimulationMode)) -> (Y (((! SimulateFailureTransitions) S ((! SimulateFailureTransitions) & (SimulationMode & (Z (! SimulationMode))))) | (! ((! (JetsonFailureTransitionToNucleo | NucleoFailureSwitchActiveNucleo)) S ((! (JetsonFailureTransitionToNucleo | NucleoFailureSwitchActiveNucleo)) & SimulateFailureTransitions))))))) & (((! ((! SimulationMode) & (Y SimulationMode))) S ((! ((! SimulationMode) & (Y SimulationMode))) & (SimulationMode & (Z (! SimulationMode))))) -> (((! SimulateFailureTransitions) S ((! SimulateFailureTransitions) & (SimulationMode & (Z (! SimulationMode))))) | (! ((! (JetsonFailureTransitionToNucleo | NucleoFailureSwitchActiveNucleo)) S ((! (JetsonFailureTransitionToNucleo | NucleoFailureSwitchActiveNucleo)) & SimulateFailureTransitions))))))",
            "CoCoSpecCode": "(H(((not (SimulationMode) and YtoPre(SimulationMode)) => YtoPre((SI((SimulationMode and ZtoPre(not (SimulationMode))),not (SimulateFailureTransitions)) or not (SI(SimulateFailureTransitions,not ((JetsonFailureTransitionToNucleo or NucleoFailureSwitchActiveNucleo)))))))) and (SI((SimulationMode and ZtoPre(not (SimulationMode))),not ((not (SimulationMode) and YtoPre(SimulationMode)))) => (SI((SimulationMode and ZtoPre(not (SimulationMode))),not (SimulateFailureTransitions)) or not (SI(SimulateFailureTransitions,not ((JetsonFailureTransitionToNucleo or NucleoFailureSwitchActiveNucleo)))))))",
            "ftExpanded_fetched": "((LAST V ((! ((((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$)) & (! LAST))) | (X (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST) V ($regular_condition_SMV_ft$ -> ((! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) U $post_condition_SMV_ft$)))))) & ($scope_mode_ft$ -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST) V ($regular_condition_SMV_ft$ -> ((! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) U $post_condition_SMV_ft$)))))",
            "ftExpandedUnoptimized": "((LAST V ((! ((((! SimulationMode) & (! LAST)) & (X SimulationMode)) & (! LAST))) | (X ((((SimulationMode & (! LAST)) & (X (! SimulationMode))) | LAST) V (SimulateFailureTransitions -> ((! (((SimulationMode & (! LAST)) & (X (! SimulationMode))) | LAST)) U (JetsonFailureTransitionToNucleo | NucleoFailureSwitchActiveNucleo))))))) & (SimulationMode -> ((((SimulationMode & (! LAST)) & (X (! SimulationMode))) | LAST) V (SimulateFailureTransitions -> ((! (((SimulationMode & (! LAST)) & (X (! SimulationMode))) | LAST)) U (JetsonFailureTransitionToNucleo | NucleoFailureSwitchActiveNucleo))))))",
            "ftExpanded": "((LAST V ((! ((((! SimulationMode) & (! LAST)) & (X SimulationMode)) & (! LAST))) | (X ((((SimulationMode & (! LAST)) & (X (! SimulationMode))) | LAST) V (SimulateFailureTransitions -> ((! (((SimulationMode & (! LAST)) & (X (! SimulationMode))) | LAST)) U (JetsonFailureTransitionToNucleo | NucleoFailureSwitchActiveNucleo))))))) & (SimulationMode -> ((((SimulationMode & (! LAST)) & (X (! SimulationMode))) | LAST) V (SimulateFailureTransitions -> ((! (((SimulationMode & (! LAST)) & (X (! SimulationMode))) | LAST)) U (JetsonFailureTransitionToNucleo | NucleoFailureSwitchActiveNucleo))))))",
            "ftInfAUExpanded_fetched": "((G ((! (((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$))) | (X ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V ($regular_condition_SMV_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)))))) & ($scope_mode_ft$ -> ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V ($regular_condition_SMV_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)))))",
            "ftInfAUExpanded": "((G ((! ((! SimulationMode) & (X SimulationMode))) | (X ((SimulationMode & (X (! SimulationMode))) V (SimulateFailureTransitions -> ((! (SimulationMode & (X (! SimulationMode)))) U (JetsonFailureTransitionToNucleo | NucleoFailureSwitchActiveNucleo))))))) & (SimulationMode -> ((SimulationMode & (X (! SimulationMode))) V (SimulateFailureTransitions -> ((! (SimulationMode & (X (! SimulationMode)))) U (JetsonFailureTransitionToNucleo | NucleoFailureSwitchActiveNucleo))))))",
            "component": "System"
        },
        "status": "",
        "_id": "cca7042d-d8e6-11ef-941f-71fece653e2f"
    },
    {
        "reqid": "REQ002_2",
        "parent_reqid": "REQ002",
        "project": "Drone Requirements v0.4",
        "rationale": "",
        "comments": "",
        "fulltext": "whenever ActiveNucleoHardwareFailure ActiveNucleo shall within 10 milliseconds satisfy HardwareFailureDetected",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "noTrigger",
            "timing": "within",
            "response": "satisfaction",
            "variables": [
                "ActiveNucleoHardwareFailure",
                "HardwareFailureDetected"
            ],
            "qualifier_word": "whenever",
            "pre_condition": "(ActiveNucleoHardwareFailure)",
            "regular_condition": "(ActiveNucleoHardwareFailure)",
            "conditionTextRange": [
                0,
                35
            ],
            "component_name": "ActiveNucleo",
            "componentTextRange": [
                37,
                48
            ],
            "duration": "10",
            "timingTextRange": [
                56,
                77
            ],
            "post_condition": "(HardwareFailureDetected)",
            "responseTextRange": [
                79,
                109
            ],
            "diagramVariables": "CC = <b><i>(ActiveNucleoHardwareFailure)</i></b>,  n = <b><i>10</i></b>, Response = <b><i>(HardwareFailureDetected)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: every point in the interval where <b><i>(ActiveNucleoHardwareFailure)</i></b> is true.\nREQUIRES: for every trigger, RES must hold at some point with distance <= <b><i>10</i></b> from the trigger (i.e., at trigger, trigger+1, ..., or trigger+<b><i>10</i></b>). If the interval ends sooner than trigger+<b><i>10</i></b>, then RES need not hold.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_noTrigger_within_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "regular_condition_unexp_pt": "ActiveNucleoHardwareFailure",
            "regular_condition_unexp_ft": "ActiveNucleoHardwareFailure",
            "regular_condition_SMV_pt": "ActiveNucleoHardwareFailure",
            "regular_condition_SMV_ft": "ActiveNucleoHardwareFailure",
            "post_condition_unexp_pt": "HardwareFailureDetected",
            "post_condition_unexp_ft": "HardwareFailureDetected",
            "post_condition_SMV_pt": "HardwareFailureDetected",
            "post_condition_SMV_ft": "HardwareFailureDetected",
            "ft_fetched": "(LAST V ($regular_condition_unexp_ft$ -> ((F[<=$duration$] $post_condition_unexp_ft$) | (F[<$duration$] LAST))))",
            "ft": "(LAST V (ActiveNucleoHardwareFailure -> ((F[<=10] HardwareFailureDetected) | (F[<10] LAST))))",
            "pt_fetched": "(H ((O[=$duration$] ($regular_condition_unexp_pt$ & (! $post_condition_unexp_pt$))) -> (O[<$duration$] (FTP | $post_condition_unexp_pt$))))",
            "pt": "(H ((O[=10] (ActiveNucleoHardwareFailure & (! HardwareFailureDetected))) -> (O[<10] (FTP | HardwareFailureDetected))))",
            "ptExpanded_fetched": "(H ((O[=$duration$] ($regular_condition_SMV_pt$ & (! $post_condition_SMV_pt$))) -> (O[<$duration$] ((! (Y TRUE)) | $post_condition_SMV_pt$))))",
            "ptExpanded": "(H ((O[10,10] (ActiveNucleoHardwareFailure & (! HardwareFailureDetected))) -> (O[0,9] ((! (Y TRUE)) | HardwareFailureDetected))))",
            "CoCoSpecCode": "H((OT(10, 10, (ActiveNucleoHardwareFailure and not (HardwareFailureDetected))) => OT(9, 0, (not (YtoPre(true)) or HardwareFailureDetected))))",
            "ftExpanded_fetched": "(LAST V ($regular_condition_SMV_ft$ -> ((F[<=$duration$] $post_condition_SMV_ft$) | (F[<$duration$] LAST))))",
            "ftExpandedUnoptimized": "(LAST V (ActiveNucleoHardwareFailure -> ((F[0,10] HardwareFailureDetected) | (F[0,9] LAST))))",
            "ftExpanded": "(LAST V (ActiveNucleoHardwareFailure -> ((F[0,10] HardwareFailureDetected) | (F[0,9] LAST))))",
            "ftInfAUExpanded_fetched": "(G ($regular_condition_SMV_ft$ -> (F[<=$duration$] $post_condition_SMV_ft$)))",
            "ftInfAUExpanded": "(G (ActiveNucleoHardwareFailure -> (F[0,10] HardwareFailureDetected)))",
            "component": "ActiveNucleo"
        },
        "status": "",
        "_id": "cca7042e-d8e6-11ef-941f-71fece653e2f"
    },
    {
        "reqid": "REQ013",
        "parent_reqid": "",
        "project": "Drone Requirements v0.4",
        "rationale": "\"Send References\"\n\nGroup: References\nFunctional\nFeasible\nNeeds Further Specification\n\"Acceptance criteria is very unclear, feasibility depends on the what the user means by \"send references\" \"",
        "comments": "v0.2: Tried to capture some of the discussion from the meetings in this requirement, definitely needs some work. Idea was \"whenever the system is calculating and using References, it should send them to the ground station\"",
        "fulltext": "whenever ReferenceNavigation Raspberry shall satisfy GroundStationCommunication & SendReferenceTrajectories",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "noTrigger",
            "timing": "null",
            "response": "satisfaction",
            "variables": [
                "ReferenceNavigation",
                "GroundStationCommunication",
                "SendReferenceTrajectories"
            ],
            "qualifier_word": "whenever",
            "pre_condition": "(ReferenceNavigation)",
            "regular_condition": "(ReferenceNavigation)",
            "conditionTextRange": [
                0,
                27
            ],
            "component_name": "Raspberry",
            "componentTextRange": [
                29,
                37
            ],
            "post_condition": "(GroundStationCommunication & SendReferenceTrajectories)",
            "responseTextRange": [
                45,
                106
            ],
            "diagramVariables": "CC = <b><i>(ReferenceNavigation)</i></b>, Response = <b><i>(GroundStationCommunication & SendReferenceTrajectories)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: every point in the interval where <b><i>(ReferenceNavigation)</i></b> is true.\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_noTrigger_null_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "regular_condition_unexp_pt": "ReferenceNavigation",
            "regular_condition_unexp_ft": "ReferenceNavigation",
            "regular_condition_SMV_pt": "ReferenceNavigation",
            "regular_condition_SMV_ft": "ReferenceNavigation",
            "post_condition_unexp_pt": "(GroundStationCommunication & SendReferenceTrajectories)",
            "post_condition_unexp_ft": "(GroundStationCommunication & SendReferenceTrajectories)",
            "post_condition_SMV_pt": "(GroundStationCommunication & SendReferenceTrajectories)",
            "post_condition_SMV_ft": "(GroundStationCommunication & SendReferenceTrajectories)",
            "ft_fetched": "(LAST V ($regular_condition_unexp_ft$ -> ((! LAST) U $post_condition_unexp_ft$)))",
            "ft": "(LAST V (ReferenceNavigation -> ((! LAST) U (GroundStationCommunication & SendReferenceTrajectories))))",
            "pt_fetched": "((H (! $regular_condition_unexp_pt$)) | (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & $regular_condition_unexp_pt$))))",
            "pt": "((H (! ReferenceNavigation)) | (! ((! (GroundStationCommunication & SendReferenceTrajectories)) S ((! (GroundStationCommunication & SendReferenceTrajectories)) & ReferenceNavigation))))",
            "ptExpanded_fetched": "((H (! $regular_condition_SMV_pt$)) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & $regular_condition_SMV_pt$))))",
            "ptExpanded": "((H (! ReferenceNavigation)) | (! ((! (GroundStationCommunication & SendReferenceTrajectories)) S ((! (GroundStationCommunication & SendReferenceTrajectories)) & ReferenceNavigation))))",
            "CoCoSpecCode": "(H(not (ReferenceNavigation)) or not (SI(ReferenceNavigation,not ((GroundStationCommunication and SendReferenceTrajectories)))))",
            "ftExpanded_fetched": "(LAST V ($regular_condition_SMV_ft$ -> ((! LAST) U $post_condition_SMV_ft$)))",
            "ftExpandedUnoptimized": "(LAST V (ReferenceNavigation -> ((! LAST) U (GroundStationCommunication & SendReferenceTrajectories))))",
            "ftExpanded": "(LAST V (ReferenceNavigation -> ((! LAST) U (GroundStationCommunication & SendReferenceTrajectories))))",
            "ftInfAUExpanded_fetched": "(G ($regular_condition_SMV_ft$ -> (F $post_condition_SMV_ft$)))",
            "ftInfAUExpanded": "(G (ReferenceNavigation -> (F (GroundStationCommunication & SendReferenceTrajectories))))",
            "component": "Raspberry"
        },
        "status": "",
        "_id": "cca7042f-d8e6-11ef-941f-71fece653e2f"
    },
    {
        "reqid": "REQ038_1",
        "parent_reqid": "REQ038",
        "project": "Drone Requirements v0.4",
        "rationale": "",
        "comments": "",
        "fulltext": "Jetson shall always satisfy (XDirectionGForce < XDirectionGTolerance) & (YDirectionGForce < YDirectionGTolerance) & (ZDirectionGForce < ZDirectionGTolerance)",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": [
                "XDirectionGForce",
                "XDirectionGTolerance",
                "YDirectionGForce",
                "YDirectionGTolerance",
                "ZDirectionGForce",
                "ZDirectionGTolerance"
            ],
            "component_name": "Jetson",
            "componentTextRange": [
                0,
                5
            ],
            "timingTextRange": [
                13,
                18
            ],
            "post_condition": "(( XDirectionGForce < XDirectionGTolerance ) & ( YDirectionGForce < YDirectionGTolerance ) & ( ZDirectionGForce < ZDirectionGTolerance ))",
            "responseTextRange": [
                20,
                156
            ],
            "diagramVariables": "Response = <b><i>(( XDirectionGForce < XDirectionGTolerance ) & ( YDirectionGForce < YDirectionGTolerance ) & ( ZDirectionGForce < ZDirectionGTolerance ))</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "post_condition_unexp_pt": "(((XDirectionGForce < XDirectionGTolerance) & (YDirectionGForce < YDirectionGTolerance)) & (ZDirectionGForce < ZDirectionGTolerance))",
            "post_condition_unexp_ft": "(((XDirectionGForce < XDirectionGTolerance) & (YDirectionGForce < YDirectionGTolerance)) & (ZDirectionGForce < ZDirectionGTolerance))",
            "post_condition_SMV_pt": "(((XDirectionGForce < XDirectionGTolerance) & (YDirectionGForce < YDirectionGTolerance)) & (ZDirectionGForce < ZDirectionGTolerance))",
            "post_condition_SMV_ft": "(((XDirectionGForce < XDirectionGTolerance) & (YDirectionGForce < YDirectionGTolerance)) & (ZDirectionGForce < ZDirectionGTolerance))",
            "ft_fetched": "(LAST V $post_condition_unexp_ft$)",
            "ft": "(LAST V (((XDirectionGForce < XDirectionGTolerance) & (YDirectionGForce < YDirectionGTolerance)) & (ZDirectionGForce < ZDirectionGTolerance)))",
            "pt_fetched": "(H $post_condition_unexp_pt$)",
            "pt": "(H (((XDirectionGForce < XDirectionGTolerance) & (YDirectionGForce < YDirectionGTolerance)) & (ZDirectionGForce < ZDirectionGTolerance)))",
            "ptExpanded_fetched": "(H $post_condition_SMV_pt$)",
            "ptExpanded": "(H (((XDirectionGForce < XDirectionGTolerance) & (YDirectionGForce < YDirectionGTolerance)) & (ZDirectionGForce < ZDirectionGTolerance)))",
            "CoCoSpecCode": "H((((XDirectionGForce < XDirectionGTolerance) and (YDirectionGForce < YDirectionGTolerance)) and (ZDirectionGForce < ZDirectionGTolerance)))",
            "ftExpanded_fetched": "(LAST V $post_condition_SMV_ft$)",
            "ftExpandedUnoptimized": "(LAST V (((XDirectionGForce < XDirectionGTolerance) & (YDirectionGForce < YDirectionGTolerance)) & (ZDirectionGForce < ZDirectionGTolerance)))",
            "ftExpanded": "(LAST V (((XDirectionGForce < XDirectionGTolerance) & (YDirectionGForce < YDirectionGTolerance)) & (ZDirectionGForce < ZDirectionGTolerance)))",
            "ftInfAUExpanded_fetched": "(G $post_condition_SMV_ft$)",
            "ftInfAUExpanded": "(G (((XDirectionGForce < XDirectionGTolerance) & (YDirectionGForce < YDirectionGTolerance)) & (ZDirectionGForce < ZDirectionGTolerance)))",
            "component": "Jetson"
        },
        "status": "",
        "_id": "cca70430-d8e6-11ef-941f-71fece653e2f"
    },
    {
        "reqid": "REQ041",
        "parent_reqid": "",
        "project": "Drone Requirements v0.4",
        "rationale": "\"Monitor accelerometer data (IMU)\"\n\nGroup: Data Monitoring\nFunctional\nPotentially Unfeasible\nNeeds Further Specification\n",
        "comments": "",
        "fulltext": "upon ControlLoopStart ActiveNucleo shall before ControlLoopFinish satisfy (MonitorAccelerometerData & SendAccelerometerData)",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "before",
            "response": "satisfaction",
            "variables": [
                "ControlLoopStart",
                "ControlLoopFinish",
                "MonitorAccelerometerData",
                "SendAccelerometerData"
            ],
            "qualifier_word": "upon",
            "pre_condition": "(ControlLoopStart)",
            "regular_condition": "(ControlLoopStart)",
            "conditionTextRange": [
                0,
                20
            ],
            "component_name": "ActiveNucleo",
            "componentTextRange": [
                22,
                33
            ],
            "stop_condition": "(ControlLoopFinish)",
            "timingTextRange": [
                41,
                64
            ],
            "post_condition": "(( MonitorAccelerometerData & SendAccelerometerData ))",
            "responseTextRange": [
                66,
                123
            ],
            "diagramVariables": "TC = <b><i>(ControlLoopStart)</i></b>, SC = <b><i>(ControlLoopFinish)</i></b>, Response = <b><i>(( MonitorAccelerometerData & SendAccelerometerData ))</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(ControlLoopStart)</i></b> is true and any point in the interval where <b><i>(ControlLoopStart)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at least once strictly before the state where the stop condition holds. If the stop condition never occurs in the interval, RES does not need to hold. If the stop condition holds at the trigger, the requirement is not satisfied.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_before_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "regular_condition_unexp_pt": "ControlLoopStart",
            "regular_condition_unexp_ft": "ControlLoopStart",
            "regular_condition_SMV_pt": "ControlLoopStart",
            "regular_condition_SMV_ft": "ControlLoopStart",
            "post_condition_unexp_pt": "(MonitorAccelerometerData & SendAccelerometerData)",
            "post_condition_unexp_ft": "(MonitorAccelerometerData & SendAccelerometerData)",
            "post_condition_SMV_pt": "(MonitorAccelerometerData & SendAccelerometerData)",
            "post_condition_SMV_ft": "(MonitorAccelerometerData & SendAccelerometerData)",
            "stop_condition_unexp_pt": "ControlLoopFinish",
            "stop_condition_unexp_ft": "ControlLoopFinish",
            "stop_condition_SMV_pt": "ControlLoopFinish",
            "stop_condition_SMV_ft": "ControlLoopFinish",
            "ft_fetched": "((LAST V (((! $regular_condition_unexp_ft$) & ((! LAST) & (X $regular_condition_unexp_ft$))) -> (X (($post_condition_unexp_ft$ | LAST) V (! $stop_condition_unexp_ft$))))) & ($regular_condition_unexp_ft$ -> (($post_condition_unexp_ft$ | LAST) V (! $stop_condition_unexp_ft$))))",
            "ft": "((LAST V (((! ControlLoopStart) & ((! LAST) & (X ControlLoopStart))) -> (X (((MonitorAccelerometerData & SendAccelerometerData) | LAST) V (! ControlLoopFinish))))) & (ControlLoopStart -> (((MonitorAccelerometerData & SendAccelerometerData) | LAST) V (! ControlLoopFinish))))",
            "pt_fetched": "(H ($stop_condition_unexp_pt$ -> ((H (! $regular_condition_unexp_pt$)) | (((! FTP) & (! ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | FTP)))) & (Y (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | FTP))))))))))",
            "pt": "(H (ControlLoopFinish -> ((H (! ControlLoopStart)) | (((! FTP) & (! (ControlLoopStart & ((Y (! ControlLoopStart)) | FTP)))) & (Y (! ((! (MonitorAccelerometerData & SendAccelerometerData)) S ((! (MonitorAccelerometerData & SendAccelerometerData)) & (ControlLoopStart & ((Y (! ControlLoopStart)) | FTP))))))))))",
            "ptExpanded_fetched": "(H ($stop_condition_SMV_pt$ -> ((H (! $regular_condition_SMV_pt$)) | (((Y TRUE) & (! ($regular_condition_SMV_pt$ & (Z (! $regular_condition_SMV_pt$))))) & (Y (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & (Z (! $regular_condition_SMV_pt$)))))))))))",
            "ptExpanded": "(H (ControlLoopFinish -> ((H (! ControlLoopStart)) | (((Y TRUE) & (! (ControlLoopStart & (Z (! ControlLoopStart))))) & (Y (! ((! (MonitorAccelerometerData & SendAccelerometerData)) S ((! (MonitorAccelerometerData & SendAccelerometerData)) & (ControlLoopStart & (Z (! ControlLoopStart)))))))))))",
            "CoCoSpecCode": "H((ControlLoopFinish => (H(not (ControlLoopStart)) or ((YtoPre(true) and not ((ControlLoopStart and ZtoPre(not (ControlLoopStart))))) and YtoPre(not (SI((ControlLoopStart and ZtoPre(not (ControlLoopStart))),not ((MonitorAccelerometerData and SendAccelerometerData)))))))))",
            "ftExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X (($post_condition_SMV_ft$ | LAST) V (! $stop_condition_SMV_ft$))))) & ($regular_condition_SMV_ft$ -> (($post_condition_SMV_ft$ | LAST) V (! $stop_condition_SMV_ft$))))",
            "ftExpandedUnoptimized": "((LAST V (((! ControlLoopStart) & ((! LAST) & (X ControlLoopStart))) -> (X (((MonitorAccelerometerData & SendAccelerometerData) | LAST) V (! ControlLoopFinish))))) & (ControlLoopStart -> (((MonitorAccelerometerData & SendAccelerometerData) | LAST) V (! ControlLoopFinish))))",
            "ftExpanded": "((LAST V (((! ControlLoopStart) & ((! LAST) & (X ControlLoopStart))) -> (X (((MonitorAccelerometerData & SendAccelerometerData) | LAST) V (! ControlLoopFinish))))) & (ControlLoopStart -> (((MonitorAccelerometerData & SendAccelerometerData) | LAST) V (! ControlLoopFinish))))",
            "ftInfAUExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X ($post_condition_SMV_ft$ V (! $stop_condition_SMV_ft$))))) & ($regular_condition_SMV_ft$ -> ($post_condition_SMV_ft$ V (! $stop_condition_SMV_ft$))))",
            "ftInfAUExpanded": "((G (((! ControlLoopStart) & (X ControlLoopStart)) -> (X ((MonitorAccelerometerData & SendAccelerometerData) V (! ControlLoopFinish))))) & (ControlLoopStart -> ((MonitorAccelerometerData & SendAccelerometerData) V (! ControlLoopFinish))))",
            "component": "ActiveNucleo"
        },
        "status": "",
        "_id": "cca70431-d8e6-11ef-941f-71fece653e2f"
    },
    {
        "reqid": "REQ003",
        "parent_reqid": "",
        "project": "Drone Requirements v0.4",
        "rationale": "\"Simulate Packet Loss\"\n\nGroup: Failure Analysis\nFunctional\nFeasible\n\"Need to clarify if packet loss only affects UAV and ground station communication or if the internal network packets are considered as well.\"",
        "comments": "v0.2: From meeting comments, \"if in simulation mode, always in that mode\"",
        "fulltext": "in SimulationMode whenever SimulatePacketLoss System shall always satisfy PacketLossRate <= AcceptablePacketLoss",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "noTrigger",
            "timing": "always",
            "response": "satisfaction",
            "variables": [
                "SimulationMode",
                "SimulatePacketLoss",
                "PacketLossRate",
                "AcceptablePacketLoss"
            ],
            "scope_mode": "SimulationMode",
            "scopeTextRange": [
                0,
                16
            ],
            "qualifier_word": "whenever",
            "pre_condition": "(SimulatePacketLoss)",
            "regular_condition": "(SimulatePacketLoss)",
            "conditionTextRange": [
                18,
                44
            ],
            "component_name": "System",
            "componentTextRange": [
                46,
                51
            ],
            "timingTextRange": [
                59,
                64
            ],
            "post_condition": "(PacketLossRate <= AcceptablePacketLoss)",
            "responseTextRange": [
                66,
                111
            ],
            "diagramVariables": "M = <b><i>SimulationMode</i></b>, CC = <b><i>(SimulatePacketLoss)</i></b>, Response = <b><i>(PacketLossRate <= AcceptablePacketLoss)</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>SimulationMode</i></b> holds.\nTRIGGER: every point in the interval where <b><i>(SimulatePacketLoss)</i></b> is true.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_noTrigger_always_satisfaction.svg",
            "scope_mode_pt": "SimulationMode",
            "scope_mode_ft": "SimulationMode",
            "regular_condition_unexp_pt": "SimulatePacketLoss",
            "regular_condition_unexp_ft": "SimulatePacketLoss",
            "regular_condition_SMV_pt": "SimulatePacketLoss",
            "regular_condition_SMV_ft": "SimulatePacketLoss",
            "post_condition_unexp_pt": "(PacketLossRate <= AcceptablePacketLoss)",
            "post_condition_unexp_ft": "(PacketLossRate <= AcceptablePacketLoss)",
            "post_condition_SMV_pt": "(PacketLossRate <= AcceptablePacketLoss)",
            "post_condition_SMV_ft": "(PacketLossRate <= AcceptablePacketLoss)",
            "ft_fetched": "((LAST V ((! (Fin_$scope_mode_ft$ & (! LAST))) | (X ((Lin_$scope_mode_ft$ | LAST) V ($regular_condition_unexp_ft$ -> ((Lin_$scope_mode_ft$ | LAST) V $post_condition_unexp_ft$)))))) & ($scope_mode_ft$ -> ((Lin_$scope_mode_ft$ | LAST) V ($regular_condition_unexp_ft$ -> ((Lin_$scope_mode_ft$ | LAST) V $post_condition_unexp_ft$)))))",
            "ft": "((LAST V ((! (Fin_SimulationMode & (! LAST))) | (X ((Lin_SimulationMode | LAST) V (SimulatePacketLoss -> ((Lin_SimulationMode | LAST) V (PacketLossRate <= AcceptablePacketLoss))))))) & (SimulationMode -> ((Lin_SimulationMode | LAST) V (SimulatePacketLoss -> ((Lin_SimulationMode | LAST) V (PacketLossRate <= AcceptablePacketLoss))))))",
            "pt_fetched": "((H (Lin_$scope_mode_pt$ -> (Y ((((! $regular_condition_unexp_pt$) S ((! $regular_condition_unexp_pt$) & Fin_$scope_mode_pt$)) | $post_condition_unexp_pt$) S ((((! $regular_condition_unexp_pt$) S ((! $regular_condition_unexp_pt$) & Fin_$scope_mode_pt$)) | $post_condition_unexp_pt$) & Fin_$scope_mode_pt$))))) & (((! Lin_$scope_mode_pt$) S ((! Lin_$scope_mode_pt$) & Fin_$scope_mode_pt$)) -> ((((! $regular_condition_unexp_pt$) S ((! $regular_condition_unexp_pt$) & Fin_$scope_mode_pt$)) | $post_condition_unexp_pt$) S ((((! $regular_condition_unexp_pt$) S ((! $regular_condition_unexp_pt$) & Fin_$scope_mode_pt$)) | $post_condition_unexp_pt$) & Fin_$scope_mode_pt$))))",
            "pt": "((H (Lin_SimulationMode -> (Y ((((! SimulatePacketLoss) S ((! SimulatePacketLoss) & Fin_SimulationMode)) | (PacketLossRate <= AcceptablePacketLoss)) S ((((! SimulatePacketLoss) S ((! SimulatePacketLoss) & Fin_SimulationMode)) | (PacketLossRate <= AcceptablePacketLoss)) & Fin_SimulationMode))))) & (((! Lin_SimulationMode) S ((! Lin_SimulationMode) & Fin_SimulationMode)) -> ((((! SimulatePacketLoss) S ((! SimulatePacketLoss) & Fin_SimulationMode)) | (PacketLossRate <= AcceptablePacketLoss)) S ((((! SimulatePacketLoss) S ((! SimulatePacketLoss) & Fin_SimulationMode)) | (PacketLossRate <= AcceptablePacketLoss)) & Fin_SimulationMode))))",
            "ptExpanded_fetched": "((H (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) -> (Y ((((! $regular_condition_SMV_pt$) S ((! $regular_condition_SMV_pt$) & ($scope_mode_pt$ & (Z (! $scope_mode_pt$))))) | $post_condition_SMV_pt$) S ((((! $regular_condition_SMV_pt$) S ((! $regular_condition_SMV_pt$) & ($scope_mode_pt$ & (Z (! $scope_mode_pt$))))) | $post_condition_SMV_pt$) & ($scope_mode_pt$ & (Z (! $scope_mode_pt$)))))))) & (((! ((! $scope_mode_pt$) & (Y $scope_mode_pt$))) S ((! ((! $scope_mode_pt$) & (Y $scope_mode_pt$))) & ($scope_mode_pt$ & (Z (! $scope_mode_pt$))))) -> ((((! $regular_condition_SMV_pt$) S ((! $regular_condition_SMV_pt$) & ($scope_mode_pt$ & (Z (! $scope_mode_pt$))))) | $post_condition_SMV_pt$) S ((((! $regular_condition_SMV_pt$) S ((! $regular_condition_SMV_pt$) & ($scope_mode_pt$ & (Z (! $scope_mode_pt$))))) | $post_condition_SMV_pt$) & ($scope_mode_pt$ & (Z (! $scope_mode_pt$)))))))",
            "ptExpanded": "((H (((! SimulationMode) & (Y SimulationMode)) -> (Y ((((! SimulatePacketLoss) S ((! SimulatePacketLoss) & (SimulationMode & (Z (! SimulationMode))))) | (PacketLossRate <= AcceptablePacketLoss)) S ((((! SimulatePacketLoss) S ((! SimulatePacketLoss) & (SimulationMode & (Z (! SimulationMode))))) | (PacketLossRate <= AcceptablePacketLoss)) & (SimulationMode & (Z (! SimulationMode)))))))) & (((! ((! SimulationMode) & (Y SimulationMode))) S ((! ((! SimulationMode) & (Y SimulationMode))) & (SimulationMode & (Z (! SimulationMode))))) -> ((((! SimulatePacketLoss) S ((! SimulatePacketLoss) & (SimulationMode & (Z (! SimulationMode))))) | (PacketLossRate <= AcceptablePacketLoss)) S ((((! SimulatePacketLoss) S ((! SimulatePacketLoss) & (SimulationMode & (Z (! SimulationMode))))) | (PacketLossRate <= AcceptablePacketLoss)) & (SimulationMode & (Z (! SimulationMode)))))))",
            "CoCoSpecCode": "(H(((not (SimulationMode) and YtoPre(SimulationMode)) => YtoPre(SI((SimulationMode and ZtoPre(not (SimulationMode))),(SI((SimulationMode and ZtoPre(not (SimulationMode))),not (SimulatePacketLoss)) or (PacketLossRate <= AcceptablePacketLoss)))))) and (SI((SimulationMode and ZtoPre(not (SimulationMode))),not ((not (SimulationMode) and YtoPre(SimulationMode)))) => SI((SimulationMode and ZtoPre(not (SimulationMode))),(SI((SimulationMode and ZtoPre(not (SimulationMode))),not (SimulatePacketLoss)) or (PacketLossRate <= AcceptablePacketLoss)))))",
            "ftExpanded_fetched": "((LAST V ((! ((((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$)) & (! LAST))) | (X (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST) V ($regular_condition_SMV_ft$ -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST) V $post_condition_SMV_ft$)))))) & ($scope_mode_ft$ -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST) V ($regular_condition_SMV_ft$ -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST) V $post_condition_SMV_ft$)))))",
            "ftExpandedUnoptimized": "((LAST V ((! ((((! SimulationMode) & (! LAST)) & (X SimulationMode)) & (! LAST))) | (X ((((SimulationMode & (! LAST)) & (X (! SimulationMode))) | LAST) V (SimulatePacketLoss -> ((((SimulationMode & (! LAST)) & (X (! SimulationMode))) | LAST) V (PacketLossRate <= AcceptablePacketLoss))))))) & (SimulationMode -> ((((SimulationMode & (! LAST)) & (X (! SimulationMode))) | LAST) V (SimulatePacketLoss -> ((((SimulationMode & (! LAST)) & (X (! SimulationMode))) | LAST) V (PacketLossRate <= AcceptablePacketLoss))))))",
            "ftExpanded": "((LAST V ((! ((((! SimulationMode) & (! LAST)) & (X SimulationMode)) & (! LAST))) | (X ((((SimulationMode & (! LAST)) & (X (! SimulationMode))) | LAST) V (SimulatePacketLoss -> ((((SimulationMode & (! LAST)) & (X (! SimulationMode))) | LAST) V (PacketLossRate <= AcceptablePacketLoss))))))) & (SimulationMode -> ((((SimulationMode & (! LAST)) & (X (! SimulationMode))) | LAST) V (SimulatePacketLoss -> ((((SimulationMode & (! LAST)) & (X (! SimulationMode))) | LAST) V (PacketLossRate <= AcceptablePacketLoss))))))",
            "ftInfAUExpanded_fetched": "((G ((! (((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$))) | (X ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V ($regular_condition_SMV_ft$ -> ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V $post_condition_SMV_ft$)))))) & ($scope_mode_ft$ -> ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V ($regular_condition_SMV_ft$ -> ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V $post_condition_SMV_ft$)))))",
            "ftInfAUExpanded": "((G ((! ((! SimulationMode) & (X SimulationMode))) | (X ((SimulationMode & (X (! SimulationMode))) V (SimulatePacketLoss -> ((SimulationMode & (X (! SimulationMode))) V (PacketLossRate <= AcceptablePacketLoss))))))) & (SimulationMode -> ((SimulationMode & (X (! SimulationMode))) V (SimulatePacketLoss -> ((SimulationMode & (X (! SimulationMode))) V (PacketLossRate <= AcceptablePacketLoss))))))",
            "component": "System"
        },
        "status": "",
        "_id": "cca70432-d8e6-11ef-941f-71fece653e2f"
    },
    {
        "reqid": "REQ046",
        "parent_reqid": "",
        "project": "Drone Requirements v0.4",
        "rationale": "\"Monitor the board status\"\n\nGroup: Data Monitoring\nFunctional\nFeasible\nNeeds Further Specification\n\"Which boards?\"",
        "comments": "",
        "fulltext": "upon ControlLoopStart ActiveNucleo shall before ControlLoopFinish satisfy (MonitorBoardStatus & SendBoardStatusData)",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "before",
            "response": "satisfaction",
            "variables": [
                "ControlLoopStart",
                "ControlLoopFinish",
                "MonitorBoardStatus",
                "SendBoardStatusData"
            ],
            "qualifier_word": "upon",
            "pre_condition": "(ControlLoopStart)",
            "regular_condition": "(ControlLoopStart)",
            "conditionTextRange": [
                0,
                20
            ],
            "component_name": "ActiveNucleo",
            "componentTextRange": [
                22,
                33
            ],
            "stop_condition": "(ControlLoopFinish)",
            "timingTextRange": [
                41,
                64
            ],
            "post_condition": "(( MonitorBoardStatus & SendBoardStatusData ))",
            "responseTextRange": [
                66,
                115
            ],
            "diagramVariables": "TC = <b><i>(ControlLoopStart)</i></b>, SC = <b><i>(ControlLoopFinish)</i></b>, Response = <b><i>(( MonitorBoardStatus & SendBoardStatusData ))</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(ControlLoopStart)</i></b> is true and any point in the interval where <b><i>(ControlLoopStart)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at least once strictly before the state where the stop condition holds. If the stop condition never occurs in the interval, RES does not need to hold. If the stop condition holds at the trigger, the requirement is not satisfied.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_before_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "regular_condition_unexp_pt": "ControlLoopStart",
            "regular_condition_unexp_ft": "ControlLoopStart",
            "regular_condition_SMV_pt": "ControlLoopStart",
            "regular_condition_SMV_ft": "ControlLoopStart",
            "post_condition_unexp_pt": "(MonitorBoardStatus & SendBoardStatusData)",
            "post_condition_unexp_ft": "(MonitorBoardStatus & SendBoardStatusData)",
            "post_condition_SMV_pt": "(MonitorBoardStatus & SendBoardStatusData)",
            "post_condition_SMV_ft": "(MonitorBoardStatus & SendBoardStatusData)",
            "stop_condition_unexp_pt": "ControlLoopFinish",
            "stop_condition_unexp_ft": "ControlLoopFinish",
            "stop_condition_SMV_pt": "ControlLoopFinish",
            "stop_condition_SMV_ft": "ControlLoopFinish",
            "ft_fetched": "((LAST V (((! $regular_condition_unexp_ft$) & ((! LAST) & (X $regular_condition_unexp_ft$))) -> (X (($post_condition_unexp_ft$ | LAST) V (! $stop_condition_unexp_ft$))))) & ($regular_condition_unexp_ft$ -> (($post_condition_unexp_ft$ | LAST) V (! $stop_condition_unexp_ft$))))",
            "ft": "((LAST V (((! ControlLoopStart) & ((! LAST) & (X ControlLoopStart))) -> (X (((MonitorBoardStatus & SendBoardStatusData) | LAST) V (! ControlLoopFinish))))) & (ControlLoopStart -> (((MonitorBoardStatus & SendBoardStatusData) | LAST) V (! ControlLoopFinish))))",
            "pt_fetched": "(H ($stop_condition_unexp_pt$ -> ((H (! $regular_condition_unexp_pt$)) | (((! FTP) & (! ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | FTP)))) & (Y (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | FTP))))))))))",
            "pt": "(H (ControlLoopFinish -> ((H (! ControlLoopStart)) | (((! FTP) & (! (ControlLoopStart & ((Y (! ControlLoopStart)) | FTP)))) & (Y (! ((! (MonitorBoardStatus & SendBoardStatusData)) S ((! (MonitorBoardStatus & SendBoardStatusData)) & (ControlLoopStart & ((Y (! ControlLoopStart)) | FTP))))))))))",
            "ptExpanded_fetched": "(H ($stop_condition_SMV_pt$ -> ((H (! $regular_condition_SMV_pt$)) | (((Y TRUE) & (! ($regular_condition_SMV_pt$ & (Z (! $regular_condition_SMV_pt$))))) & (Y (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & (Z (! $regular_condition_SMV_pt$)))))))))))",
            "ptExpanded": "(H (ControlLoopFinish -> ((H (! ControlLoopStart)) | (((Y TRUE) & (! (ControlLoopStart & (Z (! ControlLoopStart))))) & (Y (! ((! (MonitorBoardStatus & SendBoardStatusData)) S ((! (MonitorBoardStatus & SendBoardStatusData)) & (ControlLoopStart & (Z (! ControlLoopStart)))))))))))",
            "CoCoSpecCode": "H((ControlLoopFinish => (H(not (ControlLoopStart)) or ((YtoPre(true) and not ((ControlLoopStart and ZtoPre(not (ControlLoopStart))))) and YtoPre(not (SI((ControlLoopStart and ZtoPre(not (ControlLoopStart))),not ((MonitorBoardStatus and SendBoardStatusData)))))))))",
            "ftExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X (($post_condition_SMV_ft$ | LAST) V (! $stop_condition_SMV_ft$))))) & ($regular_condition_SMV_ft$ -> (($post_condition_SMV_ft$ | LAST) V (! $stop_condition_SMV_ft$))))",
            "ftExpandedUnoptimized": "((LAST V (((! ControlLoopStart) & ((! LAST) & (X ControlLoopStart))) -> (X (((MonitorBoardStatus & SendBoardStatusData) | LAST) V (! ControlLoopFinish))))) & (ControlLoopStart -> (((MonitorBoardStatus & SendBoardStatusData) | LAST) V (! ControlLoopFinish))))",
            "ftExpanded": "((LAST V (((! ControlLoopStart) & ((! LAST) & (X ControlLoopStart))) -> (X (((MonitorBoardStatus & SendBoardStatusData) | LAST) V (! ControlLoopFinish))))) & (ControlLoopStart -> (((MonitorBoardStatus & SendBoardStatusData) | LAST) V (! ControlLoopFinish))))",
            "ftInfAUExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X ($post_condition_SMV_ft$ V (! $stop_condition_SMV_ft$))))) & ($regular_condition_SMV_ft$ -> ($post_condition_SMV_ft$ V (! $stop_condition_SMV_ft$))))",
            "ftInfAUExpanded": "((G (((! ControlLoopStart) & (X ControlLoopStart)) -> (X ((MonitorBoardStatus & SendBoardStatusData) V (! ControlLoopFinish))))) & (ControlLoopStart -> ((MonitorBoardStatus & SendBoardStatusData) V (! ControlLoopFinish))))",
            "component": "ActiveNucleo"
        },
        "status": "",
        "_id": "cca70433-d8e6-11ef-941f-71fece653e2f"
    },
    {
        "reqid": "REQ032",
        "parent_reqid": "",
        "project": "Drone Requirements v0.4",
        "rationale": "\"Fast data sent rate\"\n\nGroup: Time Requirements \nNon-functional\nFeasible\nNeeds Further Specification\n\"Need clarification on what is \"fast\". \"",
        "comments": "Agreed",
        "fulltext": "",
        "semantics": {},
        "status": "",
        "_id": "cca70434-d8e6-11ef-941f-71fece653e2f"
    },
    {
        "reqid": "REQ026",
        "parent_reqid": "",
        "project": "Drone Requirements v0.4",
        "rationale": "\"The controller implementation must be the same in the HIL, Physical and Simulator\"\n\nGroup: TBD\nNon-functional\nUnfeasible\nNeeds Further Specification\n\"It is not possible to use the ProVANT Simulator implementations on the UAV, modifications are required.\"",
        "comments": "Non-functional requirement: Out of scope",
        "fulltext": "",
        "semantics": {},
        "status": "",
        "_id": "cca70435-d8e6-11ef-941f-71fece653e2f"
    },
    {
        "reqid": "REQ061",
        "parent_reqid": "",
        "project": "Drone Requirements v0.4",
        "rationale": "\"Define a critical battery range % (0% - 25%)\"\n\nGroup: Data Monitoring\nFunctional\nFeasible\nNeeds Further Specification\n\"The definition is fine, but what does the user wants to do with this?\"",
        "comments": "Doesn't seem like a behavioural requirement to me, leaving this one empty for now",
        "fulltext": "",
        "semantics": {},
        "status": "",
        "_id": "cca70436-d8e6-11ef-941f-71fece653e2f"
    },
    {
        "reqid": "REQ050",
        "parent_reqid": "",
        "project": "Drone Requirements v0.4",
        "rationale": "\"Provide absolute positioning accuracy under challenging GPS measurement conditions (satellite shadowing, non-line of sight receptions, signal diffraction or multipath effects)\"\n\nData Monitoring\nFunctional\nFeasible\nNeeds Further Specification",
        "comments": "Could refactor the scope of this into a \"GPSChallenge\" fragment\n\nWould benefit from a metric of \"absolute accuracy\"",
        "fulltext": "while SatelliteShadowing | NoReceptionLoS | SignalDiffraction | MultipathEffects System shall always satisfy PositioningAccuracy",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": [
                "SatelliteShadowing",
                "NoReceptionLoS",
                "SignalDiffraction",
                "MultipathEffects",
                "PositioningAccuracy"
            ],
            "scope_mode": "(SatelliteShadowing | NoReceptionLoS | SignalDiffraction | MultipathEffects)",
            "scopeTextRange": [
                0,
                79
            ],
            "component_name": "System",
            "componentTextRange": [
                81,
                86
            ],
            "timingTextRange": [
                94,
                99
            ],
            "post_condition": "(PositioningAccuracy)",
            "responseTextRange": [
                101,
                127
            ],
            "diagramVariables": "M = <b><i>(SatelliteShadowing | NoReceptionLoS | SignalDiffraction | MultipathEffects)</i></b>, Response = <b><i>(PositioningAccuracy)</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>(SatelliteShadowing | NoReceptionLoS | SignalDiffraction | MultipathEffects)</i></b> holds.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_null_always_satisfaction.svg",
            "scope_mode_pt": "(((SatelliteShadowing | NoReceptionLoS) | SignalDiffraction) | MultipathEffects)",
            "scope_mode_ft": "(((SatelliteShadowing | NoReceptionLoS) | SignalDiffraction) | MultipathEffects)",
            "post_condition_unexp_pt": "PositioningAccuracy",
            "post_condition_unexp_ft": "PositioningAccuracy",
            "post_condition_SMV_pt": "PositioningAccuracy",
            "post_condition_SMV_ft": "PositioningAccuracy",
            "ft_fetched": "(LAST V ($scope_mode_ft$ -> $post_condition_unexp_ft$))",
            "ft": "(LAST V ((((SatelliteShadowing | NoReceptionLoS) | SignalDiffraction) | MultipathEffects) -> PositioningAccuracy))",
            "pt_fetched": "(H ($scope_mode_pt$ -> $post_condition_unexp_pt$))",
            "pt": "(H ((((SatelliteShadowing | NoReceptionLoS) | SignalDiffraction) | MultipathEffects) -> PositioningAccuracy))",
            "ptExpanded_fetched": "(H ($scope_mode_pt$ -> $post_condition_SMV_pt$))",
            "ptExpanded": "(H ((((SatelliteShadowing | NoReceptionLoS) | SignalDiffraction) | MultipathEffects) -> PositioningAccuracy))",
            "CoCoSpecCode": "H(((((SatelliteShadowing or NoReceptionLoS) or SignalDiffraction) or MultipathEffects) => PositioningAccuracy))",
            "ftExpanded_fetched": "(LAST V ($scope_mode_ft$ -> $post_condition_SMV_ft$))",
            "ftExpandedUnoptimized": "(LAST V ((((SatelliteShadowing | NoReceptionLoS) | SignalDiffraction) | MultipathEffects) -> PositioningAccuracy))",
            "ftExpanded": "(LAST V ((((SatelliteShadowing | NoReceptionLoS) | SignalDiffraction) | MultipathEffects) -> PositioningAccuracy))",
            "ftInfAUExpanded_fetched": "(G ($scope_mode_ft$ -> $post_condition_SMV_ft$))",
            "ftInfAUExpanded": "(G ((((SatelliteShadowing | NoReceptionLoS) | SignalDiffraction) | MultipathEffects) -> PositioningAccuracy))",
            "component": "System"
        },
        "status": "",
        "_id": "cca70437-d8e6-11ef-941f-71fece653e2f"
    },
    {
        "reqid": "REQ008_1",
        "parent_reqid": "REQ008",
        "project": "Drone Requirements v0.4",
        "rationale": "",
        "comments": "v0.2: Created child requirements for REQ008 as examples for the specific components",
        "fulltext": "after SimulationMode Raspberry shall within 10 milliseconds satisfy GroundStationReceivedData",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "after",
                "exclusive": false,
                "required": false
            },
            "condition": "null",
            "timing": "within",
            "response": "satisfaction",
            "variables": [
                "SimulationMode",
                "GroundStationReceivedData"
            ],
            "scope_mode": "SimulationMode",
            "scopeTextRange": [
                0,
                19
            ],
            "component_name": "Raspberry",
            "componentTextRange": [
                21,
                29
            ],
            "duration": "10",
            "timingTextRange": [
                37,
                58
            ],
            "post_condition": "(GroundStationReceivedData)",
            "responseTextRange": [
                60,
                92
            ],
            "diagramVariables": "M = <b><i>SimulationMode</i></b>,  n = <b><i>10</i></b>, Response = <b><i>(GroundStationReceivedData)</i></b>.",
            "description": "ENFORCED: in the interval (if defined) starting strictly after the first <b><i>SimulationMode</i></b> interval and spanning to the end of the execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some point with distance <= <b><i>10</i></b> from the trigger (i.e., at trigger, trigger+1, ..., or trigger+<b><i>10</i></b>). If the interval ends sooner than trigger+<b><i>10</i></b>, then RES need not hold.",
            "diagram": "_media/user-interface/examples/svgDiagrams/after_null_within_satisfaction.svg",
            "scope_mode_pt": "SimulationMode",
            "scope_mode_ft": "SimulationMode",
            "post_condition_unexp_pt": "GroundStationReceivedData",
            "post_condition_unexp_ft": "GroundStationReceivedData",
            "post_condition_SMV_pt": "GroundStationReceivedData",
            "post_condition_SMV_ft": "GroundStationReceivedData",
            "ft_fetched": "(((! FLin_$scope_mode_ft$) U (FLin_$scope_mode_ft$ & (X ((F[<=$duration$] $post_condition_unexp_ft$) | (F[<$duration$] LAST))))) | (LAST V (! FLin_$scope_mode_ft$)))",
            "ft": "(((! FLin_SimulationMode) U (FLin_SimulationMode & (X ((F[<=10] GroundStationReceivedData) | (F[<10] LAST))))) | (LAST V (! FLin_SimulationMode)))",
            "pt_fetched": "((O FLin_$scope_mode_pt$) -> ((((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & FLin_$scope_mode_pt$)) -> (O[<$duration$] FLin_$scope_mode_pt$)) S ((((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & FLin_$scope_mode_pt$)) -> (O[<$duration$] FLin_$scope_mode_pt$)) & FLin_$scope_mode_pt$)))",
            "pt": "((O FLin_SimulationMode) -> ((((! GroundStationReceivedData) S ((! GroundStationReceivedData) & FLin_SimulationMode)) -> (O[<10] FLin_SimulationMode)) S ((((! GroundStationReceivedData) S ((! GroundStationReceivedData) & FLin_SimulationMode)) -> (O[<10] FLin_SimulationMode)) & FLin_SimulationMode)))",
            "ptExpanded_fetched": "((O (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) & (Y (H (! ((! $scope_mode_pt$) & (Y $scope_mode_pt$))))))) -> ((((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) & (Y (H (! ((! $scope_mode_pt$) & (Y $scope_mode_pt$)))))))) -> (O[<$duration$] (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) & (Y (H (! ((! $scope_mode_pt$) & (Y $scope_mode_pt$)))))))) S ((((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) & (Y (H (! ((! $scope_mode_pt$) & (Y $scope_mode_pt$)))))))) -> (O[<$duration$] (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) & (Y (H (! ((! $scope_mode_pt$) & (Y $scope_mode_pt$)))))))) & (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) & (Y (H (! ((! $scope_mode_pt$) & (Y $scope_mode_pt$)))))))))",
            "ptExpanded": "((O (((! SimulationMode) & (Y SimulationMode)) & (Y (H (! ((! SimulationMode) & (Y SimulationMode))))))) -> ((((! GroundStationReceivedData) S ((! GroundStationReceivedData) & (((! SimulationMode) & (Y SimulationMode)) & (Y (H (! ((! SimulationMode) & (Y SimulationMode)))))))) -> (O[0,9] (((! SimulationMode) & (Y SimulationMode)) & (Y (H (! ((! SimulationMode) & (Y SimulationMode)))))))) S ((((! GroundStationReceivedData) S ((! GroundStationReceivedData) & (((! SimulationMode) & (Y SimulationMode)) & (Y (H (! ((! SimulationMode) & (Y SimulationMode)))))))) -> (O[0,9] (((! SimulationMode) & (Y SimulationMode)) & (Y (H (! ((! SimulationMode) & (Y SimulationMode)))))))) & (((! SimulationMode) & (Y SimulationMode)) & (Y (H (! ((! SimulationMode) & (Y SimulationMode)))))))))",
            "CoCoSpecCode": "(O(((not (SimulationMode) and YtoPre(SimulationMode)) and YtoPre(H(not ((not (SimulationMode) and YtoPre(SimulationMode))))))) => SI(((not (SimulationMode) and YtoPre(SimulationMode)) and YtoPre(H(not ((not (SimulationMode) and YtoPre(SimulationMode)))))),(SI(((not (SimulationMode) and YtoPre(SimulationMode)) and YtoPre(H(not ((not (SimulationMode) and YtoPre(SimulationMode)))))),not (GroundStationReceivedData)) => OT(9, 0, ((not (SimulationMode) and YtoPre(SimulationMode)) and YtoPre(H(not ((not (SimulationMode) and YtoPre(SimulationMode))))))))))",
            "ftExpanded_fetched": "(((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) & (X ((F[<=$duration$] $post_condition_SMV_ft$) | (F[<$duration$] LAST))))) | (LAST V (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))",
            "ftExpandedUnoptimized": "(((! ((SimulationMode & (! LAST)) & (X (! SimulationMode)))) U (((SimulationMode & (! LAST)) & (X (! SimulationMode))) & (X ((F[0,10] GroundStationReceivedData) | (F[0,9] LAST))))) | (LAST V (! ((SimulationMode & (! LAST)) & (X (! SimulationMode))))))",
            "ftExpanded": "(((! ((SimulationMode & (! LAST)) & (X (! SimulationMode)))) U (((SimulationMode & (! LAST)) & (X (! SimulationMode))) & (X ((F[0,10] GroundStationReceivedData) | (F[0,9] LAST))))) | (LAST V (! ((SimulationMode & (! LAST)) & (X (! SimulationMode))))))",
            "ftInfAUExpanded_fetched": "(((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) & (X (F[<=$duration$] $post_condition_SMV_ft$)))) | (G (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))",
            "ftInfAUExpanded": "(((! (SimulationMode & (X (! SimulationMode)))) U ((SimulationMode & (X (! SimulationMode))) & (X (F[0,10] GroundStationReceivedData)))) | (G (! (SimulationMode & (X (! SimulationMode))))))",
            "component": "Raspberry"
        },
        "status": "",
        "_id": "cca70438-d8e6-11ef-941f-71fece653e2f"
    },
    {
        "reqid": "REQ013_2",
        "parent_reqid": "REQ013",
        "project": "Drone Requirements v0.4",
        "rationale": "",
        "comments": "",
        "fulltext": "when WaypointsReceived Jetson shall within 10 milliseconds satisfy ReferencesCalculated",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "within",
            "response": "satisfaction",
            "variables": [
                "WaypointsReceived",
                "ReferencesCalculated"
            ],
            "qualifier_word": "when",
            "pre_condition": "(WaypointsReceived)",
            "regular_condition": "(WaypointsReceived)",
            "conditionTextRange": [
                0,
                21
            ],
            "component_name": "Jetson",
            "componentTextRange": [
                23,
                28
            ],
            "duration": "10",
            "timingTextRange": [
                36,
                57
            ],
            "post_condition": "(ReferencesCalculated)",
            "responseTextRange": [
                59,
                86
            ],
            "diagramVariables": "TC = <b><i>(WaypointsReceived)</i></b>,  n = <b><i>10</i></b>, Response = <b><i>(ReferencesCalculated)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(WaypointsReceived)</i></b> is true and any point in the interval where <b><i>(WaypointsReceived)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some point with distance <= <b><i>10</i></b> from the trigger (i.e., at trigger, trigger+1, ..., or trigger+<b><i>10</i></b>). If the interval ends sooner than trigger+<b><i>10</i></b>, then RES need not hold.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_within_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "regular_condition_unexp_pt": "WaypointsReceived",
            "regular_condition_unexp_ft": "WaypointsReceived",
            "regular_condition_SMV_pt": "WaypointsReceived",
            "regular_condition_SMV_ft": "WaypointsReceived",
            "post_condition_unexp_pt": "ReferencesCalculated",
            "post_condition_unexp_ft": "ReferencesCalculated",
            "post_condition_SMV_pt": "ReferencesCalculated",
            "post_condition_SMV_ft": "ReferencesCalculated",
            "ft_fetched": "((LAST V (((! $regular_condition_unexp_ft$) & ((! LAST) & (X $regular_condition_unexp_ft$))) -> (X ((F[<=$duration$] $post_condition_unexp_ft$) | (F[<$duration$] LAST))))) & ($regular_condition_unexp_ft$ -> ((F[<=$duration$] $post_condition_unexp_ft$) | (F[<$duration$] LAST))))",
            "ft": "((LAST V (((! WaypointsReceived) & ((! LAST) & (X WaypointsReceived))) -> (X ((F[<=10] ReferencesCalculated) | (F[<10] LAST))))) & (WaypointsReceived -> ((F[<=10] ReferencesCalculated) | (F[<10] LAST))))",
            "pt_fetched": "(H ((O[=$duration$] (($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | FTP)) & (! $post_condition_unexp_pt$))) -> (O[<$duration$] (FTP | $post_condition_unexp_pt$))))",
            "pt": "(H ((O[=10] ((WaypointsReceived & ((Y (! WaypointsReceived)) | FTP)) & (! ReferencesCalculated))) -> (O[<10] (FTP | ReferencesCalculated))))",
            "ptExpanded_fetched": "(H ((O[=$duration$] (($regular_condition_SMV_pt$ & (Z (! $regular_condition_SMV_pt$))) & (! $post_condition_SMV_pt$))) -> (O[<$duration$] ((! (Y TRUE)) | $post_condition_SMV_pt$))))",
            "ptExpanded": "(H ((O[10,10] ((WaypointsReceived & (Z (! WaypointsReceived))) & (! ReferencesCalculated))) -> (O[0,9] ((! (Y TRUE)) | ReferencesCalculated))))",
            "CoCoSpecCode": "H((OT(10, 10, ((WaypointsReceived and ZtoPre(not (WaypointsReceived))) and not (ReferencesCalculated))) => OT(9, 0, (not (YtoPre(true)) or ReferencesCalculated))))",
            "ftExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X ((F[<=$duration$] $post_condition_SMV_ft$) | (F[<$duration$] LAST))))) & ($regular_condition_SMV_ft$ -> ((F[<=$duration$] $post_condition_SMV_ft$) | (F[<$duration$] LAST))))",
            "ftExpandedUnoptimized": "((LAST V (((! WaypointsReceived) & ((! LAST) & (X WaypointsReceived))) -> (X ((F[0,10] ReferencesCalculated) | (F[0,9] LAST))))) & (WaypointsReceived -> ((F[0,10] ReferencesCalculated) | (F[0,9] LAST))))",
            "ftExpanded": "((LAST V (((! WaypointsReceived) & ((! LAST) & (X WaypointsReceived))) -> (X ((F[0,10] ReferencesCalculated) | (F[0,9] LAST))))) & (WaypointsReceived -> ((F[0,10] ReferencesCalculated) | (F[0,9] LAST))))",
            "ftInfAUExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X (F[<=$duration$] $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> (F[<=$duration$] $post_condition_SMV_ft$)))",
            "ftInfAUExpanded": "((G (((! WaypointsReceived) & (X WaypointsReceived)) -> (X (F[0,10] ReferencesCalculated)))) & (WaypointsReceived -> (F[0,10] ReferencesCalculated)))",
            "component": "Jetson"
        },
        "status": "",
        "_id": "cca70439-d8e6-11ef-941f-71fece653e2f"
    },
    {
        "reqid": "REQ020",
        "parent_reqid": "",
        "project": "Drone Requirements v0.4",
        "rationale": "\"Be independent of the ubuntu versions\"\n\nGroup: Code Requirements\nFunctional\nFeasible\nNeeds Further Specification",
        "comments": "I think this one is probably out of scope for FRETish requirements",
        "fulltext": "",
        "semantics": {},
        "status": "",
        "_id": "cca7043a-d8e6-11ef-941f-71fece653e2f"
    },
    {
        "reqid": "REQ033",
        "parent_reqid": "",
        "project": "Drone Requirements v0.4",
        "rationale": "\"Monitor linear velocities (ground speed and relative wind speed)\"\n\nGroup: Data Monitoring\nFunctional\nFeasible\nNeeds Further Specification\n\"Is ground speed equal to UAV linear speed?\"",
        "comments": "v0.2: Added a while scope to allow for running the system with monitoring on or off",
        "fulltext": "upon ControlLoopStart ActiveNucleo shall before ControlLoopFinish satisfy (MonitorGroundSpeed & SendGroundSpeedData) & (MonitorWindSpeed & SendWindSpeedData)",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "before",
            "response": "satisfaction",
            "variables": [
                "ControlLoopStart",
                "ControlLoopFinish",
                "MonitorGroundSpeed",
                "SendGroundSpeedData",
                "MonitorWindSpeed",
                "SendWindSpeedData"
            ],
            "qualifier_word": "upon",
            "pre_condition": "(ControlLoopStart)",
            "regular_condition": "(ControlLoopStart)",
            "conditionTextRange": [
                0,
                20
            ],
            "component_name": "ActiveNucleo",
            "componentTextRange": [
                22,
                33
            ],
            "stop_condition": "(ControlLoopFinish)",
            "timingTextRange": [
                41,
                64
            ],
            "post_condition": "(( MonitorGroundSpeed & SendGroundSpeedData ) & ( MonitorWindSpeed & SendWindSpeedData ))",
            "responseTextRange": [
                66,
                156
            ],
            "diagramVariables": "TC = <b><i>(ControlLoopStart)</i></b>, SC = <b><i>(ControlLoopFinish)</i></b>, Response = <b><i>(( MonitorGroundSpeed & SendGroundSpeedData ) & ( MonitorWindSpeed & SendWindSpeedData ))</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(ControlLoopStart)</i></b> is true and any point in the interval where <b><i>(ControlLoopStart)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at least once strictly before the state where the stop condition holds. If the stop condition never occurs in the interval, RES does not need to hold. If the stop condition holds at the trigger, the requirement is not satisfied.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_before_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "regular_condition_unexp_pt": "ControlLoopStart",
            "regular_condition_unexp_ft": "ControlLoopStart",
            "regular_condition_SMV_pt": "ControlLoopStart",
            "regular_condition_SMV_ft": "ControlLoopStart",
            "post_condition_unexp_pt": "((MonitorGroundSpeed & SendGroundSpeedData) & (MonitorWindSpeed & SendWindSpeedData))",
            "post_condition_unexp_ft": "((MonitorGroundSpeed & SendGroundSpeedData) & (MonitorWindSpeed & SendWindSpeedData))",
            "post_condition_SMV_pt": "((MonitorGroundSpeed & SendGroundSpeedData) & (MonitorWindSpeed & SendWindSpeedData))",
            "post_condition_SMV_ft": "((MonitorGroundSpeed & SendGroundSpeedData) & (MonitorWindSpeed & SendWindSpeedData))",
            "stop_condition_unexp_pt": "ControlLoopFinish",
            "stop_condition_unexp_ft": "ControlLoopFinish",
            "stop_condition_SMV_pt": "ControlLoopFinish",
            "stop_condition_SMV_ft": "ControlLoopFinish",
            "ft_fetched": "((LAST V (((! $regular_condition_unexp_ft$) & ((! LAST) & (X $regular_condition_unexp_ft$))) -> (X (($post_condition_unexp_ft$ | LAST) V (! $stop_condition_unexp_ft$))))) & ($regular_condition_unexp_ft$ -> (($post_condition_unexp_ft$ | LAST) V (! $stop_condition_unexp_ft$))))",
            "ft": "((LAST V (((! ControlLoopStart) & ((! LAST) & (X ControlLoopStart))) -> (X ((((MonitorGroundSpeed & SendGroundSpeedData) & (MonitorWindSpeed & SendWindSpeedData)) | LAST) V (! ControlLoopFinish))))) & (ControlLoopStart -> ((((MonitorGroundSpeed & SendGroundSpeedData) & (MonitorWindSpeed & SendWindSpeedData)) | LAST) V (! ControlLoopFinish))))",
            "pt_fetched": "(H ($stop_condition_unexp_pt$ -> ((H (! $regular_condition_unexp_pt$)) | (((! FTP) & (! ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | FTP)))) & (Y (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | FTP))))))))))",
            "pt": "(H (ControlLoopFinish -> ((H (! ControlLoopStart)) | (((! FTP) & (! (ControlLoopStart & ((Y (! ControlLoopStart)) | FTP)))) & (Y (! ((! ((MonitorGroundSpeed & SendGroundSpeedData) & (MonitorWindSpeed & SendWindSpeedData))) S ((! ((MonitorGroundSpeed & SendGroundSpeedData) & (MonitorWindSpeed & SendWindSpeedData))) & (ControlLoopStart & ((Y (! ControlLoopStart)) | FTP))))))))))",
            "ptExpanded_fetched": "(H ($stop_condition_SMV_pt$ -> ((H (! $regular_condition_SMV_pt$)) | (((Y TRUE) & (! ($regular_condition_SMV_pt$ & (Z (! $regular_condition_SMV_pt$))))) & (Y (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & (Z (! $regular_condition_SMV_pt$)))))))))))",
            "ptExpanded": "(H (ControlLoopFinish -> ((H (! ControlLoopStart)) | (((Y TRUE) & (! (ControlLoopStart & (Z (! ControlLoopStart))))) & (Y (! ((! ((MonitorGroundSpeed & SendGroundSpeedData) & (MonitorWindSpeed & SendWindSpeedData))) S ((! ((MonitorGroundSpeed & SendGroundSpeedData) & (MonitorWindSpeed & SendWindSpeedData))) & (ControlLoopStart & (Z (! ControlLoopStart)))))))))))",
            "CoCoSpecCode": "H((ControlLoopFinish => (H(not (ControlLoopStart)) or ((YtoPre(true) and not ((ControlLoopStart and ZtoPre(not (ControlLoopStart))))) and YtoPre(not (SI((ControlLoopStart and ZtoPre(not (ControlLoopStart))),not (((MonitorGroundSpeed and SendGroundSpeedData) and (MonitorWindSpeed and SendWindSpeedData))))))))))",
            "ftExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X (($post_condition_SMV_ft$ | LAST) V (! $stop_condition_SMV_ft$))))) & ($regular_condition_SMV_ft$ -> (($post_condition_SMV_ft$ | LAST) V (! $stop_condition_SMV_ft$))))",
            "ftExpandedUnoptimized": "((LAST V (((! ControlLoopStart) & ((! LAST) & (X ControlLoopStart))) -> (X ((((MonitorGroundSpeed & SendGroundSpeedData) & (MonitorWindSpeed & SendWindSpeedData)) | LAST) V (! ControlLoopFinish))))) & (ControlLoopStart -> ((((MonitorGroundSpeed & SendGroundSpeedData) & (MonitorWindSpeed & SendWindSpeedData)) | LAST) V (! ControlLoopFinish))))",
            "ftExpanded": "((LAST V (((! ControlLoopStart) & ((! LAST) & (X ControlLoopStart))) -> (X ((((MonitorGroundSpeed & SendGroundSpeedData) & (MonitorWindSpeed & SendWindSpeedData)) | LAST) V (! ControlLoopFinish))))) & (ControlLoopStart -> ((((MonitorGroundSpeed & SendGroundSpeedData) & (MonitorWindSpeed & SendWindSpeedData)) | LAST) V (! ControlLoopFinish))))",
            "ftInfAUExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X ($post_condition_SMV_ft$ V (! $stop_condition_SMV_ft$))))) & ($regular_condition_SMV_ft$ -> ($post_condition_SMV_ft$ V (! $stop_condition_SMV_ft$))))",
            "ftInfAUExpanded": "((G (((! ControlLoopStart) & (X ControlLoopStart)) -> (X (((MonitorGroundSpeed & SendGroundSpeedData) & (MonitorWindSpeed & SendWindSpeedData)) V (! ControlLoopFinish))))) & (ControlLoopStart -> (((MonitorGroundSpeed & SendGroundSpeedData) & (MonitorWindSpeed & SendWindSpeedData)) V (! ControlLoopFinish))))",
            "component": "ActiveNucleo"
        },
        "status": "",
        "_id": "cca7043b-d8e6-11ef-941f-71fece653e2f"
    },
    {
        "reqid": "REQ005",
        "parent_reqid": "",
        "project": "Drone Requirements v0.4",
        "rationale": "\"Health monitoring of electric embedded systems\"\n\nGroup: Monitoring\nFunctional\nPotentially Unfeasible\nNeeds Further Specification",
        "comments": "v0.1: This is effectively a high-level requirement that would benefit from a more detailed picture of the monitoring system\n\nv0.2: Unchanged; looking at the discussion notes, not much to add her at the moment. The AADL model might help a lot here",
        "fulltext": "System shall always satisfy ElectricSystemsHealthMonitoring",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": [
                "ElectricSystemsHealthMonitoring"
            ],
            "component_name": "System",
            "componentTextRange": [
                0,
                5
            ],
            "timingTextRange": [
                13,
                18
            ],
            "post_condition": "(ElectricSystemsHealthMonitoring)",
            "responseTextRange": [
                20,
                58
            ],
            "diagramVariables": "Response = <b><i>(ElectricSystemsHealthMonitoring)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "post_condition_unexp_pt": "ElectricSystemsHealthMonitoring",
            "post_condition_unexp_ft": "ElectricSystemsHealthMonitoring",
            "post_condition_SMV_pt": "ElectricSystemsHealthMonitoring",
            "post_condition_SMV_ft": "ElectricSystemsHealthMonitoring",
            "ft_fetched": "(LAST V $post_condition_unexp_ft$)",
            "ft": "(LAST V ElectricSystemsHealthMonitoring)",
            "pt_fetched": "(H $post_condition_unexp_pt$)",
            "pt": "(H ElectricSystemsHealthMonitoring)",
            "ptExpanded_fetched": "(H $post_condition_SMV_pt$)",
            "ptExpanded": "(H ElectricSystemsHealthMonitoring)",
            "CoCoSpecCode": "H(ElectricSystemsHealthMonitoring)",
            "ftExpanded_fetched": "(LAST V $post_condition_SMV_ft$)",
            "ftExpandedUnoptimized": "(LAST V ElectricSystemsHealthMonitoring)",
            "ftExpanded": "(LAST V ElectricSystemsHealthMonitoring)",
            "ftInfAUExpanded_fetched": "(G $post_condition_SMV_ft$)",
            "ftInfAUExpanded": "(G ElectricSystemsHealthMonitoring)",
            "component": "System"
        },
        "status": "",
        "_id": "cca7043c-d8e6-11ef-941f-71fece653e2f"
    },
    {
        "reqid": "REQ017",
        "parent_reqid": "",
        "project": "Drone Requirements v0.4",
        "rationale": "\"Assess the hardware time performance\"\n\nGroup: Performance\nFunctional\nFeasible\nNeeds Further Specification\n\"Which hardware?\"",
        "comments": "Agreed; this could do with being more specific.",
        "fulltext": "when ControlLoopFinish System shall satisfy CollectHardwareExecutionTimes & AssessHardwareTimePerformance",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "null",
            "response": "satisfaction",
            "variables": [
                "ControlLoopFinish",
                "CollectHardwareExecutionTimes",
                "AssessHardwareTimePerformance"
            ],
            "qualifier_word": "when",
            "pre_condition": "(ControlLoopFinish)",
            "regular_condition": "(ControlLoopFinish)",
            "conditionTextRange": [
                0,
                21
            ],
            "component_name": "System",
            "componentTextRange": [
                23,
                28
            ],
            "post_condition": "(CollectHardwareExecutionTimes & AssessHardwareTimePerformance)",
            "responseTextRange": [
                36,
                104
            ],
            "diagramVariables": "TC = <b><i>(ControlLoopFinish)</i></b>, Response = <b><i>(CollectHardwareExecutionTimes & AssessHardwareTimePerformance)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(ControlLoopFinish)</i></b> is true and any point in the interval where <b><i>(ControlLoopFinish)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_null_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "regular_condition_unexp_pt": "ControlLoopFinish",
            "regular_condition_unexp_ft": "ControlLoopFinish",
            "regular_condition_SMV_pt": "ControlLoopFinish",
            "regular_condition_SMV_ft": "ControlLoopFinish",
            "post_condition_unexp_pt": "(CollectHardwareExecutionTimes & AssessHardwareTimePerformance)",
            "post_condition_unexp_ft": "(CollectHardwareExecutionTimes & AssessHardwareTimePerformance)",
            "post_condition_SMV_pt": "(CollectHardwareExecutionTimes & AssessHardwareTimePerformance)",
            "post_condition_SMV_ft": "(CollectHardwareExecutionTimes & AssessHardwareTimePerformance)",
            "ft_fetched": "((LAST V (((! $regular_condition_unexp_ft$) & ((! LAST) & (X $regular_condition_unexp_ft$))) -> (X ((! LAST) U $post_condition_unexp_ft$)))) & ($regular_condition_unexp_ft$ -> ((! LAST) U $post_condition_unexp_ft$)))",
            "ft": "((LAST V (((! ControlLoopFinish) & ((! LAST) & (X ControlLoopFinish))) -> (X ((! LAST) U (CollectHardwareExecutionTimes & AssessHardwareTimePerformance))))) & (ControlLoopFinish -> ((! LAST) U (CollectHardwareExecutionTimes & AssessHardwareTimePerformance))))",
            "pt_fetched": "((H (! $regular_condition_unexp_pt$)) | (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | FTP))))))",
            "pt": "((H (! ControlLoopFinish)) | (! ((! (CollectHardwareExecutionTimes & AssessHardwareTimePerformance)) S ((! (CollectHardwareExecutionTimes & AssessHardwareTimePerformance)) & (ControlLoopFinish & ((Y (! ControlLoopFinish)) | FTP))))))",
            "ptExpanded_fetched": "((H (! $regular_condition_SMV_pt$)) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & (Z (! $regular_condition_SMV_pt$)))))))",
            "ptExpanded": "((H (! ControlLoopFinish)) | (! ((! (CollectHardwareExecutionTimes & AssessHardwareTimePerformance)) S ((! (CollectHardwareExecutionTimes & AssessHardwareTimePerformance)) & (ControlLoopFinish & (Z (! ControlLoopFinish)))))))",
            "CoCoSpecCode": "(H(not (ControlLoopFinish)) or not (SI((ControlLoopFinish and ZtoPre(not (ControlLoopFinish))),not ((CollectHardwareExecutionTimes and AssessHardwareTimePerformance)))))",
            "ftExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X ((! LAST) U $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> ((! LAST) U $post_condition_SMV_ft$)))",
            "ftExpandedUnoptimized": "((LAST V (((! ControlLoopFinish) & ((! LAST) & (X ControlLoopFinish))) -> (X ((! LAST) U (CollectHardwareExecutionTimes & AssessHardwareTimePerformance))))) & (ControlLoopFinish -> ((! LAST) U (CollectHardwareExecutionTimes & AssessHardwareTimePerformance))))",
            "ftExpanded": "((LAST V (((! ControlLoopFinish) & ((! LAST) & (X ControlLoopFinish))) -> (X ((! LAST) U (CollectHardwareExecutionTimes & AssessHardwareTimePerformance))))) & (ControlLoopFinish -> ((! LAST) U (CollectHardwareExecutionTimes & AssessHardwareTimePerformance))))",
            "ftInfAUExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X (F $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> (F $post_condition_SMV_ft$)))",
            "ftInfAUExpanded": "((G (((! ControlLoopFinish) & (X ControlLoopFinish)) -> (X (F (CollectHardwareExecutionTimes & AssessHardwareTimePerformance))))) & (ControlLoopFinish -> (F (CollectHardwareExecutionTimes & AssessHardwareTimePerformance))))",
            "component": "System"
        },
        "status": "",
        "_id": "cca7043d-d8e6-11ef-941f-71fece653e2f"
    },
    {
        "reqid": "REQ010_1",
        "parent_reqid": "REQ010",
        "project": "Drone Requirements v0.4",
        "rationale": "",
        "comments": "",
        "fulltext": "when NucleoOneControlTrigger System shall within 10 milliseconds satisfy NucleoOneControl",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "within",
            "response": "satisfaction",
            "variables": [
                "NucleoOneControlTrigger",
                "NucleoOneControl"
            ],
            "qualifier_word": "when",
            "pre_condition": "(NucleoOneControlTrigger)",
            "regular_condition": "(NucleoOneControlTrigger)",
            "conditionTextRange": [
                0,
                27
            ],
            "component_name": "System",
            "componentTextRange": [
                29,
                34
            ],
            "duration": "10",
            "timingTextRange": [
                42,
                63
            ],
            "post_condition": "(NucleoOneControl)",
            "responseTextRange": [
                65,
                88
            ],
            "diagramVariables": "TC = <b><i>(NucleoOneControlTrigger)</i></b>,  n = <b><i>10</i></b>, Response = <b><i>(NucleoOneControl)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(NucleoOneControlTrigger)</i></b> is true and any point in the interval where <b><i>(NucleoOneControlTrigger)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some point with distance <= <b><i>10</i></b> from the trigger (i.e., at trigger, trigger+1, ..., or trigger+<b><i>10</i></b>). If the interval ends sooner than trigger+<b><i>10</i></b>, then RES need not hold.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_within_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "regular_condition_unexp_pt": "NucleoOneControlTrigger",
            "regular_condition_unexp_ft": "NucleoOneControlTrigger",
            "regular_condition_SMV_pt": "NucleoOneControlTrigger",
            "regular_condition_SMV_ft": "NucleoOneControlTrigger",
            "post_condition_unexp_pt": "NucleoOneControl",
            "post_condition_unexp_ft": "NucleoOneControl",
            "post_condition_SMV_pt": "NucleoOneControl",
            "post_condition_SMV_ft": "NucleoOneControl",
            "ft_fetched": "((LAST V (((! $regular_condition_unexp_ft$) & ((! LAST) & (X $regular_condition_unexp_ft$))) -> (X ((F[<=$duration$] $post_condition_unexp_ft$) | (F[<$duration$] LAST))))) & ($regular_condition_unexp_ft$ -> ((F[<=$duration$] $post_condition_unexp_ft$) | (F[<$duration$] LAST))))",
            "ft": "((LAST V (((! NucleoOneControlTrigger) & ((! LAST) & (X NucleoOneControlTrigger))) -> (X ((F[<=10] NucleoOneControl) | (F[<10] LAST))))) & (NucleoOneControlTrigger -> ((F[<=10] NucleoOneControl) | (F[<10] LAST))))",
            "pt_fetched": "(H ((O[=$duration$] (($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | FTP)) & (! $post_condition_unexp_pt$))) -> (O[<$duration$] (FTP | $post_condition_unexp_pt$))))",
            "pt": "(H ((O[=10] ((NucleoOneControlTrigger & ((Y (! NucleoOneControlTrigger)) | FTP)) & (! NucleoOneControl))) -> (O[<10] (FTP | NucleoOneControl))))",
            "ptExpanded_fetched": "(H ((O[=$duration$] (($regular_condition_SMV_pt$ & (Z (! $regular_condition_SMV_pt$))) & (! $post_condition_SMV_pt$))) -> (O[<$duration$] ((! (Y TRUE)) | $post_condition_SMV_pt$))))",
            "ptExpanded": "(H ((O[10,10] ((NucleoOneControlTrigger & (Z (! NucleoOneControlTrigger))) & (! NucleoOneControl))) -> (O[0,9] ((! (Y TRUE)) | NucleoOneControl))))",
            "CoCoSpecCode": "H((OT(10, 10, ((NucleoOneControlTrigger and ZtoPre(not (NucleoOneControlTrigger))) and not (NucleoOneControl))) => OT(9, 0, (not (YtoPre(true)) or NucleoOneControl))))",
            "ftExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X ((F[<=$duration$] $post_condition_SMV_ft$) | (F[<$duration$] LAST))))) & ($regular_condition_SMV_ft$ -> ((F[<=$duration$] $post_condition_SMV_ft$) | (F[<$duration$] LAST))))",
            "ftExpandedUnoptimized": "((LAST V (((! NucleoOneControlTrigger) & ((! LAST) & (X NucleoOneControlTrigger))) -> (X ((F[0,10] NucleoOneControl) | (F[0,9] LAST))))) & (NucleoOneControlTrigger -> ((F[0,10] NucleoOneControl) | (F[0,9] LAST))))",
            "ftExpanded": "((LAST V (((! NucleoOneControlTrigger) & ((! LAST) & (X NucleoOneControlTrigger))) -> (X ((F[0,10] NucleoOneControl) | (F[0,9] LAST))))) & (NucleoOneControlTrigger -> ((F[0,10] NucleoOneControl) | (F[0,9] LAST))))",
            "ftInfAUExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X (F[<=$duration$] $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> (F[<=$duration$] $post_condition_SMV_ft$)))",
            "ftInfAUExpanded": "((G (((! NucleoOneControlTrigger) & (X NucleoOneControlTrigger)) -> (X (F[0,10] NucleoOneControl)))) & (NucleoOneControlTrigger -> (F[0,10] NucleoOneControl)))",
            "component": "System"
        },
        "status": "",
        "_id": "cca7043e-d8e6-11ef-941f-71fece653e2f"
    },
    {
        "reqid": "REQ042",
        "parent_reqid": "",
        "project": "Drone Requirements v0.4",
        "rationale": "\"Monitor magnetometer data (IMU)\"\n\nGroup: Data Monitoring\nFunctional\nPotentially Unfeasible\nNeeds Further Specification",
        "comments": "",
        "fulltext": "upon ControlLoopStart ActiveNucleo shall before ControlLoopFinish satisfy (MonitorMagnetometerData & SendMagnetometerData)",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "before",
            "response": "satisfaction",
            "variables": [
                "ControlLoopStart",
                "ControlLoopFinish",
                "MonitorMagnetometerData",
                "SendMagnetometerData"
            ],
            "qualifier_word": "upon",
            "pre_condition": "(ControlLoopStart)",
            "regular_condition": "(ControlLoopStart)",
            "conditionTextRange": [
                0,
                20
            ],
            "component_name": "ActiveNucleo",
            "componentTextRange": [
                22,
                33
            ],
            "stop_condition": "(ControlLoopFinish)",
            "timingTextRange": [
                41,
                64
            ],
            "post_condition": "(( MonitorMagnetometerData & SendMagnetometerData ))",
            "responseTextRange": [
                66,
                121
            ],
            "diagramVariables": "TC = <b><i>(ControlLoopStart)</i></b>, SC = <b><i>(ControlLoopFinish)</i></b>, Response = <b><i>(( MonitorMagnetometerData & SendMagnetometerData ))</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(ControlLoopStart)</i></b> is true and any point in the interval where <b><i>(ControlLoopStart)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at least once strictly before the state where the stop condition holds. If the stop condition never occurs in the interval, RES does not need to hold. If the stop condition holds at the trigger, the requirement is not satisfied.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_before_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "regular_condition_unexp_pt": "ControlLoopStart",
            "regular_condition_unexp_ft": "ControlLoopStart",
            "regular_condition_SMV_pt": "ControlLoopStart",
            "regular_condition_SMV_ft": "ControlLoopStart",
            "post_condition_unexp_pt": "(MonitorMagnetometerData & SendMagnetometerData)",
            "post_condition_unexp_ft": "(MonitorMagnetometerData & SendMagnetometerData)",
            "post_condition_SMV_pt": "(MonitorMagnetometerData & SendMagnetometerData)",
            "post_condition_SMV_ft": "(MonitorMagnetometerData & SendMagnetometerData)",
            "stop_condition_unexp_pt": "ControlLoopFinish",
            "stop_condition_unexp_ft": "ControlLoopFinish",
            "stop_condition_SMV_pt": "ControlLoopFinish",
            "stop_condition_SMV_ft": "ControlLoopFinish",
            "ft_fetched": "((LAST V (((! $regular_condition_unexp_ft$) & ((! LAST) & (X $regular_condition_unexp_ft$))) -> (X (($post_condition_unexp_ft$ | LAST) V (! $stop_condition_unexp_ft$))))) & ($regular_condition_unexp_ft$ -> (($post_condition_unexp_ft$ | LAST) V (! $stop_condition_unexp_ft$))))",
            "ft": "((LAST V (((! ControlLoopStart) & ((! LAST) & (X ControlLoopStart))) -> (X (((MonitorMagnetometerData & SendMagnetometerData) | LAST) V (! ControlLoopFinish))))) & (ControlLoopStart -> (((MonitorMagnetometerData & SendMagnetometerData) | LAST) V (! ControlLoopFinish))))",
            "pt_fetched": "(H ($stop_condition_unexp_pt$ -> ((H (! $regular_condition_unexp_pt$)) | (((! FTP) & (! ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | FTP)))) & (Y (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | FTP))))))))))",
            "pt": "(H (ControlLoopFinish -> ((H (! ControlLoopStart)) | (((! FTP) & (! (ControlLoopStart & ((Y (! ControlLoopStart)) | FTP)))) & (Y (! ((! (MonitorMagnetometerData & SendMagnetometerData)) S ((! (MonitorMagnetometerData & SendMagnetometerData)) & (ControlLoopStart & ((Y (! ControlLoopStart)) | FTP))))))))))",
            "ptExpanded_fetched": "(H ($stop_condition_SMV_pt$ -> ((H (! $regular_condition_SMV_pt$)) | (((Y TRUE) & (! ($regular_condition_SMV_pt$ & (Z (! $regular_condition_SMV_pt$))))) & (Y (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & (Z (! $regular_condition_SMV_pt$)))))))))))",
            "ptExpanded": "(H (ControlLoopFinish -> ((H (! ControlLoopStart)) | (((Y TRUE) & (! (ControlLoopStart & (Z (! ControlLoopStart))))) & (Y (! ((! (MonitorMagnetometerData & SendMagnetometerData)) S ((! (MonitorMagnetometerData & SendMagnetometerData)) & (ControlLoopStart & (Z (! ControlLoopStart)))))))))))",
            "CoCoSpecCode": "H((ControlLoopFinish => (H(not (ControlLoopStart)) or ((YtoPre(true) and not ((ControlLoopStart and ZtoPre(not (ControlLoopStart))))) and YtoPre(not (SI((ControlLoopStart and ZtoPre(not (ControlLoopStart))),not ((MonitorMagnetometerData and SendMagnetometerData)))))))))",
            "ftExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X (($post_condition_SMV_ft$ | LAST) V (! $stop_condition_SMV_ft$))))) & ($regular_condition_SMV_ft$ -> (($post_condition_SMV_ft$ | LAST) V (! $stop_condition_SMV_ft$))))",
            "ftExpandedUnoptimized": "((LAST V (((! ControlLoopStart) & ((! LAST) & (X ControlLoopStart))) -> (X (((MonitorMagnetometerData & SendMagnetometerData) | LAST) V (! ControlLoopFinish))))) & (ControlLoopStart -> (((MonitorMagnetometerData & SendMagnetometerData) | LAST) V (! ControlLoopFinish))))",
            "ftExpanded": "((LAST V (((! ControlLoopStart) & ((! LAST) & (X ControlLoopStart))) -> (X (((MonitorMagnetometerData & SendMagnetometerData) | LAST) V (! ControlLoopFinish))))) & (ControlLoopStart -> (((MonitorMagnetometerData & SendMagnetometerData) | LAST) V (! ControlLoopFinish))))",
            "ftInfAUExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X ($post_condition_SMV_ft$ V (! $stop_condition_SMV_ft$))))) & ($regular_condition_SMV_ft$ -> ($post_condition_SMV_ft$ V (! $stop_condition_SMV_ft$))))",
            "ftInfAUExpanded": "((G (((! ControlLoopStart) & (X ControlLoopStart)) -> (X ((MonitorMagnetometerData & SendMagnetometerData) V (! ControlLoopFinish))))) & (ControlLoopStart -> ((MonitorMagnetometerData & SendMagnetometerData) V (! ControlLoopFinish))))",
            "component": "ActiveNucleo"
        },
        "status": "",
        "_id": "cca7043f-d8e6-11ef-941f-71fece653e2f"
    },
    {
        "reqid": "REQ027",
        "parent_reqid": "",
        "project": "Drone Requirements v0.4",
        "rationale": "\"Have a good user and developer manual\"\n\nGroup: Documentation\nNon-functional\nFeasible\nDetailing level: Satisfactory",
        "comments": "Non-functional requirement: Out of scope",
        "fulltext": "",
        "semantics": {},
        "status": "",
        "_id": "cca70440-d8e6-11ef-941f-71fece653e2f"
    }
]